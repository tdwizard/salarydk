# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class UserCompany(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company_id': 'str',
        'created_at': 'datetime',
        'departments': 'list[UserDepartment]',
        'email': 'str',
        'id': 'str',
        'name': 'str',
        'notification_pay_roll_approval_upcoming': 'bool',
        'notification_pay_roll_automatically_started': 'bool',
        'notification_pay_roll_deadline_upcoming': 'bool',
        'notification_pay_roll_done': 'bool',
        'notification_swipe_awaiting_approval': 'bool',
        'permissions': 'list[UserCompanyPermissions]',
        'profile_image_url': 'str',
        'user_id': 'str',
        'user_type': 'str'
    }

    attribute_map = {
        'company_id': 'companyID',
        'created_at': 'createdAt',
        'departments': 'departments',
        'email': 'email',
        'id': 'id',
        'name': 'name',
        'notification_pay_roll_approval_upcoming': 'notificationPayRollApprovalUpcoming',
        'notification_pay_roll_automatically_started': 'notificationPayRollAutomaticallyStarted',
        'notification_pay_roll_deadline_upcoming': 'notificationPayRollDeadlineUpcoming',
        'notification_pay_roll_done': 'notificationPayRollDone',
        'notification_swipe_awaiting_approval': 'notificationSwipeAwaitingApproval',
        'permissions': 'permissions',
        'profile_image_url': 'profileImageURL',
        'user_id': 'userID',
        'user_type': 'userType'
    }

    def __init__(self, company_id=None, created_at=None, departments=None, email=None, id=None, name=None, notification_pay_roll_approval_upcoming=None, notification_pay_roll_automatically_started=None, notification_pay_roll_deadline_upcoming=None, notification_pay_roll_done=None, notification_swipe_awaiting_approval=None, permissions=None, profile_image_url=None, user_id=None, user_type=None, local_vars_configuration=None):  # noqa: E501
        """UserCompany - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._company_id = None
        self._created_at = None
        self._departments = None
        self._email = None
        self._id = None
        self._name = None
        self._notification_pay_roll_approval_upcoming = None
        self._notification_pay_roll_automatically_started = None
        self._notification_pay_roll_deadline_upcoming = None
        self._notification_pay_roll_done = None
        self._notification_swipe_awaiting_approval = None
        self._permissions = None
        self._profile_image_url = None
        self._user_id = None
        self._user_type = None
        self.discriminator = None

        if company_id is not None:
            self.company_id = company_id
        if created_at is not None:
            self.created_at = created_at
        if departments is not None:
            self.departments = departments
        if email is not None:
            self.email = email
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.notification_pay_roll_approval_upcoming = notification_pay_roll_approval_upcoming
        self.notification_pay_roll_automatically_started = notification_pay_roll_automatically_started
        self.notification_pay_roll_deadline_upcoming = notification_pay_roll_deadline_upcoming
        self.notification_pay_roll_done = notification_pay_roll_done
        self.notification_swipe_awaiting_approval = notification_swipe_awaiting_approval
        if permissions is not None:
            self.permissions = permissions
        if profile_image_url is not None:
            self.profile_image_url = profile_image_url
        if user_id is not None:
            self.user_id = user_id
        if user_type is not None:
            self.user_type = user_type

    @property
    def company_id(self):
        """Gets the company_id of this UserCompany.  # noqa: E501


        :return: The company_id of this UserCompany.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UserCompany.


        :param company_id: The company_id of this UserCompany.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def created_at(self):
        """Gets the created_at of this UserCompany.  # noqa: E501


        :return: The created_at of this UserCompany.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserCompany.


        :param created_at: The created_at of this UserCompany.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def departments(self):
        """Gets the departments of this UserCompany.  # noqa: E501


        :return: The departments of this UserCompany.  # noqa: E501
        :rtype: list[UserDepartment]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this UserCompany.


        :param departments: The departments of this UserCompany.  # noqa: E501
        :type: list[UserDepartment]
        """

        self._departments = departments

    @property
    def email(self):
        """Gets the email of this UserCompany.  # noqa: E501


        :return: The email of this UserCompany.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCompany.


        :param email: The email of this UserCompany.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserCompany.  # noqa: E501


        :return: The id of this UserCompany.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserCompany.


        :param id: The id of this UserCompany.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserCompany.  # noqa: E501


        :return: The name of this UserCompany.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserCompany.


        :param name: The name of this UserCompany.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notification_pay_roll_approval_upcoming(self):
        """Gets the notification_pay_roll_approval_upcoming of this UserCompany.  # noqa: E501

        Should a notification be sent the day before approval deadline?  # noqa: E501

        :return: The notification_pay_roll_approval_upcoming of this UserCompany.  # noqa: E501
        :rtype: bool
        """
        return self._notification_pay_roll_approval_upcoming

    @notification_pay_roll_approval_upcoming.setter
    def notification_pay_roll_approval_upcoming(self, notification_pay_roll_approval_upcoming):
        """Sets the notification_pay_roll_approval_upcoming of this UserCompany.

        Should a notification be sent the day before approval deadline?  # noqa: E501

        :param notification_pay_roll_approval_upcoming: The notification_pay_roll_approval_upcoming of this UserCompany.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notification_pay_roll_approval_upcoming is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_pay_roll_approval_upcoming`, must not be `None`")  # noqa: E501

        self._notification_pay_roll_approval_upcoming = notification_pay_roll_approval_upcoming

    @property
    def notification_pay_roll_automatically_started(self):
        """Gets the notification_pay_roll_automatically_started of this UserCompany.  # noqa: E501

        Should a notification be sent when a new pay roll is automatically started?  # noqa: E501

        :return: The notification_pay_roll_automatically_started of this UserCompany.  # noqa: E501
        :rtype: bool
        """
        return self._notification_pay_roll_automatically_started

    @notification_pay_roll_automatically_started.setter
    def notification_pay_roll_automatically_started(self, notification_pay_roll_automatically_started):
        """Sets the notification_pay_roll_automatically_started of this UserCompany.

        Should a notification be sent when a new pay roll is automatically started?  # noqa: E501

        :param notification_pay_roll_automatically_started: The notification_pay_roll_automatically_started of this UserCompany.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notification_pay_roll_automatically_started is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_pay_roll_automatically_started`, must not be `None`")  # noqa: E501

        self._notification_pay_roll_automatically_started = notification_pay_roll_automatically_started

    @property
    def notification_pay_roll_deadline_upcoming(self):
        """Gets the notification_pay_roll_deadline_upcoming of this UserCompany.  # noqa: E501

        Should a notification be sent a few days before approval deadline?  # noqa: E501

        :return: The notification_pay_roll_deadline_upcoming of this UserCompany.  # noqa: E501
        :rtype: bool
        """
        return self._notification_pay_roll_deadline_upcoming

    @notification_pay_roll_deadline_upcoming.setter
    def notification_pay_roll_deadline_upcoming(self, notification_pay_roll_deadline_upcoming):
        """Sets the notification_pay_roll_deadline_upcoming of this UserCompany.

        Should a notification be sent a few days before approval deadline?  # noqa: E501

        :param notification_pay_roll_deadline_upcoming: The notification_pay_roll_deadline_upcoming of this UserCompany.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notification_pay_roll_deadline_upcoming is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_pay_roll_deadline_upcoming`, must not be `None`")  # noqa: E501

        self._notification_pay_roll_deadline_upcoming = notification_pay_roll_deadline_upcoming

    @property
    def notification_pay_roll_done(self):
        """Gets the notification_pay_roll_done of this UserCompany.  # noqa: E501

        Should a notification be sent after processing is done?  # noqa: E501

        :return: The notification_pay_roll_done of this UserCompany.  # noqa: E501
        :rtype: bool
        """
        return self._notification_pay_roll_done

    @notification_pay_roll_done.setter
    def notification_pay_roll_done(self, notification_pay_roll_done):
        """Sets the notification_pay_roll_done of this UserCompany.

        Should a notification be sent after processing is done?  # noqa: E501

        :param notification_pay_roll_done: The notification_pay_roll_done of this UserCompany.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notification_pay_roll_done is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_pay_roll_done`, must not be `None`")  # noqa: E501

        self._notification_pay_roll_done = notification_pay_roll_done

    @property
    def notification_swipe_awaiting_approval(self):
        """Gets the notification_swipe_awaiting_approval of this UserCompany.  # noqa: E501

        Should a notification be sent when Swipe approvals are awaiting?  # noqa: E501

        :return: The notification_swipe_awaiting_approval of this UserCompany.  # noqa: E501
        :rtype: bool
        """
        return self._notification_swipe_awaiting_approval

    @notification_swipe_awaiting_approval.setter
    def notification_swipe_awaiting_approval(self, notification_swipe_awaiting_approval):
        """Sets the notification_swipe_awaiting_approval of this UserCompany.

        Should a notification be sent when Swipe approvals are awaiting?  # noqa: E501

        :param notification_swipe_awaiting_approval: The notification_swipe_awaiting_approval of this UserCompany.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notification_swipe_awaiting_approval is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_swipe_awaiting_approval`, must not be `None`")  # noqa: E501

        self._notification_swipe_awaiting_approval = notification_swipe_awaiting_approval

    @property
    def permissions(self):
        """Gets the permissions of this UserCompany.  # noqa: E501


        :return: The permissions of this UserCompany.  # noqa: E501
        :rtype: list[UserCompanyPermissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserCompany.


        :param permissions: The permissions of this UserCompany.  # noqa: E501
        :type: list[UserCompanyPermissions]
        """

        self._permissions = permissions

    @property
    def profile_image_url(self):
        """Gets the profile_image_url of this UserCompany.  # noqa: E501


        :return: The profile_image_url of this UserCompany.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """Sets the profile_image_url of this UserCompany.


        :param profile_image_url: The profile_image_url of this UserCompany.  # noqa: E501
        :type: str
        """

        self._profile_image_url = profile_image_url

    @property
    def user_id(self):
        """Gets the user_id of this UserCompany.  # noqa: E501


        :return: The user_id of this UserCompany.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserCompany.


        :param user_id: The user_id of this UserCompany.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_type(self):
        """Gets the user_type of this UserCompany.  # noqa: E501

        The user type relation  # noqa: E501

        :return: The user_type of this UserCompany.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserCompany.

        The user type relation  # noqa: E501

        :param user_type: The user_type of this UserCompany.  # noqa: E501
        :type: str
        """
        allowed_values = ["Business", "Accountant"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and user_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"  # noqa: E501
                .format(user_type, allowed_values)
            )

        self._user_type = user_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCompany):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserCompany):
            return True

        return self.to_dict() != other.to_dict()
