# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class LeaveType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assignable': 'bool',
        '_class': 'str',
        'company_id': 'str',
        'cycle': 'str',
        'cycle_start': 'float',
        'employee_selectable': 'bool',
        'excess_type': 'str',
        'expiry_type': 'str',
        'id': 'str',
        'include_in_pension_basis': 'bool',
        'max_days': 'float',
        'min_days': 'float',
        'name': 'str',
        'payout_destination': 'str',
        'payout_on_termination': 'bool',
        'payout_type': 'str',
        'title': 'str',
        'unit': 'str',
        'vesting': 'str'
    }

    attribute_map = {
        'assignable': 'assignable',
        '_class': 'class',
        'company_id': 'companyID',
        'cycle': 'cycle',
        'cycle_start': 'cycleStart',
        'employee_selectable': 'employeeSelectable',
        'excess_type': 'excessType',
        'expiry_type': 'expiryType',
        'id': 'id',
        'include_in_pension_basis': 'includeInPensionBasis',
        'max_days': 'maxDays',
        'min_days': 'minDays',
        'name': 'name',
        'payout_destination': 'payoutDestination',
        'payout_on_termination': 'payoutOnTermination',
        'payout_type': 'payoutType',
        'title': 'title',
        'unit': 'unit',
        'vesting': 'vesting'
    }

    def __init__(self, assignable=None, _class=None, company_id=None, cycle=None, cycle_start=None, employee_selectable=None, excess_type=None, expiry_type=None, id=None, include_in_pension_basis=None, max_days=None, min_days=None, name=None, payout_destination=None, payout_on_termination=None, payout_type=None, title=None, unit=None, vesting=None, local_vars_configuration=None):  # noqa: E501
        """LeaveType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._assignable = None
        self.__class = None
        self._company_id = None
        self._cycle = None
        self._cycle_start = None
        self._employee_selectable = None
        self._excess_type = None
        self._expiry_type = None
        self._id = None
        self._include_in_pension_basis = None
        self._max_days = None
        self._min_days = None
        self._name = None
        self._payout_destination = None
        self._payout_on_termination = None
        self._payout_type = None
        self._title = None
        self._unit = None
        self._vesting = None
        self.discriminator = None

        if assignable is not None:
            self.assignable = assignable
        if _class is not None:
            self._class = _class
        if company_id is not None:
            self.company_id = company_id
        if cycle is not None:
            self.cycle = cycle
        if cycle_start is not None:
            self.cycle_start = cycle_start
        if employee_selectable is not None:
            self.employee_selectable = employee_selectable
        if excess_type is not None:
            self.excess_type = excess_type
        if expiry_type is not None:
            self.expiry_type = expiry_type
        if id is not None:
            self.id = id
        if include_in_pension_basis is not None:
            self.include_in_pension_basis = include_in_pension_basis
        self.max_days = max_days
        self.min_days = min_days
        if name is not None:
            self.name = name
        if payout_destination is not None:
            self.payout_destination = payout_destination
        if payout_on_termination is not None:
            self.payout_on_termination = payout_on_termination
        if payout_type is not None:
            self.payout_type = payout_type
        if title is not None:
            self.title = title
        if unit is not None:
            self.unit = unit
        if vesting is not None:
            self.vesting = vesting

    @property
    def assignable(self):
        """Gets the assignable of this LeaveType.  # noqa: E501

        If true, this type can be used in contracts. If false, all employees can use this leave type.  # noqa: E501

        :return: The assignable of this LeaveType.  # noqa: E501
        :rtype: bool
        """
        return self._assignable

    @assignable.setter
    def assignable(self, assignable):
        """Sets the assignable of this LeaveType.

        If true, this type can be used in contracts. If false, all employees can use this leave type.  # noqa: E501

        :param assignable: The assignable of this LeaveType.  # noqa: E501
        :type: bool
        """

        self._assignable = assignable

    @property
    def _class(self):
        """Gets the _class of this LeaveType.  # noqa: E501


        :return: The _class of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this LeaveType.


        :param _class: The _class of this LeaveType.  # noqa: E501
        :type: str
        """
        allowed_values = ["TimeOff", "Sick", "Flex"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and _class not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"  # noqa: E501
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def company_id(self):
        """Gets the company_id of this LeaveType.  # noqa: E501

        The company this leave type is valid for. Each company can have their own leave types.  # noqa: E501

        :return: The company_id of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this LeaveType.

        The company this leave type is valid for. Each company can have their own leave types.  # noqa: E501

        :param company_id: The company_id of this LeaveType.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def cycle(self):
        """Gets the cycle of this LeaveType.  # noqa: E501


        :return: The cycle of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this LeaveType.


        :param cycle: The cycle of this LeaveType.  # noqa: E501
        :type: str
        """
        allowed_values = ["SalaryPeriod", "Monthly", "Quarterly", "Biannually", "Yearly"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cycle not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cycle` ({0}), must be one of {1}"  # noqa: E501
                .format(cycle, allowed_values)
            )

        self._cycle = cycle

    @property
    def cycle_start(self):
        """Gets the cycle_start of this LeaveType.  # noqa: E501


        :return: The cycle_start of this LeaveType.  # noqa: E501
        :rtype: float
        """
        return self._cycle_start

    @cycle_start.setter
    def cycle_start(self, cycle_start):
        """Sets the cycle_start of this LeaveType.


        :param cycle_start: The cycle_start of this LeaveType.  # noqa: E501
        :type: float
        """

        self._cycle_start = cycle_start

    @property
    def employee_selectable(self):
        """Gets the employee_selectable of this LeaveType.  # noqa: E501

        If true, an employee can select to register leave on.  # noqa: E501

        :return: The employee_selectable of this LeaveType.  # noqa: E501
        :rtype: bool
        """
        return self._employee_selectable

    @employee_selectable.setter
    def employee_selectable(self, employee_selectable):
        """Sets the employee_selectable of this LeaveType.

        If true, an employee can select to register leave on.  # noqa: E501

        :param employee_selectable: The employee_selectable of this LeaveType.  # noqa: E501
        :type: bool
        """

        self._employee_selectable = employee_selectable

    @property
    def excess_type(self):
        """Gets the excess_type of this LeaveType.  # noqa: E501


        :return: The excess_type of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._excess_type

    @excess_type.setter
    def excess_type(self, excess_type):
        """Sets the excess_type of this LeaveType.


        :param excess_type: The excess_type of this LeaveType.  # noqa: E501
        :type: str
        """

        self._excess_type = excess_type

    @property
    def expiry_type(self):
        """Gets the expiry_type of this LeaveType.  # noqa: E501


        :return: The expiry_type of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._expiry_type

    @expiry_type.setter
    def expiry_type(self, expiry_type):
        """Sets the expiry_type of this LeaveType.


        :param expiry_type: The expiry_type of this LeaveType.  # noqa: E501
        :type: str
        """

        self._expiry_type = expiry_type

    @property
    def id(self):
        """Gets the id of this LeaveType.  # noqa: E501

        The ID of the leave type.  # noqa: E501

        :return: The id of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LeaveType.

        The ID of the leave type.  # noqa: E501

        :param id: The id of this LeaveType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def include_in_pension_basis(self):
        """Gets the include_in_pension_basis of this LeaveType.  # noqa: E501


        :return: The include_in_pension_basis of this LeaveType.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_pension_basis

    @include_in_pension_basis.setter
    def include_in_pension_basis(self, include_in_pension_basis):
        """Sets the include_in_pension_basis of this LeaveType.


        :param include_in_pension_basis: The include_in_pension_basis of this LeaveType.  # noqa: E501
        :type: bool
        """

        self._include_in_pension_basis = include_in_pension_basis

    @property
    def max_days(self):
        """Gets the max_days of this LeaveType.  # noqa: E501


        :return: The max_days of this LeaveType.  # noqa: E501
        :rtype: float
        """
        return self._max_days

    @max_days.setter
    def max_days(self, max_days):
        """Sets the max_days of this LeaveType.


        :param max_days: The max_days of this LeaveType.  # noqa: E501
        :type: float
        """

        self._max_days = max_days

    @property
    def min_days(self):
        """Gets the min_days of this LeaveType.  # noqa: E501


        :return: The min_days of this LeaveType.  # noqa: E501
        :rtype: float
        """
        return self._min_days

    @min_days.setter
    def min_days(self, min_days):
        """Sets the min_days of this LeaveType.


        :param min_days: The min_days of this LeaveType.  # noqa: E501
        :type: float
        """

        self._min_days = min_days

    @property
    def name(self):
        """Gets the name of this LeaveType.  # noqa: E501

        The internal name of this leave type. This is used when registering a leave for an employee.  # noqa: E501

        :return: The name of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LeaveType.

        The internal name of this leave type. This is used when registering a leave for an employee.  # noqa: E501

        :param name: The name of this LeaveType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def payout_destination(self):
        """Gets the payout_destination of this LeaveType.  # noqa: E501


        :return: The payout_destination of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._payout_destination

    @payout_destination.setter
    def payout_destination(self, payout_destination):
        """Sets the payout_destination of this LeaveType.


        :param payout_destination: The payout_destination of this LeaveType.  # noqa: E501
        :type: str
        """

        self._payout_destination = payout_destination

    @property
    def payout_on_termination(self):
        """Gets the payout_on_termination of this LeaveType.  # noqa: E501


        :return: The payout_on_termination of this LeaveType.  # noqa: E501
        :rtype: bool
        """
        return self._payout_on_termination

    @payout_on_termination.setter
    def payout_on_termination(self, payout_on_termination):
        """Sets the payout_on_termination of this LeaveType.


        :param payout_on_termination: The payout_on_termination of this LeaveType.  # noqa: E501
        :type: bool
        """

        self._payout_on_termination = payout_on_termination

    @property
    def payout_type(self):
        """Gets the payout_type of this LeaveType.  # noqa: E501


        :return: The payout_type of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._payout_type

    @payout_type.setter
    def payout_type(self, payout_type):
        """Sets the payout_type of this LeaveType.


        :param payout_type: The payout_type of this LeaveType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Contract", "Salary", "Amount", "DenmarkVacationBasis", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and payout_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `payout_type` ({0}), must be one of {1}"  # noqa: E501
                .format(payout_type, allowed_values)
            )

        self._payout_type = payout_type

    @property
    def title(self):
        """Gets the title of this LeaveType.  # noqa: E501

        This is the display name of this leave type. Used when selecting a leave type from a list.  # noqa: E501

        :return: The title of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LeaveType.

        This is the display name of this leave type. Used when selecting a leave type from a list.  # noqa: E501

        :param title: The title of this LeaveType.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def unit(self):
        """Gets the unit of this LeaveType.  # noqa: E501


        :return: The unit of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this LeaveType.


        :param unit: The unit of this LeaveType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Days", "Minutes"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and unit not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def vesting(self):
        """Gets the vesting of this LeaveType.  # noqa: E501


        :return: The vesting of this LeaveType.  # noqa: E501
        :rtype: str
        """
        return self._vesting

    @vesting.setter
    def vesting(self, vesting):
        """Sets the vesting of this LeaveType.


        :param vesting: The vesting of this LeaveType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Accrual", "Prepaid", "Postpaid"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and vesting not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `vesting` ({0}), must be one of {1}"  # noqa: E501
                .format(vesting, allowed_values)
            )

        self._vesting = vesting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeaveType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LeaveType):
            return True

        return self.to_dict() != other.to_dict()
