# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class InlineResponse20091Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_to': 'date',
        'add_remuneration': 'Remuneration',
        'car_allowance_rate': 'float',
        'car_allowance_registration_method_type': 'str',
        'contract': 'EmployeeContract',
        'contract_id': 'str',
        'del_remuneration': 'Remuneration',
        'dk_specific': 'InlineResponse20091DkSpecific',
        'employment_id': 'str',
        'extra_tax_percentage': 'float',
        'family_leave_fund': 'str',
        'future_to': 'date',
        'initial': 'bool',
        'period_work_hours': 'float',
        'position': 'str',
        'salary_cycle_id': 'str',
        'time_registration_method_type': 'str',
        'type': 'str',
        'valid_from': 'date',
        'valid_to': 'date',
        'weekly_hours': 'float',
        'weekly_work_days': 'float',
        'work_schedule': 'str',
        'work_week': 'object'
    }

    attribute_map = {
        'active_to': 'activeTo',
        'add_remuneration': 'addRemuneration',
        'car_allowance_rate': 'carAllowanceRate',
        'car_allowance_registration_method_type': 'carAllowanceRegistrationMethodType',
        'contract': 'contract',
        'contract_id': 'contractID',
        'del_remuneration': 'delRemuneration',
        'dk_specific': 'dkSpecific',
        'employment_id': 'employmentID',
        'extra_tax_percentage': 'extraTaxPercentage',
        'family_leave_fund': 'familyLeaveFund',
        'future_to': 'futureTo',
        'initial': 'initial',
        'period_work_hours': 'periodWorkHours',
        'position': 'position',
        'salary_cycle_id': 'salaryCycleID',
        'time_registration_method_type': 'timeRegistrationMethodType',
        'type': 'type',
        'valid_from': 'validFrom',
        'valid_to': 'validTo',
        'weekly_hours': 'weeklyHours',
        'weekly_work_days': 'weeklyWorkDays',
        'work_schedule': 'workSchedule',
        'work_week': 'workWeek'
    }

    def __init__(self, active_to=None, add_remuneration=None, car_allowance_rate=None, car_allowance_registration_method_type=None, contract=None, contract_id=None, del_remuneration=None, dk_specific=None, employment_id=None, extra_tax_percentage=None, family_leave_fund=None, future_to=None, initial=None, period_work_hours=None, position=None, salary_cycle_id=None, time_registration_method_type=None, type=None, valid_from=None, valid_to=None, weekly_hours=None, weekly_work_days=None, work_schedule=None, work_week=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20091Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_to = None
        self._add_remuneration = None
        self._car_allowance_rate = None
        self._car_allowance_registration_method_type = None
        self._contract = None
        self._contract_id = None
        self._del_remuneration = None
        self._dk_specific = None
        self._employment_id = None
        self._extra_tax_percentage = None
        self._family_leave_fund = None
        self._future_to = None
        self._initial = None
        self._period_work_hours = None
        self._position = None
        self._salary_cycle_id = None
        self._time_registration_method_type = None
        self._type = None
        self._valid_from = None
        self._valid_to = None
        self._weekly_hours = None
        self._weekly_work_days = None
        self._work_schedule = None
        self._work_week = None
        self.discriminator = None

        self.active_to = active_to
        if add_remuneration is not None:
            self.add_remuneration = add_remuneration
        self.car_allowance_rate = car_allowance_rate
        self.car_allowance_registration_method_type = car_allowance_registration_method_type
        if contract is not None:
            self.contract = contract
        if contract_id is not None:
            self.contract_id = contract_id
        if del_remuneration is not None:
            self.del_remuneration = del_remuneration
        self.dk_specific = dk_specific
        if employment_id is not None:
            self.employment_id = employment_id
        self.extra_tax_percentage = extra_tax_percentage
        self.family_leave_fund = family_leave_fund
        self.future_to = future_to
        if initial is not None:
            self.initial = initial
        self.period_work_hours = period_work_hours
        self.position = position
        self.salary_cycle_id = salary_cycle_id
        self.time_registration_method_type = time_registration_method_type
        self.type = type
        if valid_from is not None:
            self.valid_from = valid_from
        self.valid_to = valid_to
        self.weekly_hours = weekly_hours
        if weekly_work_days is not None:
            self.weekly_work_days = weekly_work_days
        self.work_schedule = work_schedule
        if work_week is not None:
            self.work_week = work_week

    @property
    def active_to(self):
        """Gets the active_to of this InlineResponse20091Data.  # noqa: E501

        Interpretation of what this, `futureTo` and `validTo` values means for the status of the contract:  | `activeTo` | `futureTo` | `validTo` | Meaning                                                                                         | | ---------- | ---------- | --------- | ----------------------------------------------------------------------------------------------- | | `null`     | `null`     | set       | Expired                                                                                         | | set        | `null`     | set       | Active until and including `activeTo`, then expired                                             | | `null`     | `null`     | `null`    | Active                                                                                          | | set        | set        | set       | Future until and including `futureTo`, then active until and including `activeTo`, then expired | | `null`     | set        | `null`    | Future until and including `futureTo`, then active                                              |   # noqa: E501

        :return: The active_to of this InlineResponse20091Data.  # noqa: E501
        :rtype: date
        """
        return self._active_to

    @active_to.setter
    def active_to(self, active_to):
        """Sets the active_to of this InlineResponse20091Data.

        Interpretation of what this, `futureTo` and `validTo` values means for the status of the contract:  | `activeTo` | `futureTo` | `validTo` | Meaning                                                                                         | | ---------- | ---------- | --------- | ----------------------------------------------------------------------------------------------- | | `null`     | `null`     | set       | Expired                                                                                         | | set        | `null`     | set       | Active until and including `activeTo`, then expired                                             | | `null`     | `null`     | `null`    | Active                                                                                          | | set        | set        | set       | Future until and including `futureTo`, then active until and including `activeTo`, then expired | | `null`     | set        | `null`    | Future until and including `futureTo`, then active                                              |   # noqa: E501

        :param active_to: The active_to of this InlineResponse20091Data.  # noqa: E501
        :type: date
        """

        self._active_to = active_to

    @property
    def add_remuneration(self):
        """Gets the add_remuneration of this InlineResponse20091Data.  # noqa: E501


        :return: The add_remuneration of this InlineResponse20091Data.  # noqa: E501
        :rtype: Remuneration
        """
        return self._add_remuneration

    @add_remuneration.setter
    def add_remuneration(self, add_remuneration):
        """Sets the add_remuneration of this InlineResponse20091Data.


        :param add_remuneration: The add_remuneration of this InlineResponse20091Data.  # noqa: E501
        :type: Remuneration
        """

        self._add_remuneration = add_remuneration

    @property
    def car_allowance_rate(self):
        """Gets the car_allowance_rate of this InlineResponse20091Data.  # noqa: E501


        :return: The car_allowance_rate of this InlineResponse20091Data.  # noqa: E501
        :rtype: float
        """
        return self._car_allowance_rate

    @car_allowance_rate.setter
    def car_allowance_rate(self, car_allowance_rate):
        """Sets the car_allowance_rate of this InlineResponse20091Data.


        :param car_allowance_rate: The car_allowance_rate of this InlineResponse20091Data.  # noqa: E501
        :type: float
        """

        self._car_allowance_rate = car_allowance_rate

    @property
    def car_allowance_registration_method_type(self):
        """Gets the car_allowance_registration_method_type of this InlineResponse20091Data.  # noqa: E501


        :return: The car_allowance_registration_method_type of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._car_allowance_registration_method_type

    @car_allowance_registration_method_type.setter
    def car_allowance_registration_method_type(self, car_allowance_registration_method_type):
        """Sets the car_allowance_registration_method_type of this InlineResponse20091Data.


        :param car_allowance_registration_method_type: The car_allowance_registration_method_type of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._car_allowance_registration_method_type = car_allowance_registration_method_type

    @property
    def contract(self):
        """Gets the contract of this InlineResponse20091Data.  # noqa: E501


        :return: The contract of this InlineResponse20091Data.  # noqa: E501
        :rtype: EmployeeContract
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this InlineResponse20091Data.


        :param contract: The contract of this InlineResponse20091Data.  # noqa: E501
        :type: EmployeeContract
        """

        self._contract = contract

    @property
    def contract_id(self):
        """Gets the contract_id of this InlineResponse20091Data.  # noqa: E501


        :return: The contract_id of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this InlineResponse20091Data.


        :param contract_id: The contract_id of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._contract_id = contract_id

    @property
    def del_remuneration(self):
        """Gets the del_remuneration of this InlineResponse20091Data.  # noqa: E501


        :return: The del_remuneration of this InlineResponse20091Data.  # noqa: E501
        :rtype: Remuneration
        """
        return self._del_remuneration

    @del_remuneration.setter
    def del_remuneration(self, del_remuneration):
        """Sets the del_remuneration of this InlineResponse20091Data.


        :param del_remuneration: The del_remuneration of this InlineResponse20091Data.  # noqa: E501
        :type: Remuneration
        """

        self._del_remuneration = del_remuneration

    @property
    def dk_specific(self):
        """Gets the dk_specific of this InlineResponse20091Data.  # noqa: E501


        :return: The dk_specific of this InlineResponse20091Data.  # noqa: E501
        :rtype: InlineResponse20091DkSpecific
        """
        return self._dk_specific

    @dk_specific.setter
    def dk_specific(self, dk_specific):
        """Sets the dk_specific of this InlineResponse20091Data.


        :param dk_specific: The dk_specific of this InlineResponse20091Data.  # noqa: E501
        :type: InlineResponse20091DkSpecific
        """

        self._dk_specific = dk_specific

    @property
    def employment_id(self):
        """Gets the employment_id of this InlineResponse20091Data.  # noqa: E501


        :return: The employment_id of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._employment_id

    @employment_id.setter
    def employment_id(self, employment_id):
        """Sets the employment_id of this InlineResponse20091Data.


        :param employment_id: The employment_id of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._employment_id = employment_id

    @property
    def extra_tax_percentage(self):
        """Gets the extra_tax_percentage of this InlineResponse20091Data.  # noqa: E501


        :return: The extra_tax_percentage of this InlineResponse20091Data.  # noqa: E501
        :rtype: float
        """
        return self._extra_tax_percentage

    @extra_tax_percentage.setter
    def extra_tax_percentage(self, extra_tax_percentage):
        """Sets the extra_tax_percentage of this InlineResponse20091Data.


        :param extra_tax_percentage: The extra_tax_percentage of this InlineResponse20091Data.  # noqa: E501
        :type: float
        """

        self._extra_tax_percentage = extra_tax_percentage

    @property
    def family_leave_fund(self):
        """Gets the family_leave_fund of this InlineResponse20091Data.  # noqa: E501


        :return: The family_leave_fund of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._family_leave_fund

    @family_leave_fund.setter
    def family_leave_fund(self, family_leave_fund):
        """Sets the family_leave_fund of this InlineResponse20091Data.


        :param family_leave_fund: The family_leave_fund of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._family_leave_fund = family_leave_fund

    @property
    def future_to(self):
        """Gets the future_to of this InlineResponse20091Data.  # noqa: E501


        :return: The future_to of this InlineResponse20091Data.  # noqa: E501
        :rtype: date
        """
        return self._future_to

    @future_to.setter
    def future_to(self, future_to):
        """Sets the future_to of this InlineResponse20091Data.


        :param future_to: The future_to of this InlineResponse20091Data.  # noqa: E501
        :type: date
        """

        self._future_to = future_to

    @property
    def initial(self):
        """Gets the initial of this InlineResponse20091Data.  # noqa: E501

        This contract is the first contract, it will contain fields that other contracts have changed, thus none of its values are changes, but initial values.  # noqa: E501

        :return: The initial of this InlineResponse20091Data.  # noqa: E501
        :rtype: bool
        """
        return self._initial

    @initial.setter
    def initial(self, initial):
        """Sets the initial of this InlineResponse20091Data.

        This contract is the first contract, it will contain fields that other contracts have changed, thus none of its values are changes, but initial values.  # noqa: E501

        :param initial: The initial of this InlineResponse20091Data.  # noqa: E501
        :type: bool
        """

        self._initial = initial

    @property
    def period_work_hours(self):
        """Gets the period_work_hours of this InlineResponse20091Data.  # noqa: E501


        :return: The period_work_hours of this InlineResponse20091Data.  # noqa: E501
        :rtype: float
        """
        return self._period_work_hours

    @period_work_hours.setter
    def period_work_hours(self, period_work_hours):
        """Sets the period_work_hours of this InlineResponse20091Data.


        :param period_work_hours: The period_work_hours of this InlineResponse20091Data.  # noqa: E501
        :type: float
        """

        self._period_work_hours = period_work_hours

    @property
    def position(self):
        """Gets the position of this InlineResponse20091Data.  # noqa: E501


        :return: The position of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this InlineResponse20091Data.


        :param position: The position of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def salary_cycle_id(self):
        """Gets the salary_cycle_id of this InlineResponse20091Data.  # noqa: E501


        :return: The salary_cycle_id of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._salary_cycle_id

    @salary_cycle_id.setter
    def salary_cycle_id(self, salary_cycle_id):
        """Sets the salary_cycle_id of this InlineResponse20091Data.


        :param salary_cycle_id: The salary_cycle_id of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._salary_cycle_id = salary_cycle_id

    @property
    def time_registration_method_type(self):
        """Gets the time_registration_method_type of this InlineResponse20091Data.  # noqa: E501


        :return: The time_registration_method_type of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._time_registration_method_type

    @time_registration_method_type.setter
    def time_registration_method_type(self, time_registration_method_type):
        """Sets the time_registration_method_type of this InlineResponse20091Data.


        :param time_registration_method_type: The time_registration_method_type of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._time_registration_method_type = time_registration_method_type

    @property
    def type(self):
        """Gets the type of this InlineResponse20091Data.  # noqa: E501


        :return: The type of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20091Data.


        :param type: The type of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def valid_from(self):
        """Gets the valid_from of this InlineResponse20091Data.  # noqa: E501


        :return: The valid_from of this InlineResponse20091Data.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this InlineResponse20091Data.


        :param valid_from: The valid_from of this InlineResponse20091Data.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this InlineResponse20091Data.  # noqa: E501


        :return: The valid_to of this InlineResponse20091Data.  # noqa: E501
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this InlineResponse20091Data.


        :param valid_to: The valid_to of this InlineResponse20091Data.  # noqa: E501
        :type: date
        """

        self._valid_to = valid_to

    @property
    def weekly_hours(self):
        """Gets the weekly_hours of this InlineResponse20091Data.  # noqa: E501


        :return: The weekly_hours of this InlineResponse20091Data.  # noqa: E501
        :rtype: float
        """
        return self._weekly_hours

    @weekly_hours.setter
    def weekly_hours(self, weekly_hours):
        """Sets the weekly_hours of this InlineResponse20091Data.


        :param weekly_hours: The weekly_hours of this InlineResponse20091Data.  # noqa: E501
        :type: float
        """

        self._weekly_hours = weekly_hours

    @property
    def weekly_work_days(self):
        """Gets the weekly_work_days of this InlineResponse20091Data.  # noqa: E501


        :return: The weekly_work_days of this InlineResponse20091Data.  # noqa: E501
        :rtype: float
        """
        return self._weekly_work_days

    @weekly_work_days.setter
    def weekly_work_days(self, weekly_work_days):
        """Sets the weekly_work_days of this InlineResponse20091Data.


        :param weekly_work_days: The weekly_work_days of this InlineResponse20091Data.  # noqa: E501
        :type: float
        """

        self._weekly_work_days = weekly_work_days

    @property
    def work_schedule(self):
        """Gets the work_schedule of this InlineResponse20091Data.  # noqa: E501


        :return: The work_schedule of this InlineResponse20091Data.  # noqa: E501
        :rtype: str
        """
        return self._work_schedule

    @work_schedule.setter
    def work_schedule(self, work_schedule):
        """Sets the work_schedule of this InlineResponse20091Data.


        :param work_schedule: The work_schedule of this InlineResponse20091Data.  # noqa: E501
        :type: str
        """

        self._work_schedule = work_schedule

    @property
    def work_week(self):
        """Gets the work_week of this InlineResponse20091Data.  # noqa: E501


        :return: The work_week of this InlineResponse20091Data.  # noqa: E501
        :rtype: object
        """
        return self._work_week

    @work_week.setter
    def work_week(self, work_week):
        """Sets the work_week of this InlineResponse20091Data.


        :param work_week: The work_week of this InlineResponse20091Data.  # noqa: E501
        :type: object
        """

        self._work_week = work_week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20091Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20091Data):
            return True

        return self.to_dict() != other.to_dict()
