# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class RemunerationBenefits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'board_lodging_provided_type': 'str',
        'car_acquisition_date': 'date',
        'car_first_license_plate_date': 'date',
        'car_green': 'bool',
        'car_valuation': 'float',
        'id': 'str',
        'pay_check_reduction': 'float',
        'reporting_amount': 'float',
        'salary_reduction': 'float',
        'tax_value': 'float',
        'title': 'str',
        'type': 'str',
        'yearly_environmental_tax': 'float'
    }

    attribute_map = {
        'board_lodging_provided_type': 'boardLodgingProvidedType',
        'car_acquisition_date': 'carAcquisitionDate',
        'car_first_license_plate_date': 'carFirstLicensePlateDate',
        'car_green': 'carGreen',
        'car_valuation': 'carValuation',
        'id': 'id',
        'pay_check_reduction': 'payCheckReduction',
        'reporting_amount': 'reportingAmount',
        'salary_reduction': 'salaryReduction',
        'tax_value': 'taxValue',
        'title': 'title',
        'type': 'type',
        'yearly_environmental_tax': 'yearlyEnvironmentalTax'
    }

    def __init__(self, board_lodging_provided_type=None, car_acquisition_date=None, car_first_license_plate_date=None, car_green=None, car_valuation=None, id=None, pay_check_reduction=None, reporting_amount=None, salary_reduction=None, tax_value=None, title=None, type=None, yearly_environmental_tax=None, local_vars_configuration=None):  # noqa: E501
        """RemunerationBenefits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._board_lodging_provided_type = None
        self._car_acquisition_date = None
        self._car_first_license_plate_date = None
        self._car_green = None
        self._car_valuation = None
        self._id = None
        self._pay_check_reduction = None
        self._reporting_amount = None
        self._salary_reduction = None
        self._tax_value = None
        self._title = None
        self._type = None
        self._yearly_environmental_tax = None
        self.discriminator = None

        self.board_lodging_provided_type = board_lodging_provided_type
        self.car_acquisition_date = car_acquisition_date
        self.car_first_license_plate_date = car_first_license_plate_date
        self.car_green = car_green
        self.car_valuation = car_valuation
        if id is not None:
            self.id = id
        if pay_check_reduction is not None:
            self.pay_check_reduction = pay_check_reduction
        if reporting_amount is not None:
            self.reporting_amount = reporting_amount
        if salary_reduction is not None:
            self.salary_reduction = salary_reduction
        if tax_value is not None:
            self.tax_value = tax_value
        self.title = title
        self.type = type
        self.yearly_environmental_tax = yearly_environmental_tax

    @property
    def board_lodging_provided_type(self):
        """Gets the board_lodging_provided_type of this RemunerationBenefits.  # noqa: E501

        board and lodging normal rate value types not required if manual tax value is set  # noqa: E501

        :return: The board_lodging_provided_type of this RemunerationBenefits.  # noqa: E501
        :rtype: str
        """
        return self._board_lodging_provided_type

    @board_lodging_provided_type.setter
    def board_lodging_provided_type(self, board_lodging_provided_type):
        """Sets the board_lodging_provided_type of this RemunerationBenefits.

        board and lodging normal rate value types not required if manual tax value is set  # noqa: E501

        :param board_lodging_provided_type: The board_lodging_provided_type of this RemunerationBenefits.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"One Meal", "Two Meals", "All Meals", "Lodging", "Lodging and Meals"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and board_lodging_provided_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `board_lodging_provided_type` ({0}), must be one of {1}"  # noqa: E501
                .format(board_lodging_provided_type, allowed_values)
            )

        self._board_lodging_provided_type = board_lodging_provided_type

    @property
    def car_acquisition_date(self):
        """Gets the car_acquisition_date of this RemunerationBenefits.  # noqa: E501

        The date the car was acquired (used for car benefits)  # noqa: E501

        :return: The car_acquisition_date of this RemunerationBenefits.  # noqa: E501
        :rtype: date
        """
        return self._car_acquisition_date

    @car_acquisition_date.setter
    def car_acquisition_date(self, car_acquisition_date):
        """Sets the car_acquisition_date of this RemunerationBenefits.

        The date the car was acquired (used for car benefits)  # noqa: E501

        :param car_acquisition_date: The car_acquisition_date of this RemunerationBenefits.  # noqa: E501
        :type: date
        """

        self._car_acquisition_date = car_acquisition_date

    @property
    def car_first_license_plate_date(self):
        """Gets the car_first_license_plate_date of this RemunerationBenefits.  # noqa: E501

        The date the car was first registered (used for car benefits)  # noqa: E501

        :return: The car_first_license_plate_date of this RemunerationBenefits.  # noqa: E501
        :rtype: date
        """
        return self._car_first_license_plate_date

    @car_first_license_plate_date.setter
    def car_first_license_plate_date(self, car_first_license_plate_date):
        """Sets the car_first_license_plate_date of this RemunerationBenefits.

        The date the car was first registered (used for car benefits)  # noqa: E501

        :param car_first_license_plate_date: The car_first_license_plate_date of this RemunerationBenefits.  # noqa: E501
        :type: date
        """

        self._car_first_license_plate_date = car_first_license_plate_date

    @property
    def car_green(self):
        """Gets the car_green of this RemunerationBenefits.  # noqa: E501

        Whether it is a green car (used for car benefits)  # noqa: E501

        :return: The car_green of this RemunerationBenefits.  # noqa: E501
        :rtype: bool
        """
        return self._car_green

    @car_green.setter
    def car_green(self, car_green):
        """Sets the car_green of this RemunerationBenefits.

        Whether it is a green car (used for car benefits)  # noqa: E501

        :param car_green: The car_green of this RemunerationBenefits.  # noqa: E501
        :type: bool
        """

        self._car_green = car_green

    @property
    def car_valuation(self):
        """Gets the car_valuation of this RemunerationBenefits.  # noqa: E501

        The valuation of the car (used for car benefits)  # noqa: E501

        :return: The car_valuation of this RemunerationBenefits.  # noqa: E501
        :rtype: float
        """
        return self._car_valuation

    @car_valuation.setter
    def car_valuation(self, car_valuation):
        """Sets the car_valuation of this RemunerationBenefits.

        The valuation of the car (used for car benefits)  # noqa: E501

        :param car_valuation: The car_valuation of this RemunerationBenefits.  # noqa: E501
        :type: float
        """

        self._car_valuation = car_valuation

    @property
    def id(self):
        """Gets the id of this RemunerationBenefits.  # noqa: E501

        The ID of the benefit.  # noqa: E501

        :return: The id of this RemunerationBenefits.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemunerationBenefits.

        The ID of the benefit.  # noqa: E501

        :param id: The id of this RemunerationBenefits.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pay_check_reduction(self):
        """Gets the pay_check_reduction of this RemunerationBenefits.  # noqa: E501

        The amount of reduction in the pay check this benefit entails.  # noqa: E501

        :return: The pay_check_reduction of this RemunerationBenefits.  # noqa: E501
        :rtype: float
        """
        return self._pay_check_reduction

    @pay_check_reduction.setter
    def pay_check_reduction(self, pay_check_reduction):
        """Sets the pay_check_reduction of this RemunerationBenefits.

        The amount of reduction in the pay check this benefit entails.  # noqa: E501

        :param pay_check_reduction: The pay_check_reduction of this RemunerationBenefits.  # noqa: E501
        :type: float
        """

        self._pay_check_reduction = pay_check_reduction

    @property
    def reporting_amount(self):
        """Gets the reporting_amount of this RemunerationBenefits.  # noqa: E501

        For benefits that are merely for reporting purposes, but otherwise does not affect the taxation on the pay slip.  # noqa: E501

        :return: The reporting_amount of this RemunerationBenefits.  # noqa: E501
        :rtype: float
        """
        return self._reporting_amount

    @reporting_amount.setter
    def reporting_amount(self, reporting_amount):
        """Sets the reporting_amount of this RemunerationBenefits.

        For benefits that are merely for reporting purposes, but otherwise does not affect the taxation on the pay slip.  # noqa: E501

        :param reporting_amount: The reporting_amount of this RemunerationBenefits.  # noqa: E501
        :type: float
        """

        self._reporting_amount = reporting_amount

    @property
    def salary_reduction(self):
        """Gets the salary_reduction of this RemunerationBenefits.  # noqa: E501

        The amount of reduction in salary this benefit entails.  # noqa: E501

        :return: The salary_reduction of this RemunerationBenefits.  # noqa: E501
        :rtype: float
        """
        return self._salary_reduction

    @salary_reduction.setter
    def salary_reduction(self, salary_reduction):
        """Sets the salary_reduction of this RemunerationBenefits.

        The amount of reduction in salary this benefit entails.  # noqa: E501

        :param salary_reduction: The salary_reduction of this RemunerationBenefits.  # noqa: E501
        :type: float
        """

        self._salary_reduction = salary_reduction

    @property
    def tax_value(self):
        """Gets the tax_value of this RemunerationBenefits.  # noqa: E501

        The extra value to be taxed this benefit entails.  Can also be used as a replacement for the four car-related parameters, if the car is free.  # noqa: E501

        :return: The tax_value of this RemunerationBenefits.  # noqa: E501
        :rtype: float
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this RemunerationBenefits.

        The extra value to be taxed this benefit entails.  Can also be used as a replacement for the four car-related parameters, if the car is free.  # noqa: E501

        :param tax_value: The tax_value of this RemunerationBenefits.  # noqa: E501
        :type: float
        """

        self._tax_value = tax_value

    @property
    def title(self):
        """Gets the title of this RemunerationBenefits.  # noqa: E501

        The title of the benefit  # noqa: E501

        :return: The title of this RemunerationBenefits.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RemunerationBenefits.

        The title of the benefit  # noqa: E501

        :param title: The title of this RemunerationBenefits.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this RemunerationBenefits.  # noqa: E501

        The type of benefit  # noqa: E501

        :return: The type of this RemunerationBenefits.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RemunerationBenefits.

        The type of benefit  # noqa: E501

        :param type: The type of this RemunerationBenefits.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Car", "Internet", "Telephone", "Lunch", "Lunch Daily", "Health", "Board and Lodging", "Permanent Residence", "Free Transport", "Other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def yearly_environmental_tax(self):
        """Gets the yearly_environmental_tax of this RemunerationBenefits.  # noqa: E501

        The yearly environmental tax (used for car benefits)  # noqa: E501

        :return: The yearly_environmental_tax of this RemunerationBenefits.  # noqa: E501
        :rtype: float
        """
        return self._yearly_environmental_tax

    @yearly_environmental_tax.setter
    def yearly_environmental_tax(self, yearly_environmental_tax):
        """Sets the yearly_environmental_tax of this RemunerationBenefits.

        The yearly environmental tax (used for car benefits)  # noqa: E501

        :param yearly_environmental_tax: The yearly_environmental_tax of this RemunerationBenefits.  # noqa: E501
        :type: float
        """

        self._yearly_environmental_tax = yearly_environmental_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemunerationBenefits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemunerationBenefits):
            return True

        return self.to_dict() != other.to_dict()
