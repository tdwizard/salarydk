# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class InlineObject37(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'amount': 'float',
        'department_id': 'str',
        'employee_i_ds': 'list[str]',
        'employment_position_id': 'str',
        'language': 'str',
        'operation': 'str',
        'pay_slip_transport_setting': 'str',
        'pension_company_id': 'str',
        'pension_customer_id': 'str',
        'pension_employee_fixed_amount': 'float',
        'pension_employee_percentage': 'float',
        'pension_employer_fixed_amount': 'float',
        'pension_employer_percentage': 'float',
        'pension_union_agreement_number': 'str',
        'position': 'str',
        'preferred_tax_card': 'str',
        'supplement_compensation_rate': 'float',
        'supplement_type_id': 'str',
        'title': 'str',
        'valid_from': 'date'
    }

    attribute_map = {
        'action': 'action',
        'amount': 'amount',
        'department_id': 'departmentID',
        'employee_i_ds': 'employeeIDs',
        'employment_position_id': 'employmentPositionID',
        'language': 'language',
        'operation': 'operation',
        'pay_slip_transport_setting': 'paySlipTransportSetting',
        'pension_company_id': 'pensionCompanyID',
        'pension_customer_id': 'pensionCustomerID',
        'pension_employee_fixed_amount': 'pensionEmployeeFixedAmount',
        'pension_employee_percentage': 'pensionEmployeePercentage',
        'pension_employer_fixed_amount': 'pensionEmployerFixedAmount',
        'pension_employer_percentage': 'pensionEmployerPercentage',
        'pension_union_agreement_number': 'pensionUnionAgreementNumber',
        'position': 'position',
        'preferred_tax_card': 'preferredTaxCard',
        'supplement_compensation_rate': 'supplementCompensationRate',
        'supplement_type_id': 'supplementTypeID',
        'title': 'title',
        'valid_from': 'validFrom'
    }

    def __init__(self, action=None, amount=None, department_id=None, employee_i_ds=None, employment_position_id=None, language=None, operation=None, pay_slip_transport_setting=None, pension_company_id=None, pension_customer_id=None, pension_employee_fixed_amount=None, pension_employee_percentage=None, pension_employer_fixed_amount=None, pension_employer_percentage=None, pension_union_agreement_number=None, position=None, preferred_tax_card=None, supplement_compensation_rate=None, supplement_type_id=None, title=None, valid_from=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject37 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._amount = None
        self._department_id = None
        self._employee_i_ds = None
        self._employment_position_id = None
        self._language = None
        self._operation = None
        self._pay_slip_transport_setting = None
        self._pension_company_id = None
        self._pension_customer_id = None
        self._pension_employee_fixed_amount = None
        self._pension_employee_percentage = None
        self._pension_employer_fixed_amount = None
        self._pension_employer_percentage = None
        self._pension_union_agreement_number = None
        self._position = None
        self._preferred_tax_card = None
        self._supplement_compensation_rate = None
        self._supplement_type_id = None
        self._title = None
        self._valid_from = None
        self.discriminator = None

        self.action = action
        if amount is not None:
            self.amount = amount
        if department_id is not None:
            self.department_id = department_id
        self.employee_i_ds = employee_i_ds
        self.employment_position_id = employment_position_id
        if language is not None:
            self.language = language
        if operation is not None:
            self.operation = operation
        if pay_slip_transport_setting is not None:
            self.pay_slip_transport_setting = pay_slip_transport_setting
        if pension_company_id is not None:
            self.pension_company_id = pension_company_id
        if pension_customer_id is not None:
            self.pension_customer_id = pension_customer_id
        self.pension_employee_fixed_amount = pension_employee_fixed_amount
        self.pension_employee_percentage = pension_employee_percentage
        self.pension_employer_fixed_amount = pension_employer_fixed_amount
        self.pension_employer_percentage = pension_employer_percentage
        self.pension_union_agreement_number = pension_union_agreement_number
        if position is not None:
            self.position = position
        if preferred_tax_card is not None:
            self.preferred_tax_card = preferred_tax_card
        if supplement_compensation_rate is not None:
            self.supplement_compensation_rate = supplement_compensation_rate
        if supplement_type_id is not None:
            self.supplement_type_id = supplement_type_id
        if title is not None:
            self.title = title
        self.valid_from = valid_from

    @property
    def action(self):
        """Gets the action of this InlineObject37.  # noqa: E501

        What action to perform on each employee.  * `AppInvite` invites them to the employee app, assuming their information are valid for invitation. * `PaySlipTransport` adds or removes one setting for `PaySlipTransport` for all employees. * `TelephoneBenefit` adds or removes free phone benefit from the employees' contracts. * `LunchBenefit` adds or removes lunch benefit from the employees' contracts. * `LunchDailyBenefit` as above, but where amount is per day rather than per periode. * `HealthBenefit` adds or removes health benefit from the employees' contracts. * `OtherSalaryReductionBenefit` adds or removes other benefit with `amount` as salary reduction from the employees' contracts. * `OtherPayCheckReductionBenefit` adds or removes other benefit with `amount` as pay check reduction from the employees' contracts. * `FixedSalary` sets fixed salary on the employees' contracts, fails if none already exists. * `HourlySalary` sets hourly salary on the employees' contracts, fails if none already exists. * `Department` adds or removes an employee to or from a department. * `Language` sets the language for the employees. * `PreferredTaxCard` sets the preference for tax card. * `Supplement` adds or remove a supplement. * `Pension` adds or remove a pension. * `Position` sets all employee's position to the position provided. * `Terminate` terminates all the employees. * `Delete` deletes all the employees.  Only one action can be performed per call.  For example, if you wish to activate both `PaySlipTransport` `EMail` and `SMS` for all employees, you must call twice.   # noqa: E501

        :return: The action of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineObject37.

        What action to perform on each employee.  * `AppInvite` invites them to the employee app, assuming their information are valid for invitation. * `PaySlipTransport` adds or removes one setting for `PaySlipTransport` for all employees. * `TelephoneBenefit` adds or removes free phone benefit from the employees' contracts. * `LunchBenefit` adds or removes lunch benefit from the employees' contracts. * `LunchDailyBenefit` as above, but where amount is per day rather than per periode. * `HealthBenefit` adds or removes health benefit from the employees' contracts. * `OtherSalaryReductionBenefit` adds or removes other benefit with `amount` as salary reduction from the employees' contracts. * `OtherPayCheckReductionBenefit` adds or removes other benefit with `amount` as pay check reduction from the employees' contracts. * `FixedSalary` sets fixed salary on the employees' contracts, fails if none already exists. * `HourlySalary` sets hourly salary on the employees' contracts, fails if none already exists. * `Department` adds or removes an employee to or from a department. * `Language` sets the language for the employees. * `PreferredTaxCard` sets the preference for tax card. * `Supplement` adds or remove a supplement. * `Pension` adds or remove a pension. * `Position` sets all employee's position to the position provided. * `Terminate` terminates all the employees. * `Delete` deletes all the employees.  Only one action can be performed per call.  For example, if you wish to activate both `PaySlipTransport` `EMail` and `SMS` for all employees, you must call twice.   # noqa: E501

        :param action: The action of this InlineObject37.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["AppInvite", "PaySlipTransport", "TelephoneBenefit", "LunchBenefit", "LunchDailyBenefit", "HealthBenefit", "OtherSalaryReductionBenefit", "OtherPayCheckReductionBenefit", "FixedSalary", "HourlySalary", "Department", "Language", "PreferredTaxCard", "Supplement", "Pension", "Position", "Terminate", "Delete"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def amount(self):
        """Gets the amount of this InlineObject37.  # noqa: E501

        Required for actions `LunchBenefit`, `LunchDailyBenefit` and `HealthBenefit` when `operation` is `Add`.  Always for `OtherSalaryReductionBenefit`, `OtherPayCheckReductionBenefit`, `FixedSalary` and `HourlySalary`.   # noqa: E501

        :return: The amount of this InlineObject37.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineObject37.

        Required for actions `LunchBenefit`, `LunchDailyBenefit` and `HealthBenefit` when `operation` is `Add`.  Always for `OtherSalaryReductionBenefit`, `OtherPayCheckReductionBenefit`, `FixedSalary` and `HourlySalary`.   # noqa: E501

        :param amount: The amount of this InlineObject37.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def department_id(self):
        """Gets the department_id of this InlineObject37.  # noqa: E501

        For use with `Department` and `operation` being `Add`.  # noqa: E501

        :return: The department_id of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this InlineObject37.

        For use with `Department` and `operation` being `Add`.  # noqa: E501

        :param department_id: The department_id of this InlineObject37.  # noqa: E501
        :type: str
        """

        self._department_id = department_id

    @property
    def employee_i_ds(self):
        """Gets the employee_i_ds of this InlineObject37.  # noqa: E501


        :return: The employee_i_ds of this InlineObject37.  # noqa: E501
        :rtype: list[str]
        """
        return self._employee_i_ds

    @employee_i_ds.setter
    def employee_i_ds(self, employee_i_ds):
        """Sets the employee_i_ds of this InlineObject37.


        :param employee_i_ds: The employee_i_ds of this InlineObject37.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and employee_i_ds is None:  # noqa: E501
            raise ValueError("Invalid value for `employee_i_ds`, must not be `None`")  # noqa: E501

        self._employee_i_ds = employee_i_ds

    @property
    def employment_position_id(self):
        """Gets the employment_position_id of this InlineObject37.  # noqa: E501

        For use with `Position`, if the position has a standard employment position.  # noqa: E501

        :return: The employment_position_id of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._employment_position_id

    @employment_position_id.setter
    def employment_position_id(self, employment_position_id):
        """Sets the employment_position_id of this InlineObject37.

        For use with `Position`, if the position has a standard employment position.  # noqa: E501

        :param employment_position_id: The employment_position_id of this InlineObject37.  # noqa: E501
        :type: str
        """

        self._employment_position_id = employment_position_id

    @property
    def language(self):
        """Gets the language of this InlineObject37.  # noqa: E501

        For use with `Language`.  # noqa: E501

        :return: The language of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this InlineObject37.

        For use with `Language`.  # noqa: E501

        :param language: The language of this InlineObject37.  # noqa: E501
        :type: str
        """
        allowed_values = ["da", "en"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and language not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def operation(self):
        """Gets the operation of this InlineObject37.  # noqa: E501

        For all actions beside `AppInvite`, `OtherSalaryReductionBenefit`, `OtherPayCheckReductionBenefit`, `FixedSalary`, `HourlySalary`, `Language`, `PreferredTaxCard`, `Pension`, `Position`, `Terminate` and `Delete`, whether to add or remove.   # noqa: E501

        :return: The operation of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this InlineObject37.

        For all actions beside `AppInvite`, `OtherSalaryReductionBenefit`, `OtherPayCheckReductionBenefit`, `FixedSalary`, `HourlySalary`, `Language`, `PreferredTaxCard`, `Pension`, `Position`, `Terminate` and `Delete`, whether to add or remove.   # noqa: E501

        :param operation: The operation of this InlineObject37.  # noqa: E501
        :type: str
        """
        allowed_values = ["Add", "Remove"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def pay_slip_transport_setting(self):
        """Gets the pay_slip_transport_setting of this InlineObject37.  # noqa: E501

        Which setting for `PaySlipTransport` to choose.  Required with `PaySlipTransport`.  # noqa: E501

        :return: The pay_slip_transport_setting of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._pay_slip_transport_setting

    @pay_slip_transport_setting.setter
    def pay_slip_transport_setting(self, pay_slip_transport_setting):
        """Sets the pay_slip_transport_setting of this InlineObject37.

        Which setting for `PaySlipTransport` to choose.  Required with `PaySlipTransport`.  # noqa: E501

        :param pay_slip_transport_setting: The pay_slip_transport_setting of this InlineObject37.  # noqa: E501
        :type: str
        """
        allowed_values = ["EMail", "EBoks", "SMS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and pay_slip_transport_setting not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `pay_slip_transport_setting` ({0}), must be one of {1}"  # noqa: E501
                .format(pay_slip_transport_setting, allowed_values)
            )

        self._pay_slip_transport_setting = pay_slip_transport_setting

    @property
    def pension_company_id(self):
        """Gets the pension_company_id of this InlineObject37.  # noqa: E501

        For use with `Pension`; the pension company's ID.  # noqa: E501

        :return: The pension_company_id of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._pension_company_id

    @pension_company_id.setter
    def pension_company_id(self, pension_company_id):
        """Sets the pension_company_id of this InlineObject37.

        For use with `Pension`; the pension company's ID.  # noqa: E501

        :param pension_company_id: The pension_company_id of this InlineObject37.  # noqa: E501
        :type: str
        """

        self._pension_company_id = pension_company_id

    @property
    def pension_customer_id(self):
        """Gets the pension_customer_id of this InlineObject37.  # noqa: E501

        For use with `Pension`, the customer ID for pension companies that do not use `NationalID`.  # noqa: E501

        :return: The pension_customer_id of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._pension_customer_id

    @pension_customer_id.setter
    def pension_customer_id(self, pension_customer_id):
        """Sets the pension_customer_id of this InlineObject37.

        For use with `Pension`, the customer ID for pension companies that do not use `NationalID`.  # noqa: E501

        :param pension_customer_id: The pension_customer_id of this InlineObject37.  # noqa: E501
        :type: str
        """

        self._pension_customer_id = pension_customer_id

    @property
    def pension_employee_fixed_amount(self):
        """Gets the pension_employee_fixed_amount of this InlineObject37.  # noqa: E501

        For use with `Pension`, where the `EmployeePaid` amount in fixed amount.  If neither this and `pensionEmployeePercentage` are set, there is no `EmployeePaid` pension.  # noqa: E501

        :return: The pension_employee_fixed_amount of this InlineObject37.  # noqa: E501
        :rtype: float
        """
        return self._pension_employee_fixed_amount

    @pension_employee_fixed_amount.setter
    def pension_employee_fixed_amount(self, pension_employee_fixed_amount):
        """Sets the pension_employee_fixed_amount of this InlineObject37.

        For use with `Pension`, where the `EmployeePaid` amount in fixed amount.  If neither this and `pensionEmployeePercentage` are set, there is no `EmployeePaid` pension.  # noqa: E501

        :param pension_employee_fixed_amount: The pension_employee_fixed_amount of this InlineObject37.  # noqa: E501
        :type: float
        """

        self._pension_employee_fixed_amount = pension_employee_fixed_amount

    @property
    def pension_employee_percentage(self):
        """Gets the pension_employee_percentage of this InlineObject37.  # noqa: E501

        For use with `Pension`, where the `EmployeePaid` amount in percentage.  If neither this and `pensionEmployeeFixedAmount` are set, there is no `EmployeePaid` pension.  # noqa: E501

        :return: The pension_employee_percentage of this InlineObject37.  # noqa: E501
        :rtype: float
        """
        return self._pension_employee_percentage

    @pension_employee_percentage.setter
    def pension_employee_percentage(self, pension_employee_percentage):
        """Sets the pension_employee_percentage of this InlineObject37.

        For use with `Pension`, where the `EmployeePaid` amount in percentage.  If neither this and `pensionEmployeeFixedAmount` are set, there is no `EmployeePaid` pension.  # noqa: E501

        :param pension_employee_percentage: The pension_employee_percentage of this InlineObject37.  # noqa: E501
        :type: float
        """

        self._pension_employee_percentage = pension_employee_percentage

    @property
    def pension_employer_fixed_amount(self):
        """Gets the pension_employer_fixed_amount of this InlineObject37.  # noqa: E501

        For use with `Pension`, where the `EmployerPaid` amount in fixed amount.  If neither this and `pensionEmployerPercentage` are set, there is no `EmployerPaid` pension.  # noqa: E501

        :return: The pension_employer_fixed_amount of this InlineObject37.  # noqa: E501
        :rtype: float
        """
        return self._pension_employer_fixed_amount

    @pension_employer_fixed_amount.setter
    def pension_employer_fixed_amount(self, pension_employer_fixed_amount):
        """Sets the pension_employer_fixed_amount of this InlineObject37.

        For use with `Pension`, where the `EmployerPaid` amount in fixed amount.  If neither this and `pensionEmployerPercentage` are set, there is no `EmployerPaid` pension.  # noqa: E501

        :param pension_employer_fixed_amount: The pension_employer_fixed_amount of this InlineObject37.  # noqa: E501
        :type: float
        """

        self._pension_employer_fixed_amount = pension_employer_fixed_amount

    @property
    def pension_employer_percentage(self):
        """Gets the pension_employer_percentage of this InlineObject37.  # noqa: E501

        For use with `Pension`, where the `EmployerPaid` amount in percentage.  If neither this and `pensionEmployerFixedAmount` are set, there is no `EmployerPaid` pension.  # noqa: E501

        :return: The pension_employer_percentage of this InlineObject37.  # noqa: E501
        :rtype: float
        """
        return self._pension_employer_percentage

    @pension_employer_percentage.setter
    def pension_employer_percentage(self, pension_employer_percentage):
        """Sets the pension_employer_percentage of this InlineObject37.

        For use with `Pension`, where the `EmployerPaid` amount in percentage.  If neither this and `pensionEmployerFixedAmount` are set, there is no `EmployerPaid` pension.  # noqa: E501

        :param pension_employer_percentage: The pension_employer_percentage of this InlineObject37.  # noqa: E501
        :type: float
        """

        self._pension_employer_percentage = pension_employer_percentage

    @property
    def pension_union_agreement_number(self):
        """Gets the pension_union_agreement_number of this InlineObject37.  # noqa: E501

        For use with `Pension`, only for those pension companies that requires it.  # noqa: E501

        :return: The pension_union_agreement_number of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._pension_union_agreement_number

    @pension_union_agreement_number.setter
    def pension_union_agreement_number(self, pension_union_agreement_number):
        """Sets the pension_union_agreement_number of this InlineObject37.

        For use with `Pension`, only for those pension companies that requires it.  # noqa: E501

        :param pension_union_agreement_number: The pension_union_agreement_number of this InlineObject37.  # noqa: E501
        :type: str
        """

        self._pension_union_agreement_number = pension_union_agreement_number

    @property
    def position(self):
        """Gets the position of this InlineObject37.  # noqa: E501

        For use with `Position`.  # noqa: E501

        :return: The position of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this InlineObject37.

        For use with `Position`.  # noqa: E501

        :param position: The position of this InlineObject37.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def preferred_tax_card(self):
        """Gets the preferred_tax_card of this InlineObject37.  # noqa: E501

        For use with `PreferredTaxCard`.  # noqa: E501

        :return: The preferred_tax_card of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._preferred_tax_card

    @preferred_tax_card.setter
    def preferred_tax_card(self, preferred_tax_card):
        """Sets the preferred_tax_card of this InlineObject37.

        For use with `PreferredTaxCard`.  # noqa: E501

        :param preferred_tax_card: The preferred_tax_card of this InlineObject37.  # noqa: E501
        :type: str
        """
        allowed_values = ["Primary", "Secondary"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and preferred_tax_card not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `preferred_tax_card` ({0}), must be one of {1}"  # noqa: E501
                .format(preferred_tax_card, allowed_values)
            )

        self._preferred_tax_card = preferred_tax_card

    @property
    def supplement_compensation_rate(self):
        """Gets the supplement_compensation_rate of this InlineObject37.  # noqa: E501

        For use with `Supplement`, since it can be both an exact amount or percentage.  Percentage between 0.00 and 1.00.  # noqa: E501

        :return: The supplement_compensation_rate of this InlineObject37.  # noqa: E501
        :rtype: float
        """
        return self._supplement_compensation_rate

    @supplement_compensation_rate.setter
    def supplement_compensation_rate(self, supplement_compensation_rate):
        """Sets the supplement_compensation_rate of this InlineObject37.

        For use with `Supplement`, since it can be both an exact amount or percentage.  Percentage between 0.00 and 1.00.  # noqa: E501

        :param supplement_compensation_rate: The supplement_compensation_rate of this InlineObject37.  # noqa: E501
        :type: float
        """

        self._supplement_compensation_rate = supplement_compensation_rate

    @property
    def supplement_type_id(self):
        """Gets the supplement_type_id of this InlineObject37.  # noqa: E501

        For use with `Supplement`.  # noqa: E501

        :return: The supplement_type_id of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._supplement_type_id

    @supplement_type_id.setter
    def supplement_type_id(self, supplement_type_id):
        """Sets the supplement_type_id of this InlineObject37.

        For use with `Supplement`.  # noqa: E501

        :param supplement_type_id: The supplement_type_id of this InlineObject37.  # noqa: E501
        :type: str
        """

        self._supplement_type_id = supplement_type_id

    @property
    def title(self):
        """Gets the title of this InlineObject37.  # noqa: E501

        For use with `TelephoneBenefit`, `LunchBenefit`, LunchDailyBenefit`, `HealthBenefit`, `FixedSalary` and `HourlySalary` to override default text.  Must be used with `OtherSalaryReductionBenefit` and `OtherPayCheckReductionBenefit`.   # noqa: E501

        :return: The title of this InlineObject37.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineObject37.

        For use with `TelephoneBenefit`, `LunchBenefit`, LunchDailyBenefit`, `HealthBenefit`, `FixedSalary` and `HourlySalary` to override default text.  Must be used with `OtherSalaryReductionBenefit` and `OtherPayCheckReductionBenefit`.   # noqa: E501

        :param title: The title of this InlineObject37.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def valid_from(self):
        """Gets the valid_from of this InlineObject37.  # noqa: E501

        Can be used with `TelephoneBenefit`, `LunchBenefit`, LunchDailyBenefit`, `HealthBenefit`, `OtherSalaryReductionBenefit`, `OtherPayCheckReductionBenefit`, `FixedSalary`, `HourlySalary`, `Supplement`, `Pension`, `Position` and `Terminate`, to set from when the contract change shall be valid.  It will create a new future contract, if one does not start on the same date. It can only create one if `validFrom` matches one of the contract's salaryCycle's periods' start dates.   # noqa: E501

        :return: The valid_from of this InlineObject37.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this InlineObject37.

        Can be used with `TelephoneBenefit`, `LunchBenefit`, LunchDailyBenefit`, `HealthBenefit`, `OtherSalaryReductionBenefit`, `OtherPayCheckReductionBenefit`, `FixedSalary`, `HourlySalary`, `Supplement`, `Pension`, `Position` and `Terminate`, to set from when the contract change shall be valid.  It will create a new future contract, if one does not start on the same date. It can only create one if `validFrom` matches one of the contract's salaryCycle's periods' start dates.   # noqa: E501

        :param valid_from: The valid_from of this InlineObject37.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject37):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject37):
            return True

        return self.to_dict() != other.to_dict()
