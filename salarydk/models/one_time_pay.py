# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class OneTimePay(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accounting_text': 'str',
        'amount': 'float',
        'approvable': 'Approvable',
        'approved': 'bool',
        'category': 'str',
        'cost_center_id': 'str',
        'deletable': 'bool',
        'disposition_date': 'date',
        'employee_id': 'str',
        'id': 'str',
        'immutable': 'bool',
        'is_provision': 'bool',
        'paid': 'bool',
        'pay_out_type': 'str',
        'payment_date': 'date',
        'settled': 'bool',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'accounting_text': 'accountingText',
        'amount': 'amount',
        'approvable': 'approvable',
        'approved': 'approved',
        'category': 'category',
        'cost_center_id': 'costCenterID',
        'deletable': 'deletable',
        'disposition_date': 'dispositionDate',
        'employee_id': 'employeeID',
        'id': 'id',
        'immutable': 'immutable',
        'is_provision': 'isProvision',
        'paid': 'paid',
        'pay_out_type': 'payOutType',
        'payment_date': 'paymentDate',
        'settled': 'settled',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, accounting_text=None, amount=None, approvable=None, approved=None, category=None, cost_center_id=None, deletable=None, disposition_date=None, employee_id=None, id=None, immutable=None, is_provision=None, paid=None, pay_out_type=None, payment_date=None, settled=None, title=None, type=None, local_vars_configuration=None):  # noqa: E501
        """OneTimePay - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accounting_text = None
        self._amount = None
        self._approvable = None
        self._approved = None
        self._category = None
        self._cost_center_id = None
        self._deletable = None
        self._disposition_date = None
        self._employee_id = None
        self._id = None
        self._immutable = None
        self._is_provision = None
        self._paid = None
        self._pay_out_type = None
        self._payment_date = None
        self._settled = None
        self._title = None
        self._type = None
        self.discriminator = None

        self.accounting_text = accounting_text
        self.amount = amount
        if approvable is not None:
            self.approvable = approvable
        self.approved = approved
        self.category = category
        self.cost_center_id = cost_center_id
        if deletable is not None:
            self.deletable = deletable
        self.disposition_date = disposition_date
        if employee_id is not None:
            self.employee_id = employee_id
        if id is not None:
            self.id = id
        if immutable is not None:
            self.immutable = immutable
        if is_provision is not None:
            self.is_provision = is_provision
        if paid is not None:
            self.paid = paid
        self.pay_out_type = pay_out_type
        self.payment_date = payment_date
        if settled is not None:
            self.settled = settled
        self.title = title
        self.type = type

    @property
    def accounting_text(self):
        """Gets the accounting_text of this OneTimePay.  # noqa: E501

        A separate accounting text from `title`, when set it will generate a separate line for accounting purposes.  # noqa: E501

        :return: The accounting_text of this OneTimePay.  # noqa: E501
        :rtype: str
        """
        return self._accounting_text

    @accounting_text.setter
    def accounting_text(self, accounting_text):
        """Sets the accounting_text of this OneTimePay.

        A separate accounting text from `title`, when set it will generate a separate line for accounting purposes.  # noqa: E501

        :param accounting_text: The accounting_text of this OneTimePay.  # noqa: E501
        :type: str
        """

        self._accounting_text = accounting_text

    @property
    def amount(self):
        """Gets the amount of this OneTimePay.  # noqa: E501


        :return: The amount of this OneTimePay.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OneTimePay.


        :param amount: The amount of this OneTimePay.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def approvable(self):
        """Gets the approvable of this OneTimePay.  # noqa: E501


        :return: The approvable of this OneTimePay.  # noqa: E501
        :rtype: Approvable
        """
        return self._approvable

    @approvable.setter
    def approvable(self, approvable):
        """Sets the approvable of this OneTimePay.


        :param approvable: The approvable of this OneTimePay.  # noqa: E501
        :type: Approvable
        """

        self._approvable = approvable

    @property
    def approved(self):
        """Gets the approved of this OneTimePay.  # noqa: E501

        Approved is the approval status for this one time pay.  # noqa: E501

        :return: The approved of this OneTimePay.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this OneTimePay.

        Approved is the approval status for this one time pay.  # noqa: E501

        :param approved: The approved of this OneTimePay.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def category(self):
        """Gets the category of this OneTimePay.  # noqa: E501

        The category describes the one time pay even further. It is used for freelance compensations where the category(art) is needed. For example \"DKArt-0000\" or \"DKArt-0079\".  # noqa: E501

        :return: The category of this OneTimePay.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OneTimePay.

        The category describes the one time pay even further. It is used for freelance compensations where the category(art) is needed. For example \"DKArt-0000\" or \"DKArt-0079\".  # noqa: E501

        :param category: The category of this OneTimePay.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"DKArt-0000", "DKArt-0050", "DKArt-0051", "DKArt-0061", "DKArt-0079", "DKArt-0082", "DKArt-0097", "DKArt-0099", "DKArt-0100", "DKArt-0103", "DKArt-0104"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def cost_center_id(self):
        """Gets the cost_center_id of this OneTimePay.  # noqa: E501

        Attach this one time pay to a cost center for accounting purposes  # noqa: E501

        :return: The cost_center_id of this OneTimePay.  # noqa: E501
        :rtype: str
        """
        return self._cost_center_id

    @cost_center_id.setter
    def cost_center_id(self, cost_center_id):
        """Sets the cost_center_id of this OneTimePay.

        Attach this one time pay to a cost center for accounting purposes  # noqa: E501

        :param cost_center_id: The cost_center_id of this OneTimePay.  # noqa: E501
        :type: str
        """

        self._cost_center_id = cost_center_id

    @property
    def deletable(self):
        """Gets the deletable of this OneTimePay.  # noqa: E501

        Determines whether or not this one time pay can be deleted  # noqa: E501

        :return: The deletable of this OneTimePay.  # noqa: E501
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this OneTimePay.

        Determines whether or not this one time pay can be deleted  # noqa: E501

        :param deletable: The deletable of this OneTimePay.  # noqa: E501
        :type: bool
        """

        self._deletable = deletable

    @property
    def disposition_date(self):
        """Gets the disposition_date of this OneTimePay.  # noqa: E501


        :return: The disposition_date of this OneTimePay.  # noqa: E501
        :rtype: date
        """
        return self._disposition_date

    @disposition_date.setter
    def disposition_date(self, disposition_date):
        """Sets the disposition_date of this OneTimePay.


        :param disposition_date: The disposition_date of this OneTimePay.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and disposition_date is None:  # noqa: E501
            raise ValueError("Invalid value for `disposition_date`, must not be `None`")  # noqa: E501

        self._disposition_date = disposition_date

    @property
    def employee_id(self):
        """Gets the employee_id of this OneTimePay.  # noqa: E501


        :return: The employee_id of this OneTimePay.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this OneTimePay.


        :param employee_id: The employee_id of this OneTimePay.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def id(self):
        """Gets the id of this OneTimePay.  # noqa: E501


        :return: The id of this OneTimePay.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OneTimePay.


        :param id: The id of this OneTimePay.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def immutable(self):
        """Gets the immutable of this OneTimePay.  # noqa: E501


        :return: The immutable of this OneTimePay.  # noqa: E501
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this OneTimePay.


        :param immutable: The immutable of this OneTimePay.  # noqa: E501
        :type: bool
        """

        self._immutable = immutable

    @property
    def is_provision(self):
        """Gets the is_provision of this OneTimePay.  # noqa: E501


        :return: The is_provision of this OneTimePay.  # noqa: E501
        :rtype: bool
        """
        return self._is_provision

    @is_provision.setter
    def is_provision(self, is_provision):
        """Sets the is_provision of this OneTimePay.


        :param is_provision: The is_provision of this OneTimePay.  # noqa: E501
        :type: bool
        """

        self._is_provision = is_provision

    @property
    def paid(self):
        """Gets the paid of this OneTimePay.  # noqa: E501


        :return: The paid of this OneTimePay.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this OneTimePay.


        :param paid: The paid of this OneTimePay.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    @property
    def pay_out_type(self):
        """Gets the pay_out_type of this OneTimePay.  # noqa: E501

        The pay out type describes the way the one time pay is paid out. Use \"Immediate Nets\" for immediate payments (this can't be reverted(since the payment will be paid out immediately!)) Use \"Salary\" when the one time pay is paid out with the salary. \"Manual\" when it's paid out manually bypassing Salary.  # noqa: E501

        :return: The pay_out_type of this OneTimePay.  # noqa: E501
        :rtype: str
        """
        return self._pay_out_type

    @pay_out_type.setter
    def pay_out_type(self, pay_out_type):
        """Sets the pay_out_type of this OneTimePay.

        The pay out type describes the way the one time pay is paid out. Use \"Immediate Nets\" for immediate payments (this can't be reverted(since the payment will be paid out immediately!)) Use \"Salary\" when the one time pay is paid out with the salary. \"Manual\" when it's paid out manually bypassing Salary.  # noqa: E501

        :param pay_out_type: The pay_out_type of this OneTimePay.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"Salary", "Manual", "Immediate Nets"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and pay_out_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `pay_out_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pay_out_type, allowed_values)
            )

        self._pay_out_type = pay_out_type

    @property
    def payment_date(self):
        """Gets the payment_date of this OneTimePay.  # noqa: E501

        Calculated payment date (if `paid` is true, then it is the actual payment date) for this one time pay.  # noqa: E501

        :return: The payment_date of this OneTimePay.  # noqa: E501
        :rtype: date
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this OneTimePay.

        Calculated payment date (if `paid` is true, then it is the actual payment date) for this one time pay.  # noqa: E501

        :param payment_date: The payment_date of this OneTimePay.  # noqa: E501
        :type: date
        """

        self._payment_date = payment_date

    @property
    def settled(self):
        """Gets the settled of this OneTimePay.  # noqa: E501


        :return: The settled of this OneTimePay.  # noqa: E501
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this OneTimePay.


        :param settled: The settled of this OneTimePay.  # noqa: E501
        :type: bool
        """

        self._settled = settled

    @property
    def title(self):
        """Gets the title of this OneTimePay.  # noqa: E501


        :return: The title of this OneTimePay.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OneTimePay.


        :param title: The title of this OneTimePay.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this OneTimePay.  # noqa: E501


        :return: The type of this OneTimePay.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneTimePay.


        :param type: The type of this OneTimePay.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Bonus", "Bonus No Vacation", "Bonus No Pension", "Bonus No Vacation and Pension", "G-Dage", "Reimbursement", "SH-Dage", "SH-Dage Increase", "SH-Dage Increase No Vacation", "SH-Dage Increase No Pension", "SH-Dage Increase No Vacation and Pension", "Fritvalg", "Fritvalg Increase", "Fritvalg Increase No Vacation", "Fritvalg Increase No Pension", "Fritvalg Increase No Vacation and Pension", "Travel Allowance", "Pay Check Advanced", "Salary Reduction", "Anniversary Bonus", "Honorary Gift", "Compensation No AM", "Compensation", "Tax Deduction Modification", "Car Allowance", "Swipe", "Gross Vacation Money", "Free Text", "B Income Reduction", "B Income Reduction No AM", "Pension"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneTimePay):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneTimePay):
            return True

        return self.to_dict() != other.to_dict()
