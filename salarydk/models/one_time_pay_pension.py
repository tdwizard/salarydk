# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class OneTimePayPension(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'str',
        'destination_type': 'str',
        'one_time_pay': 'OneTimePay',
        'pension_company_id': 'str',
        'pension_customer_id': 'str',
        'reporting_base_amount': 'float',
        'reporting_percentage': 'float',
        'scheme': 'str',
        'sort_code': 'str',
        'union_agreement_number': 'str'
    }

    attribute_map = {
        'account': 'account',
        'destination_type': 'destinationType',
        'one_time_pay': 'oneTimePay',
        'pension_company_id': 'pensionCompanyID',
        'pension_customer_id': 'pensionCustomerID',
        'reporting_base_amount': 'reportingBaseAmount',
        'reporting_percentage': 'reportingPercentage',
        'scheme': 'scheme',
        'sort_code': 'sortCode',
        'union_agreement_number': 'unionAgreementNumber'
    }

    def __init__(self, account=None, destination_type=None, one_time_pay=None, pension_company_id=None, pension_customer_id=None, reporting_base_amount=None, reporting_percentage=None, scheme=None, sort_code=None, union_agreement_number=None, local_vars_configuration=None):  # noqa: E501
        """OneTimePayPension - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._destination_type = None
        self._one_time_pay = None
        self._pension_company_id = None
        self._pension_customer_id = None
        self._reporting_base_amount = None
        self._reporting_percentage = None
        self._scheme = None
        self._sort_code = None
        self._union_agreement_number = None
        self.discriminator = None

        self.account = account
        self.destination_type = destination_type
        self.one_time_pay = one_time_pay
        self.pension_company_id = pension_company_id
        self.pension_customer_id = pension_customer_id
        self.reporting_base_amount = reporting_base_amount
        self.reporting_percentage = reporting_percentage
        self.scheme = scheme
        self.sort_code = sort_code
        self.union_agreement_number = union_agreement_number

    @property
    def account(self):
        """Gets the account of this OneTimePayPension.  # noqa: E501

        The payment destination account for the pension  # noqa: E501

        :return: The account of this OneTimePayPension.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this OneTimePayPension.

        The payment destination account for the pension  # noqa: E501

        :param account: The account of this OneTimePayPension.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def destination_type(self):
        """Gets the destination_type of this OneTimePayPension.  # noqa: E501

        The payment destination type  # noqa: E501

        :return: The destination_type of this OneTimePayPension.  # noqa: E501
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this OneTimePayPension.

        The payment destination type  # noqa: E501

        :param destination_type: The destination_type of this OneTimePayPension.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and destination_type is None:  # noqa: E501
            raise ValueError("Invalid value for `destination_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DK Account", "DK PBS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and destination_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `destination_type` ({0}), must be one of {1}"  # noqa: E501
                .format(destination_type, allowed_values)
            )

        self._destination_type = destination_type

    @property
    def one_time_pay(self):
        """Gets the one_time_pay of this OneTimePayPension.  # noqa: E501


        :return: The one_time_pay of this OneTimePayPension.  # noqa: E501
        :rtype: OneTimePay
        """
        return self._one_time_pay

    @one_time_pay.setter
    def one_time_pay(self, one_time_pay):
        """Sets the one_time_pay of this OneTimePayPension.


        :param one_time_pay: The one_time_pay of this OneTimePayPension.  # noqa: E501
        :type: OneTimePay
        """
        if self.local_vars_configuration.client_side_validation and one_time_pay is None:  # noqa: E501
            raise ValueError("Invalid value for `one_time_pay`, must not be `None`")  # noqa: E501

        self._one_time_pay = one_time_pay

    @property
    def pension_company_id(self):
        """Gets the pension_company_id of this OneTimePayPension.  # noqa: E501

        The ID of the pension company  # noqa: E501

        :return: The pension_company_id of this OneTimePayPension.  # noqa: E501
        :rtype: str
        """
        return self._pension_company_id

    @pension_company_id.setter
    def pension_company_id(self, pension_company_id):
        """Sets the pension_company_id of this OneTimePayPension.

        The ID of the pension company  # noqa: E501

        :param pension_company_id: The pension_company_id of this OneTimePayPension.  # noqa: E501
        :type: str
        """

        self._pension_company_id = pension_company_id

    @property
    def pension_customer_id(self):
        """Gets the pension_customer_id of this OneTimePayPension.  # noqa: E501

        The customer number at the pension company  # noqa: E501

        :return: The pension_customer_id of this OneTimePayPension.  # noqa: E501
        :rtype: str
        """
        return self._pension_customer_id

    @pension_customer_id.setter
    def pension_customer_id(self, pension_customer_id):
        """Sets the pension_customer_id of this OneTimePayPension.

        The customer number at the pension company  # noqa: E501

        :param pension_customer_id: The pension_customer_id of this OneTimePayPension.  # noqa: E501
        :type: str
        """

        self._pension_customer_id = pension_customer_id

    @property
    def reporting_base_amount(self):
        """Gets the reporting_base_amount of this OneTimePayPension.  # noqa: E501

        When transferring the pension amount to the pension company, this is the base amount reported.  # noqa: E501

        :return: The reporting_base_amount of this OneTimePayPension.  # noqa: E501
        :rtype: float
        """
        return self._reporting_base_amount

    @reporting_base_amount.setter
    def reporting_base_amount(self, reporting_base_amount):
        """Sets the reporting_base_amount of this OneTimePayPension.

        When transferring the pension amount to the pension company, this is the base amount reported.  # noqa: E501

        :param reporting_base_amount: The reporting_base_amount of this OneTimePayPension.  # noqa: E501
        :type: float
        """

        self._reporting_base_amount = reporting_base_amount

    @property
    def reporting_percentage(self):
        """Gets the reporting_percentage of this OneTimePayPension.  # noqa: E501

        when transferring the pension amount to the pension company, this is the pension percentage reported.  # noqa: E501

        :return: The reporting_percentage of this OneTimePayPension.  # noqa: E501
        :rtype: float
        """
        return self._reporting_percentage

    @reporting_percentage.setter
    def reporting_percentage(self, reporting_percentage):
        """Sets the reporting_percentage of this OneTimePayPension.

        when transferring the pension amount to the pension company, this is the pension percentage reported.  # noqa: E501

        :param reporting_percentage: The reporting_percentage of this OneTimePayPension.  # noqa: E501
        :type: float
        """

        self._reporting_percentage = reporting_percentage

    @property
    def scheme(self):
        """Gets the scheme of this OneTimePayPension.  # noqa: E501

        The pension scheme type  # noqa: E501

        :return: The scheme of this OneTimePayPension.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this OneTimePayPension.

        The pension scheme type  # noqa: E501

        :param scheme: The scheme of this OneTimePayPension.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and scheme is None:  # noqa: E501
            raise ValueError("Invalid value for `scheme`, must not be `None`")  # noqa: E501
        allowed_values = ["EmployeePaid", "EmployerPaid", "EmployerPaidNet", "EmployeePaidNet"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and scheme not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `scheme` ({0}), must be one of {1}"  # noqa: E501
                .format(scheme, allowed_values)
            )

        self._scheme = scheme

    @property
    def sort_code(self):
        """Gets the sort_code of this OneTimePayPension.  # noqa: E501

        The payment destination sort code for the pension  # noqa: E501

        :return: The sort_code of this OneTimePayPension.  # noqa: E501
        :rtype: str
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this OneTimePayPension.

        The payment destination sort code for the pension  # noqa: E501

        :param sort_code: The sort_code of this OneTimePayPension.  # noqa: E501
        :type: str
        """

        self._sort_code = sort_code

    @property
    def union_agreement_number(self):
        """Gets the union_agreement_number of this OneTimePayPension.  # noqa: E501

        The union agreement number to mark on the pension transfer, if needed.  # noqa: E501

        :return: The union_agreement_number of this OneTimePayPension.  # noqa: E501
        :rtype: str
        """
        return self._union_agreement_number

    @union_agreement_number.setter
    def union_agreement_number(self, union_agreement_number):
        """Sets the union_agreement_number of this OneTimePayPension.

        The union agreement number to mark on the pension transfer, if needed.  # noqa: E501

        :param union_agreement_number: The union_agreement_number of this OneTimePayPension.  # noqa: E501
        :type: str
        """

        self._union_agreement_number = union_agreement_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneTimePayPension):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneTimePayPension):
            return True

        return self.to_dict() != other.to_dict()
