# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class PayRoll(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'approvers': 'list[Approver]',
        'can_approve': 'bool',
        'can_revert_approval': 'bool',
        'can_review': 'bool',
        'disposition_date': 'date',
        'id': 'str',
        'is_approved': 'bool',
        'is_deletable': 'bool',
        'is_manual': 'bool',
        'is_rejected': 'bool',
        'is_reviewed': 'bool',
        'is_tentative': 'bool',
        'locked_employee_i_ds': 'list[str]',
        'pay_roll_type': 'str',
        'payment_method': 'str',
        'salary_cycle': 'SalaryCycle',
        'salary_period': 'SalaryPeriod',
        'status': 'str',
        'tasks': 'list[PayRollTasks]',
        'total_hours': 'float',
        'total_invoice': 'float',
        'total_invoiced_salary': 'float',
        'total_paycheck': 'float',
        'total_transfer': 'float',
        'version': 'str'
    }

    attribute_map = {
        'approvers': 'approvers',
        'can_approve': 'canApprove',
        'can_revert_approval': 'canRevertApproval',
        'can_review': 'canReview',
        'disposition_date': 'dispositionDate',
        'id': 'id',
        'is_approved': 'isApproved',
        'is_deletable': 'isDeletable',
        'is_manual': 'isManual',
        'is_rejected': 'isRejected',
        'is_reviewed': 'isReviewed',
        'is_tentative': 'isTentative',
        'locked_employee_i_ds': 'lockedEmployeeIDs',
        'pay_roll_type': 'payRollType',
        'payment_method': 'paymentMethod',
        'salary_cycle': 'salaryCycle',
        'salary_period': 'salaryPeriod',
        'status': 'status',
        'tasks': 'tasks',
        'total_hours': 'totalHours',
        'total_invoice': 'totalInvoice',
        'total_invoiced_salary': 'totalInvoicedSalary',
        'total_paycheck': 'totalPaycheck',
        'total_transfer': 'totalTransfer',
        'version': 'version'
    }

    def __init__(self, approvers=None, can_approve=None, can_revert_approval=None, can_review=None, disposition_date=None, id=None, is_approved=None, is_deletable=None, is_manual=None, is_rejected=None, is_reviewed=None, is_tentative=None, locked_employee_i_ds=None, pay_roll_type=None, payment_method=None, salary_cycle=None, salary_period=None, status=None, tasks=None, total_hours=None, total_invoice=None, total_invoiced_salary=None, total_paycheck=None, total_transfer=None, version=None, local_vars_configuration=None):  # noqa: E501
        """PayRoll - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._approvers = None
        self._can_approve = None
        self._can_revert_approval = None
        self._can_review = None
        self._disposition_date = None
        self._id = None
        self._is_approved = None
        self._is_deletable = None
        self._is_manual = None
        self._is_rejected = None
        self._is_reviewed = None
        self._is_tentative = None
        self._locked_employee_i_ds = None
        self._pay_roll_type = None
        self._payment_method = None
        self._salary_cycle = None
        self._salary_period = None
        self._status = None
        self._tasks = None
        self._total_hours = None
        self._total_invoice = None
        self._total_invoiced_salary = None
        self._total_paycheck = None
        self._total_transfer = None
        self._version = None
        self.discriminator = None

        if approvers is not None:
            self.approvers = approvers
        if can_approve is not None:
            self.can_approve = can_approve
        if can_revert_approval is not None:
            self.can_revert_approval = can_revert_approval
        if can_review is not None:
            self.can_review = can_review
        if disposition_date is not None:
            self.disposition_date = disposition_date
        if id is not None:
            self.id = id
        if is_approved is not None:
            self.is_approved = is_approved
        if is_deletable is not None:
            self.is_deletable = is_deletable
        if is_manual is not None:
            self.is_manual = is_manual
        if is_rejected is not None:
            self.is_rejected = is_rejected
        if is_reviewed is not None:
            self.is_reviewed = is_reviewed
        if is_tentative is not None:
            self.is_tentative = is_tentative
        if locked_employee_i_ds is not None:
            self.locked_employee_i_ds = locked_employee_i_ds
        if pay_roll_type is not None:
            self.pay_roll_type = pay_roll_type
        self.payment_method = payment_method
        if salary_cycle is not None:
            self.salary_cycle = salary_cycle
        if salary_period is not None:
            self.salary_period = salary_period
        if status is not None:
            self.status = status
        if tasks is not None:
            self.tasks = tasks
        self.total_hours = total_hours
        self.total_invoice = total_invoice
        self.total_invoiced_salary = total_invoiced_salary
        self.total_paycheck = total_paycheck
        self.total_transfer = total_transfer
        if version is not None:
            self.version = version

    @property
    def approvers(self):
        """Gets the approvers of this PayRoll.  # noqa: E501


        :return: The approvers of this PayRoll.  # noqa: E501
        :rtype: list[Approver]
        """
        return self._approvers

    @approvers.setter
    def approvers(self, approvers):
        """Sets the approvers of this PayRoll.


        :param approvers: The approvers of this PayRoll.  # noqa: E501
        :type: list[Approver]
        """

        self._approvers = approvers

    @property
    def can_approve(self):
        """Gets the can_approve of this PayRoll.  # noqa: E501


        :return: The can_approve of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._can_approve

    @can_approve.setter
    def can_approve(self, can_approve):
        """Sets the can_approve of this PayRoll.


        :param can_approve: The can_approve of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._can_approve = can_approve

    @property
    def can_revert_approval(self):
        """Gets the can_revert_approval of this PayRoll.  # noqa: E501


        :return: The can_revert_approval of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._can_revert_approval

    @can_revert_approval.setter
    def can_revert_approval(self, can_revert_approval):
        """Sets the can_revert_approval of this PayRoll.


        :param can_revert_approval: The can_revert_approval of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._can_revert_approval = can_revert_approval

    @property
    def can_review(self):
        """Gets the can_review of this PayRoll.  # noqa: E501


        :return: The can_review of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._can_review

    @can_review.setter
    def can_review(self, can_review):
        """Sets the can_review of this PayRoll.


        :param can_review: The can_review of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._can_review = can_review

    @property
    def disposition_date(self):
        """Gets the disposition_date of this PayRoll.  # noqa: E501


        :return: The disposition_date of this PayRoll.  # noqa: E501
        :rtype: date
        """
        return self._disposition_date

    @disposition_date.setter
    def disposition_date(self, disposition_date):
        """Sets the disposition_date of this PayRoll.


        :param disposition_date: The disposition_date of this PayRoll.  # noqa: E501
        :type: date
        """

        self._disposition_date = disposition_date

    @property
    def id(self):
        """Gets the id of this PayRoll.  # noqa: E501


        :return: The id of this PayRoll.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PayRoll.


        :param id: The id of this PayRoll.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_approved(self):
        """Gets the is_approved of this PayRoll.  # noqa: E501


        :return: The is_approved of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._is_approved

    @is_approved.setter
    def is_approved(self, is_approved):
        """Sets the is_approved of this PayRoll.


        :param is_approved: The is_approved of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._is_approved = is_approved

    @property
    def is_deletable(self):
        """Gets the is_deletable of this PayRoll.  # noqa: E501


        :return: The is_deletable of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._is_deletable

    @is_deletable.setter
    def is_deletable(self, is_deletable):
        """Sets the is_deletable of this PayRoll.


        :param is_deletable: The is_deletable of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._is_deletable = is_deletable

    @property
    def is_manual(self):
        """Gets the is_manual of this PayRoll.  # noqa: E501


        :return: The is_manual of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this PayRoll.


        :param is_manual: The is_manual of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._is_manual = is_manual

    @property
    def is_rejected(self):
        """Gets the is_rejected of this PayRoll.  # noqa: E501


        :return: The is_rejected of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._is_rejected

    @is_rejected.setter
    def is_rejected(self, is_rejected):
        """Sets the is_rejected of this PayRoll.


        :param is_rejected: The is_rejected of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._is_rejected = is_rejected

    @property
    def is_reviewed(self):
        """Gets the is_reviewed of this PayRoll.  # noqa: E501


        :return: The is_reviewed of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._is_reviewed

    @is_reviewed.setter
    def is_reviewed(self, is_reviewed):
        """Sets the is_reviewed of this PayRoll.


        :param is_reviewed: The is_reviewed of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._is_reviewed = is_reviewed

    @property
    def is_tentative(self):
        """Gets the is_tentative of this PayRoll.  # noqa: E501


        :return: The is_tentative of this PayRoll.  # noqa: E501
        :rtype: bool
        """
        return self._is_tentative

    @is_tentative.setter
    def is_tentative(self, is_tentative):
        """Sets the is_tentative of this PayRoll.


        :param is_tentative: The is_tentative of this PayRoll.  # noqa: E501
        :type: bool
        """

        self._is_tentative = is_tentative

    @property
    def locked_employee_i_ds(self):
        """Gets the locked_employee_i_ds of this PayRoll.  # noqa: E501

        A list of employees to include in this pay roll. If empty, the list is automatic.  # noqa: E501

        :return: The locked_employee_i_ds of this PayRoll.  # noqa: E501
        :rtype: list[str]
        """
        return self._locked_employee_i_ds

    @locked_employee_i_ds.setter
    def locked_employee_i_ds(self, locked_employee_i_ds):
        """Sets the locked_employee_i_ds of this PayRoll.

        A list of employees to include in this pay roll. If empty, the list is automatic.  # noqa: E501

        :param locked_employee_i_ds: The locked_employee_i_ds of this PayRoll.  # noqa: E501
        :type: list[str]
        """

        self._locked_employee_i_ds = locked_employee_i_ds

    @property
    def pay_roll_type(self):
        """Gets the pay_roll_type of this PayRoll.  # noqa: E501


        :return: The pay_roll_type of this PayRoll.  # noqa: E501
        :rtype: str
        """
        return self._pay_roll_type

    @pay_roll_type.setter
    def pay_roll_type(self, pay_roll_type):
        """Sets the pay_roll_type of this PayRoll.


        :param pay_roll_type: The pay_roll_type of this PayRoll.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ordinary", "TerminatedEmployments"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and pay_roll_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `pay_roll_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pay_roll_type, allowed_values)
            )

        self._pay_roll_type = pay_roll_type

    @property
    def payment_method(self):
        """Gets the payment_method of this PayRoll.  # noqa: E501


        :return: The payment_method of this PayRoll.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PayRoll.


        :param payment_method: The payment_method of this PayRoll.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"Manual", "NETS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and payment_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def salary_cycle(self):
        """Gets the salary_cycle of this PayRoll.  # noqa: E501


        :return: The salary_cycle of this PayRoll.  # noqa: E501
        :rtype: SalaryCycle
        """
        return self._salary_cycle

    @salary_cycle.setter
    def salary_cycle(self, salary_cycle):
        """Sets the salary_cycle of this PayRoll.


        :param salary_cycle: The salary_cycle of this PayRoll.  # noqa: E501
        :type: SalaryCycle
        """

        self._salary_cycle = salary_cycle

    @property
    def salary_period(self):
        """Gets the salary_period of this PayRoll.  # noqa: E501


        :return: The salary_period of this PayRoll.  # noqa: E501
        :rtype: SalaryPeriod
        """
        return self._salary_period

    @salary_period.setter
    def salary_period(self, salary_period):
        """Sets the salary_period of this PayRoll.


        :param salary_period: The salary_period of this PayRoll.  # noqa: E501
        :type: SalaryPeriod
        """

        self._salary_period = salary_period

    @property
    def status(self):
        """Gets the status of this PayRoll.  # noqa: E501


        :return: The status of this PayRoll.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PayRoll.


        :param status: The status of this PayRoll.  # noqa: E501
        :type: str
        """
        allowed_values = ["Future", "Running", "Succeeded", "Failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tasks(self):
        """Gets the tasks of this PayRoll.  # noqa: E501


        :return: The tasks of this PayRoll.  # noqa: E501
        :rtype: list[PayRollTasks]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this PayRoll.


        :param tasks: The tasks of this PayRoll.  # noqa: E501
        :type: list[PayRollTasks]
        """

        self._tasks = tasks

    @property
    def total_hours(self):
        """Gets the total_hours of this PayRoll.  # noqa: E501


        :return: The total_hours of this PayRoll.  # noqa: E501
        :rtype: float
        """
        return self._total_hours

    @total_hours.setter
    def total_hours(self, total_hours):
        """Sets the total_hours of this PayRoll.


        :param total_hours: The total_hours of this PayRoll.  # noqa: E501
        :type: float
        """

        self._total_hours = total_hours

    @property
    def total_invoice(self):
        """Gets the total_invoice of this PayRoll.  # noqa: E501


        :return: The total_invoice of this PayRoll.  # noqa: E501
        :rtype: float
        """
        return self._total_invoice

    @total_invoice.setter
    def total_invoice(self, total_invoice):
        """Sets the total_invoice of this PayRoll.


        :param total_invoice: The total_invoice of this PayRoll.  # noqa: E501
        :type: float
        """

        self._total_invoice = total_invoice

    @property
    def total_invoiced_salary(self):
        """Gets the total_invoiced_salary of this PayRoll.  # noqa: E501


        :return: The total_invoiced_salary of this PayRoll.  # noqa: E501
        :rtype: float
        """
        return self._total_invoiced_salary

    @total_invoiced_salary.setter
    def total_invoiced_salary(self, total_invoiced_salary):
        """Sets the total_invoiced_salary of this PayRoll.


        :param total_invoiced_salary: The total_invoiced_salary of this PayRoll.  # noqa: E501
        :type: float
        """

        self._total_invoiced_salary = total_invoiced_salary

    @property
    def total_paycheck(self):
        """Gets the total_paycheck of this PayRoll.  # noqa: E501


        :return: The total_paycheck of this PayRoll.  # noqa: E501
        :rtype: float
        """
        return self._total_paycheck

    @total_paycheck.setter
    def total_paycheck(self, total_paycheck):
        """Sets the total_paycheck of this PayRoll.


        :param total_paycheck: The total_paycheck of this PayRoll.  # noqa: E501
        :type: float
        """

        self._total_paycheck = total_paycheck

    @property
    def total_transfer(self):
        """Gets the total_transfer of this PayRoll.  # noqa: E501


        :return: The total_transfer of this PayRoll.  # noqa: E501
        :rtype: float
        """
        return self._total_transfer

    @total_transfer.setter
    def total_transfer(self, total_transfer):
        """Sets the total_transfer of this PayRoll.


        :param total_transfer: The total_transfer of this PayRoll.  # noqa: E501
        :type: float
        """

        self._total_transfer = total_transfer

    @property
    def version(self):
        """Gets the version of this PayRoll.  # noqa: E501

        To be passed as parameter when performing an operation on the pay roll, to avoid concurrency issues.  # noqa: E501

        :return: The version of this PayRoll.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PayRoll.

        To be passed as parameter when performing an operation on the pay roll, to avoid concurrency issues.  # noqa: E501

        :param version: The version of this PayRoll.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayRoll):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PayRoll):
            return True

        return self.to_dict() != other.to_dict()
