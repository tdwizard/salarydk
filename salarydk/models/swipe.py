# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class Swipe(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'float',
        'approvable': 'Approvable',
        'approved': 'bool',
        'created_at': 'date',
        'deletable': 'bool',
        'employee_id': 'str',
        'id': 'str',
        'immutable': 'bool',
        'paid': 'bool',
        'payment_date': 'date',
        'receive_date': 'date',
        'settled': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'approvable': 'approvable',
        'approved': 'approved',
        'created_at': 'createdAt',
        'deletable': 'deletable',
        'employee_id': 'employeeID',
        'id': 'id',
        'immutable': 'immutable',
        'paid': 'paid',
        'payment_date': 'paymentDate',
        'receive_date': 'receiveDate',
        'settled': 'settled'
    }

    def __init__(self, amount=None, approvable=None, approved=None, created_at=None, deletable=None, employee_id=None, id=None, immutable=None, paid=None, payment_date=None, receive_date=None, settled=None, local_vars_configuration=None):  # noqa: E501
        """Swipe - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._approvable = None
        self._approved = None
        self._created_at = None
        self._deletable = None
        self._employee_id = None
        self._id = None
        self._immutable = None
        self._paid = None
        self._payment_date = None
        self._receive_date = None
        self._settled = None
        self.discriminator = None

        self.amount = amount
        if approvable is not None:
            self.approvable = approvable
        if approved is not None:
            self.approved = approved
        if created_at is not None:
            self.created_at = created_at
        if deletable is not None:
            self.deletable = deletable
        if employee_id is not None:
            self.employee_id = employee_id
        if id is not None:
            self.id = id
        if immutable is not None:
            self.immutable = immutable
        if paid is not None:
            self.paid = paid
        self.payment_date = payment_date
        self.receive_date = receive_date
        if settled is not None:
            self.settled = settled

    @property
    def amount(self):
        """Gets the amount of this Swipe.  # noqa: E501

        The amount to be swiped.  If within the automatic threshold, the Swipe will be automatic approved, otherwise it will remain unapproved.  # noqa: E501

        :return: The amount of this Swipe.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Swipe.

        The amount to be swiped.  If within the automatic threshold, the Swipe will be automatic approved, otherwise it will remain unapproved.  # noqa: E501

        :param amount: The amount of this Swipe.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def approvable(self):
        """Gets the approvable of this Swipe.  # noqa: E501


        :return: The approvable of this Swipe.  # noqa: E501
        :rtype: Approvable
        """
        return self._approvable

    @approvable.setter
    def approvable(self, approvable):
        """Sets the approvable of this Swipe.


        :param approvable: The approvable of this Swipe.  # noqa: E501
        :type: Approvable
        """

        self._approvable = approvable

    @property
    def approved(self):
        """Gets the approved of this Swipe.  # noqa: E501

        Whether the Swipe has been approved yet.  # noqa: E501

        :return: The approved of this Swipe.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this Swipe.

        Whether the Swipe has been approved yet.  # noqa: E501

        :param approved: The approved of this Swipe.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def created_at(self):
        """Gets the created_at of this Swipe.  # noqa: E501

        The date the swipe was created.  # noqa: E501

        :return: The created_at of this Swipe.  # noqa: E501
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Swipe.

        The date the swipe was created.  # noqa: E501

        :param created_at: The created_at of this Swipe.  # noqa: E501
        :type: date
        """

        self._created_at = created_at

    @property
    def deletable(self):
        """Gets the deletable of this Swipe.  # noqa: E501

        Whether this Swipe can be deleted.  # noqa: E501

        :return: The deletable of this Swipe.  # noqa: E501
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this Swipe.

        Whether this Swipe can be deleted.  # noqa: E501

        :param deletable: The deletable of this Swipe.  # noqa: E501
        :type: bool
        """

        self._deletable = deletable

    @property
    def employee_id(self):
        """Gets the employee_id of this Swipe.  # noqa: E501


        :return: The employee_id of this Swipe.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Swipe.


        :param employee_id: The employee_id of this Swipe.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def id(self):
        """Gets the id of this Swipe.  # noqa: E501


        :return: The id of this Swipe.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Swipe.


        :param id: The id of this Swipe.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def immutable(self):
        """Gets the immutable of this Swipe.  # noqa: E501

        Whether the Swipe can be modified.  # noqa: E501

        :return: The immutable of this Swipe.  # noqa: E501
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this Swipe.

        Whether the Swipe can be modified.  # noqa: E501

        :param immutable: The immutable of this Swipe.  # noqa: E501
        :type: bool
        """

        self._immutable = immutable

    @property
    def paid(self):
        """Gets the paid of this Swipe.  # noqa: E501

        Whether this Swipe has been paid (or more accurately, been transfered, since it may not have arrived yet).  # noqa: E501

        :return: The paid of this Swipe.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this Swipe.

        Whether this Swipe has been paid (or more accurately, been transfered, since it may not have arrived yet).  # noqa: E501

        :param paid: The paid of this Swipe.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    @property
    def payment_date(self):
        """Gets the payment_date of this Swipe.  # noqa: E501

        Date the money will be transferred.  This will first be calculated when this Swipe is approved.  # noqa: E501

        :return: The payment_date of this Swipe.  # noqa: E501
        :rtype: date
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Swipe.

        Date the money will be transferred.  This will first be calculated when this Swipe is approved.  # noqa: E501

        :param payment_date: The payment_date of this Swipe.  # noqa: E501
        :type: date
        """

        self._payment_date = payment_date

    @property
    def receive_date(self):
        """Gets the receive_date of this Swipe.  # noqa: E501

        Date the money will be received.  This will first be calculated when this Swipe is approved.  # noqa: E501

        :return: The receive_date of this Swipe.  # noqa: E501
        :rtype: date
        """
        return self._receive_date

    @receive_date.setter
    def receive_date(self, receive_date):
        """Sets the receive_date of this Swipe.

        Date the money will be received.  This will first be calculated when this Swipe is approved.  # noqa: E501

        :param receive_date: The receive_date of this Swipe.  # noqa: E501
        :type: date
        """

        self._receive_date = receive_date

    @property
    def settled(self):
        """Gets the settled of this Swipe.  # noqa: E501

        Whether the Swipe has been on a finished pay roll run yet.  # noqa: E501

        :return: The settled of this Swipe.  # noqa: E501
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this Swipe.

        Whether the Swipe has been on a finished pay roll run yet.  # noqa: E501

        :param settled: The settled of this Swipe.  # noqa: E501
        :type: bool
        """

        self._settled = settled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Swipe):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Swipe):
            return True

        return self.to_dict() != other.to_dict()
