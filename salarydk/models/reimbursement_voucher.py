# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class ReimbursementVoucher(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'float',
        'amount_vat': 'float',
        'approval_state': 'str',
        'booking_state': 'str',
        'card_note': 'str',
        'company_id': 'str',
        'created_at': 'datetime',
        'currency': 'str',
        'disburse_amount': 'float',
        'disburseable': 'bool',
        'employee_id': 'str',
        'expense_category': 'ExpenseCategory',
        'file_name': 'str',
        'has_thumbnail': 'bool',
        'id': 'str',
        'immediate_pay': 'bool',
        'mime_type': 'str',
        'note': 'str',
        'one_time_pay_id': 'str',
        'receipt_date': 'date',
        'seller_name': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'amount_vat': 'amountVAT',
        'approval_state': 'approvalState',
        'booking_state': 'bookingState',
        'card_note': 'cardNote',
        'company_id': 'companyID',
        'created_at': 'createdAt',
        'currency': 'currency',
        'disburse_amount': 'disburseAmount',
        'disburseable': 'disburseable',
        'employee_id': 'employeeID',
        'expense_category': 'expenseCategory',
        'file_name': 'fileName',
        'has_thumbnail': 'hasThumbnail',
        'id': 'id',
        'immediate_pay': 'immediatePay',
        'mime_type': 'mimeType',
        'note': 'note',
        'one_time_pay_id': 'oneTimePayID',
        'receipt_date': 'receiptDate',
        'seller_name': 'sellerName'
    }

    def __init__(self, amount=None, amount_vat=None, approval_state=None, booking_state=None, card_note=None, company_id=None, created_at=None, currency=None, disburse_amount=None, disburseable=None, employee_id=None, expense_category=None, file_name=None, has_thumbnail=None, id=None, immediate_pay=None, mime_type=None, note=None, one_time_pay_id=None, receipt_date=None, seller_name=None, local_vars_configuration=None):  # noqa: E501
        """ReimbursementVoucher - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._amount_vat = None
        self._approval_state = None
        self._booking_state = None
        self._card_note = None
        self._company_id = None
        self._created_at = None
        self._currency = None
        self._disburse_amount = None
        self._disburseable = None
        self._employee_id = None
        self._expense_category = None
        self._file_name = None
        self._has_thumbnail = None
        self._id = None
        self._immediate_pay = None
        self._mime_type = None
        self._note = None
        self._one_time_pay_id = None
        self._receipt_date = None
        self._seller_name = None
        self.discriminator = None

        self.amount = amount
        self.amount_vat = amount_vat
        if approval_state is not None:
            self.approval_state = approval_state
        if booking_state is not None:
            self.booking_state = booking_state
        if card_note is not None:
            self.card_note = card_note
        if company_id is not None:
            self.company_id = company_id
        if created_at is not None:
            self.created_at = created_at
        self.currency = currency
        if disburse_amount is not None:
            self.disburse_amount = disburse_amount
        if disburseable is not None:
            self.disburseable = disburseable
        if employee_id is not None:
            self.employee_id = employee_id
        if expense_category is not None:
            self.expense_category = expense_category
        if file_name is not None:
            self.file_name = file_name
        if has_thumbnail is not None:
            self.has_thumbnail = has_thumbnail
        if id is not None:
            self.id = id
        self.immediate_pay = immediate_pay
        if mime_type is not None:
            self.mime_type = mime_type
        if note is not None:
            self.note = note
        if one_time_pay_id is not None:
            self.one_time_pay_id = one_time_pay_id
        self.receipt_date = receipt_date
        self.seller_name = seller_name

    @property
    def amount(self):
        """Gets the amount of this ReimbursementVoucher.  # noqa: E501


        :return: The amount of this ReimbursementVoucher.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ReimbursementVoucher.


        :param amount: The amount of this ReimbursementVoucher.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_vat(self):
        """Gets the amount_vat of this ReimbursementVoucher.  # noqa: E501


        :return: The amount_vat of this ReimbursementVoucher.  # noqa: E501
        :rtype: float
        """
        return self._amount_vat

    @amount_vat.setter
    def amount_vat(self, amount_vat):
        """Sets the amount_vat of this ReimbursementVoucher.


        :param amount_vat: The amount_vat of this ReimbursementVoucher.  # noqa: E501
        :type: float
        """

        self._amount_vat = amount_vat

    @property
    def approval_state(self):
        """Gets the approval_state of this ReimbursementVoucher.  # noqa: E501


        :return: The approval_state of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._approval_state

    @approval_state.setter
    def approval_state(self, approval_state):
        """Sets the approval_state of this ReimbursementVoucher.


        :param approval_state: The approval_state of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """
        allowed_values = ["Draft", "Ready", "Approved"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and approval_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `approval_state` ({0}), must be one of {1}"  # noqa: E501
                .format(approval_state, allowed_values)
            )

        self._approval_state = approval_state

    @property
    def booking_state(self):
        """Gets the booking_state of this ReimbursementVoucher.  # noqa: E501


        :return: The booking_state of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._booking_state

    @booking_state.setter
    def booking_state(self, booking_state):
        """Sets the booking_state of this ReimbursementVoucher.


        :param booking_state: The booking_state of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Ready", "Booked", "Failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and booking_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `booking_state` ({0}), must be one of {1}"  # noqa: E501
                .format(booking_state, allowed_values)
            )

        self._booking_state = booking_state

    @property
    def card_note(self):
        """Gets the card_note of this ReimbursementVoucher.  # noqa: E501


        :return: The card_note of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._card_note

    @card_note.setter
    def card_note(self, card_note):
        """Sets the card_note of this ReimbursementVoucher.


        :param card_note: The card_note of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._card_note = card_note

    @property
    def company_id(self):
        """Gets the company_id of this ReimbursementVoucher.  # noqa: E501


        :return: The company_id of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ReimbursementVoucher.


        :param company_id: The company_id of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def created_at(self):
        """Gets the created_at of this ReimbursementVoucher.  # noqa: E501


        :return: The created_at of this ReimbursementVoucher.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReimbursementVoucher.


        :param created_at: The created_at of this ReimbursementVoucher.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this ReimbursementVoucher.  # noqa: E501


        :return: The currency of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ReimbursementVoucher.


        :param currency: The currency of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def disburse_amount(self):
        """Gets the disburse_amount of this ReimbursementVoucher.  # noqa: E501

        The amount from the receipt (voucher) in the company's own currency  # noqa: E501

        :return: The disburse_amount of this ReimbursementVoucher.  # noqa: E501
        :rtype: float
        """
        return self._disburse_amount

    @disburse_amount.setter
    def disburse_amount(self, disburse_amount):
        """Sets the disburse_amount of this ReimbursementVoucher.

        The amount from the receipt (voucher) in the company's own currency  # noqa: E501

        :param disburse_amount: The disburse_amount of this ReimbursementVoucher.  # noqa: E501
        :type: float
        """

        self._disburse_amount = disburse_amount

    @property
    def disburseable(self):
        """Gets the disburseable of this ReimbursementVoucher.  # noqa: E501


        :return: The disburseable of this ReimbursementVoucher.  # noqa: E501
        :rtype: bool
        """
        return self._disburseable

    @disburseable.setter
    def disburseable(self, disburseable):
        """Sets the disburseable of this ReimbursementVoucher.


        :param disburseable: The disburseable of this ReimbursementVoucher.  # noqa: E501
        :type: bool
        """

        self._disburseable = disburseable

    @property
    def employee_id(self):
        """Gets the employee_id of this ReimbursementVoucher.  # noqa: E501


        :return: The employee_id of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this ReimbursementVoucher.


        :param employee_id: The employee_id of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def expense_category(self):
        """Gets the expense_category of this ReimbursementVoucher.  # noqa: E501


        :return: The expense_category of this ReimbursementVoucher.  # noqa: E501
        :rtype: ExpenseCategory
        """
        return self._expense_category

    @expense_category.setter
    def expense_category(self, expense_category):
        """Sets the expense_category of this ReimbursementVoucher.


        :param expense_category: The expense_category of this ReimbursementVoucher.  # noqa: E501
        :type: ExpenseCategory
        """

        self._expense_category = expense_category

    @property
    def file_name(self):
        """Gets the file_name of this ReimbursementVoucher.  # noqa: E501


        :return: The file_name of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ReimbursementVoucher.


        :param file_name: The file_name of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def has_thumbnail(self):
        """Gets the has_thumbnail of this ReimbursementVoucher.  # noqa: E501


        :return: The has_thumbnail of this ReimbursementVoucher.  # noqa: E501
        :rtype: bool
        """
        return self._has_thumbnail

    @has_thumbnail.setter
    def has_thumbnail(self, has_thumbnail):
        """Sets the has_thumbnail of this ReimbursementVoucher.


        :param has_thumbnail: The has_thumbnail of this ReimbursementVoucher.  # noqa: E501
        :type: bool
        """

        self._has_thumbnail = has_thumbnail

    @property
    def id(self):
        """Gets the id of this ReimbursementVoucher.  # noqa: E501


        :return: The id of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReimbursementVoucher.


        :param id: The id of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def immediate_pay(self):
        """Gets the immediate_pay of this ReimbursementVoucher.  # noqa: E501


        :return: The immediate_pay of this ReimbursementVoucher.  # noqa: E501
        :rtype: bool
        """
        return self._immediate_pay

    @immediate_pay.setter
    def immediate_pay(self, immediate_pay):
        """Sets the immediate_pay of this ReimbursementVoucher.


        :param immediate_pay: The immediate_pay of this ReimbursementVoucher.  # noqa: E501
        :type: bool
        """

        self._immediate_pay = immediate_pay

    @property
    def mime_type(self):
        """Gets the mime_type of this ReimbursementVoucher.  # noqa: E501


        :return: The mime_type of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ReimbursementVoucher.


        :param mime_type: The mime_type of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def note(self):
        """Gets the note of this ReimbursementVoucher.  # noqa: E501


        :return: The note of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ReimbursementVoucher.


        :param note: The note of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def one_time_pay_id(self):
        """Gets the one_time_pay_id of this ReimbursementVoucher.  # noqa: E501


        :return: The one_time_pay_id of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._one_time_pay_id

    @one_time_pay_id.setter
    def one_time_pay_id(self, one_time_pay_id):
        """Sets the one_time_pay_id of this ReimbursementVoucher.


        :param one_time_pay_id: The one_time_pay_id of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._one_time_pay_id = one_time_pay_id

    @property
    def receipt_date(self):
        """Gets the receipt_date of this ReimbursementVoucher.  # noqa: E501


        :return: The receipt_date of this ReimbursementVoucher.  # noqa: E501
        :rtype: date
        """
        return self._receipt_date

    @receipt_date.setter
    def receipt_date(self, receipt_date):
        """Sets the receipt_date of this ReimbursementVoucher.


        :param receipt_date: The receipt_date of this ReimbursementVoucher.  # noqa: E501
        :type: date
        """

        self._receipt_date = receipt_date

    @property
    def seller_name(self):
        """Gets the seller_name of this ReimbursementVoucher.  # noqa: E501


        :return: The seller_name of this ReimbursementVoucher.  # noqa: E501
        :rtype: str
        """
        return self._seller_name

    @seller_name.setter
    def seller_name(self, seller_name):
        """Sets the seller_name of this ReimbursementVoucher.


        :param seller_name: The seller_name of this ReimbursementVoucher.  # noqa: E501
        :type: str
        """

        self._seller_name = seller_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReimbursementVoucher):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReimbursementVoucher):
            return True

        return self.to_dict() != other.to_dict()
