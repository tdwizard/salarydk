# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class Employee(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_employment': 'Employment',
        'address': 'str',
        'affiliation_type': 'str',
        'bank_account_number': 'str',
        'bank_registration_number': 'str',
        'birth_date': 'date',
        'calendar_feed_key': 'str',
        'city': 'str',
        'company_id': 'str',
        'country': 'str',
        'department_id': 'str',
        'earliest_mutable_contract': 'EmployeeContract',
        'email': 'str',
        'employment_status': 'str',
        'gender': 'str',
        'has_pdf_password': 'bool',
        'has_swipe': 'bool',
        'has_user': 'bool',
        'id': 'str',
        'immutable_end_date': 'date',
        'language': 'str',
        'locked_end_date': 'date',
        'name': 'str',
        'national_id': 'str',
        'national_id_type': 'str',
        'onboarding_state': 'str',
        'paid_out_this_year': 'float',
        'pay_slip_transport_e_mail': 'bool',
        'pay_slip_transport_national_inbox': 'bool',
        'pay_slip_transport_sms': 'bool',
        'phone_number': 'str',
        'phone_number_country_code': 'str',
        'postal_code': 'str',
        'profile_image_url': 'str',
        'transfer_destination_type': 'str'
    }

    attribute_map = {
        'active_employment': 'activeEmployment',
        'address': 'address',
        'affiliation_type': 'affiliationType',
        'bank_account_number': 'bankAccountNumber',
        'bank_registration_number': 'bankRegistrationNumber',
        'birth_date': 'birthDate',
        'calendar_feed_key': 'calendarFeedKey',
        'city': 'city',
        'company_id': 'companyID',
        'country': 'country',
        'department_id': 'departmentID',
        'earliest_mutable_contract': 'earliestMutableContract',
        'email': 'email',
        'employment_status': 'employmentStatus',
        'gender': 'gender',
        'has_pdf_password': 'hasPDFPassword',
        'has_swipe': 'hasSwipe',
        'has_user': 'hasUser',
        'id': 'id',
        'immutable_end_date': 'immutableEndDate',
        'language': 'language',
        'locked_end_date': 'lockedEndDate',
        'name': 'name',
        'national_id': 'nationalID',
        'national_id_type': 'nationalIDType',
        'onboarding_state': 'onboardingState',
        'paid_out_this_year': 'paidOutThisYear',
        'pay_slip_transport_e_mail': 'paySlipTransportEMail',
        'pay_slip_transport_national_inbox': 'paySlipTransportNationalInbox',
        'pay_slip_transport_sms': 'paySlipTransportSMS',
        'phone_number': 'phoneNumber',
        'phone_number_country_code': 'phoneNumberCountryCode',
        'postal_code': 'postalCode',
        'profile_image_url': 'profileImageURL',
        'transfer_destination_type': 'transferDestinationType'
    }

    def __init__(self, active_employment=None, address=None, affiliation_type=None, bank_account_number=None, bank_registration_number=None, birth_date=None, calendar_feed_key=None, city=None, company_id=None, country='DK', department_id=None, earliest_mutable_contract=None, email=None, employment_status=None, gender=None, has_pdf_password=None, has_swipe=None, has_user=None, id=None, immutable_end_date=None, language=None, locked_end_date=None, name=None, national_id=None, national_id_type='DK CPR', onboarding_state='Final', paid_out_this_year=None, pay_slip_transport_e_mail=None, pay_slip_transport_national_inbox=None, pay_slip_transport_sms=None, phone_number=None, phone_number_country_code=None, postal_code=None, profile_image_url=None, transfer_destination_type='None', local_vars_configuration=None):  # noqa: E501
        """Employee - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_employment = None
        self._address = None
        self._affiliation_type = None
        self._bank_account_number = None
        self._bank_registration_number = None
        self._birth_date = None
        self._calendar_feed_key = None
        self._city = None
        self._company_id = None
        self._country = None
        self._department_id = None
        self._earliest_mutable_contract = None
        self._email = None
        self._employment_status = None
        self._gender = None
        self._has_pdf_password = None
        self._has_swipe = None
        self._has_user = None
        self._id = None
        self._immutable_end_date = None
        self._language = None
        self._locked_end_date = None
        self._name = None
        self._national_id = None
        self._national_id_type = None
        self._onboarding_state = None
        self._paid_out_this_year = None
        self._pay_slip_transport_e_mail = None
        self._pay_slip_transport_national_inbox = None
        self._pay_slip_transport_sms = None
        self._phone_number = None
        self._phone_number_country_code = None
        self._postal_code = None
        self._profile_image_url = None
        self._transfer_destination_type = None
        self.discriminator = None

        if active_employment is not None:
            self.active_employment = active_employment
        if address is not None:
            self.address = address
        self.affiliation_type = affiliation_type
        self.bank_account_number = bank_account_number
        self.bank_registration_number = bank_registration_number
        self.birth_date = birth_date
        if calendar_feed_key is not None:
            self.calendar_feed_key = calendar_feed_key
        if city is not None:
            self.city = city
        if company_id is not None:
            self.company_id = company_id
        self.country = country
        self.department_id = department_id
        if earliest_mutable_contract is not None:
            self.earliest_mutable_contract = earliest_mutable_contract
        if email is not None:
            self.email = email
        if employment_status is not None:
            self.employment_status = employment_status
        self.gender = gender
        if has_pdf_password is not None:
            self.has_pdf_password = has_pdf_password
        self.has_swipe = has_swipe
        if has_user is not None:
            self.has_user = has_user
        if id is not None:
            self.id = id
        self.immutable_end_date = immutable_end_date
        self.language = language
        self.locked_end_date = locked_end_date
        if name is not None:
            self.name = name
        if national_id is not None:
            self.national_id = national_id
        if national_id_type is not None:
            self.national_id_type = national_id_type
        self.onboarding_state = onboarding_state
        if paid_out_this_year is not None:
            self.paid_out_this_year = paid_out_this_year
        if pay_slip_transport_e_mail is not None:
            self.pay_slip_transport_e_mail = pay_slip_transport_e_mail
        if pay_slip_transport_national_inbox is not None:
            self.pay_slip_transport_national_inbox = pay_slip_transport_national_inbox
        if pay_slip_transport_sms is not None:
            self.pay_slip_transport_sms = pay_slip_transport_sms
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_number_country_code is not None:
            self.phone_number_country_code = phone_number_country_code
        if postal_code is not None:
            self.postal_code = postal_code
        if profile_image_url is not None:
            self.profile_image_url = profile_image_url
        if transfer_destination_type is not None:
            self.transfer_destination_type = transfer_destination_type

    @property
    def active_employment(self):
        """Gets the active_employment of this Employee.  # noqa: E501


        :return: The active_employment of this Employee.  # noqa: E501
        :rtype: Employment
        """
        return self._active_employment

    @active_employment.setter
    def active_employment(self, active_employment):
        """Sets the active_employment of this Employee.


        :param active_employment: The active_employment of this Employee.  # noqa: E501
        :type: Employment
        """

        self._active_employment = active_employment

    @property
    def address(self):
        """Gets the address of this Employee.  # noqa: E501

        The address of the employee.  Required if `onboardingState` = `Final`.  # noqa: E501

        :return: The address of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Employee.

        The address of the employee.  Required if `onboardingState` = `Final`.  # noqa: E501

        :param address: The address of this Employee.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def affiliation_type(self):
        """Gets the affiliation_type of this Employee.  # noqa: E501

        The affiliation type of the employee to the company.  # noqa: E501

        :return: The affiliation_type of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._affiliation_type

    @affiliation_type.setter
    def affiliation_type(self, affiliation_type):
        """Sets the affiliation_type of this Employee.

        The affiliation type of the employee to the company.  # noqa: E501

        :param affiliation_type: The affiliation_type of this Employee.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and affiliation_type is None:  # noqa: E501
            raise ValueError("Invalid value for `affiliation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Standard", "Director", "MajorityShareholder", "Freelancer"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and affiliation_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `affiliation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(affiliation_type, allowed_values)
            )

        self._affiliation_type = affiliation_type

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this Employee.  # noqa: E501

        The bank account number of the employee, restricted to 10 characters for `DK Account`.  # noqa: E501

        :return: The bank_account_number of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this Employee.

        The bank account number of the employee, restricted to 10 characters for `DK Account`.  # noqa: E501

        :param bank_account_number: The bank_account_number of this Employee.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_registration_number(self):
        """Gets the bank_registration_number of this Employee.  # noqa: E501

        The bank registration number of the employee, restricted to 4 characters for `DK Account`.  # noqa: E501

        :return: The bank_registration_number of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._bank_registration_number

    @bank_registration_number.setter
    def bank_registration_number(self, bank_registration_number):
        """Sets the bank_registration_number of this Employee.

        The bank registration number of the employee, restricted to 4 characters for `DK Account`.  # noqa: E501

        :param bank_registration_number: The bank_registration_number of this Employee.  # noqa: E501
        :type: str
        """

        self._bank_registration_number = bank_registration_number

    @property
    def birth_date(self):
        """Gets the birth_date of this Employee.  # noqa: E501

        The birth date of the employee. Used when `nationalIDType` = `DK Foreign` for tax reporting.  # noqa: E501

        :return: The birth_date of this Employee.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Employee.

        The birth date of the employee. Used when `nationalIDType` = `DK Foreign` for tax reporting.  # noqa: E501

        :param birth_date: The birth_date of this Employee.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def calendar_feed_key(self):
        """Gets the calendar_feed_key of this Employee.  # noqa: E501

        A key to a vacation calendar feed for this employee.  # noqa: E501

        :return: The calendar_feed_key of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._calendar_feed_key

    @calendar_feed_key.setter
    def calendar_feed_key(self, calendar_feed_key):
        """Sets the calendar_feed_key of this Employee.

        A key to a vacation calendar feed for this employee.  # noqa: E501

        :param calendar_feed_key: The calendar_feed_key of this Employee.  # noqa: E501
        :type: str
        """

        self._calendar_feed_key = calendar_feed_key

    @property
    def city(self):
        """Gets the city of this Employee.  # noqa: E501

        The city of the employee.  Required if `onboardingState` = `Final`.  # noqa: E501

        :return: The city of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Employee.

        The city of the employee.  Required if `onboardingState` = `Final`.  # noqa: E501

        :param city: The city of this Employee.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company_id(self):
        """Gets the company_id of this Employee.  # noqa: E501

        The ID of the company for this employee.  # noqa: E501

        :return: The company_id of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Employee.

        The ID of the company for this employee.  # noqa: E501

        :param company_id: The company_id of this Employee.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def country(self):
        """Gets the country of this Employee.  # noqa: E501

        The ISO-3166 code for the country of where the employee lives.  If not provided, it will default to `DK`.  Used when `nationalIDType` = `DK Foreign` for tax reporting.   # noqa: E501

        :return: The country of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Employee.

        The ISO-3166 code for the country of where the employee lives.  If not provided, it will default to `DK`.  Used when `nationalIDType` = `DK Foreign` for tax reporting.   # noqa: E501

        :param country: The country of this Employee.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def department_id(self):
        """Gets the department_id of this Employee.  # noqa: E501

        The ID of the department of the employee  # noqa: E501

        :return: The department_id of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this Employee.

        The ID of the department of the employee  # noqa: E501

        :param department_id: The department_id of this Employee.  # noqa: E501
        :type: str
        """

        self._department_id = department_id

    @property
    def earliest_mutable_contract(self):
        """Gets the earliest_mutable_contract of this Employee.  # noqa: E501


        :return: The earliest_mutable_contract of this Employee.  # noqa: E501
        :rtype: EmployeeContract
        """
        return self._earliest_mutable_contract

    @earliest_mutable_contract.setter
    def earliest_mutable_contract(self, earliest_mutable_contract):
        """Sets the earliest_mutable_contract of this Employee.


        :param earliest_mutable_contract: The earliest_mutable_contract of this Employee.  # noqa: E501
        :type: EmployeeContract
        """

        self._earliest_mutable_contract = earliest_mutable_contract

    @property
    def email(self):
        """Gets the email of this Employee.  # noqa: E501

        The e-mail of the employee.  # noqa: E501

        :return: The email of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Employee.

        The e-mail of the employee.  # noqa: E501

        :param email: The email of this Employee.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def employment_status(self):
        """Gets the employment_status of this Employee.  # noqa: E501

        The current status of the employment for this employee.  # noqa: E501

        :return: The employment_status of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this Employee.

        The current status of the employment for this employee.  # noqa: E501

        :param employment_status: The employment_status of this Employee.  # noqa: E501
        :type: str
        """
        allowed_values = ["New", "Employed", "OnLeave", "Terminated"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and employment_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status

    @property
    def gender(self):
        """Gets the gender of this Employee.  # noqa: E501

        The gender of the employee. Used when `nationalIDType` = `DK Foreign` for tax reporting.  # noqa: E501

        :return: The gender of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Employee.

        The gender of the employee. Used when `nationalIDType` = `DK Foreign` for tax reporting.  # noqa: E501

        :param gender: The gender of this Employee.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"Male", "Female", "Unknown"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and gender not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def has_pdf_password(self):
        """Gets the has_pdf_password of this Employee.  # noqa: E501

        Whether this employee has a custom PDF Password  # noqa: E501

        :return: The has_pdf_password of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._has_pdf_password

    @has_pdf_password.setter
    def has_pdf_password(self, has_pdf_password):
        """Sets the has_pdf_password of this Employee.

        Whether this employee has a custom PDF Password  # noqa: E501

        :param has_pdf_password: The has_pdf_password of this Employee.  # noqa: E501
        :type: bool
        """

        self._has_pdf_password = has_pdf_password

    @property
    def has_swipe(self):
        """Gets the has_swipe of this Employee.  # noqa: E501

        Determines wether or not this employee has access to swipe.  # noqa: E501

        :return: The has_swipe of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._has_swipe

    @has_swipe.setter
    def has_swipe(self, has_swipe):
        """Sets the has_swipe of this Employee.

        Determines wether or not this employee has access to swipe.  # noqa: E501

        :param has_swipe: The has_swipe of this Employee.  # noqa: E501
        :type: bool
        """

        self._has_swipe = has_swipe

    @property
    def has_user(self):
        """Gets the has_user of this Employee.  # noqa: E501

        Shows whether this employee has a login user for the employee app.  # noqa: E501

        :return: The has_user of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._has_user

    @has_user.setter
    def has_user(self, has_user):
        """Sets the has_user of this Employee.

        Shows whether this employee has a login user for the employee app.  # noqa: E501

        :param has_user: The has_user of this Employee.  # noqa: E501
        :type: bool
        """

        self._has_user = has_user

    @property
    def id(self):
        """Gets the id of this Employee.  # noqa: E501

        The ID of the employee  # noqa: E501

        :return: The id of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Employee.

        The ID of the employee  # noqa: E501

        :param id: The id of this Employee.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def immutable_end_date(self):
        """Gets the immutable_end_date of this Employee.  # noqa: E501

        The contract can not be edited before this date.  # noqa: E501

        :return: The immutable_end_date of this Employee.  # noqa: E501
        :rtype: date
        """
        return self._immutable_end_date

    @immutable_end_date.setter
    def immutable_end_date(self, immutable_end_date):
        """Sets the immutable_end_date of this Employee.

        The contract can not be edited before this date.  # noqa: E501

        :param immutable_end_date: The immutable_end_date of this Employee.  # noqa: E501
        :type: date
        """

        self._immutable_end_date = immutable_end_date

    @property
    def language(self):
        """Gets the language of this Employee.  # noqa: E501

        The preferred language of the employee, for the purpose of pay slips and other documents sent to the employee, only Danish and English are supported.  # noqa: E501

        :return: The language of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Employee.

        The preferred language of the employee, for the purpose of pay slips and other documents sent to the employee, only Danish and English are supported.  # noqa: E501

        :param language: The language of this Employee.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and language is None:  # noqa: E501
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        allowed_values = ["da", "en"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and language not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def locked_end_date(self):
        """Gets the locked_end_date of this Employee.  # noqa: E501

        The contract is locked up to this date. An edit before this date will recalcuate any pay rolls locking this contract.  # noqa: E501

        :return: The locked_end_date of this Employee.  # noqa: E501
        :rtype: date
        """
        return self._locked_end_date

    @locked_end_date.setter
    def locked_end_date(self, locked_end_date):
        """Sets the locked_end_date of this Employee.

        The contract is locked up to this date. An edit before this date will recalcuate any pay rolls locking this contract.  # noqa: E501

        :param locked_end_date: The locked_end_date of this Employee.  # noqa: E501
        :type: date
        """

        self._locked_end_date = locked_end_date

    @property
    def name(self):
        """Gets the name of this Employee.  # noqa: E501

        The full name of the employee.  Required if `onboardingState` = `Final`.  # noqa: E501

        :return: The name of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Employee.

        The full name of the employee.  Required if `onboardingState` = `Final`.  # noqa: E501

        :param name: The name of this Employee.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def national_id(self):
        """Gets the national_id of this Employee.  # noqa: E501

        National Identification Number.  See `nationalIDType` to change its meaning.  # noqa: E501

        :return: The national_id of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._national_id

    @national_id.setter
    def national_id(self, national_id):
        """Sets the national_id of this Employee.

        National Identification Number.  See `nationalIDType` to change its meaning.  # noqa: E501

        :param national_id: The national_id of this Employee.  # noqa: E501
        :type: str
        """

        self._national_id = national_id

    @property
    def national_id_type(self):
        """Gets the national_id_type of this Employee.  # noqa: E501

        The type of the National Identification Number.  * `DK CPR`: Is someone living in Denmark with a Danish CPR. * `DK CVR`: Is a company in Denmark with a Danish CVR. * `DK Foreign`: Is someone living abroad, but with a Danish CPR. * `DK No CPR`: Someone without a Danish CPR.  For `DK CPR`, `DK CVR` or `DK Foreign`, the field `nationalID` must be supplied. For `DK Foreign`, the fields `gender`, `country` and `birthDate` must also be supplied. For `DK No CPR`, `nationalID` should remain empty.   # noqa: E501

        :return: The national_id_type of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._national_id_type

    @national_id_type.setter
    def national_id_type(self, national_id_type):
        """Sets the national_id_type of this Employee.

        The type of the National Identification Number.  * `DK CPR`: Is someone living in Denmark with a Danish CPR. * `DK CVR`: Is a company in Denmark with a Danish CVR. * `DK Foreign`: Is someone living abroad, but with a Danish CPR. * `DK No CPR`: Someone without a Danish CPR.  For `DK CPR`, `DK CVR` or `DK Foreign`, the field `nationalID` must be supplied. For `DK Foreign`, the fields `gender`, `country` and `birthDate` must also be supplied. For `DK No CPR`, `nationalID` should remain empty.   # noqa: E501

        :param national_id_type: The national_id_type of this Employee.  # noqa: E501
        :type: str
        """
        allowed_values = ["DK CPR", "DK CVR", "DK Foreign", "DK No CPR"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and national_id_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `national_id_type` ({0}), must be one of {1}"  # noqa: E501
                .format(national_id_type, allowed_values)
            )

        self._national_id_type = national_id_type

    @property
    def onboarding_state(self):
        """Gets the onboarding_state of this Employee.  # noqa: E501

        When using self-onboarding, an employee is in state 'Draft' until the employee has entered all information.  This requires the onboarding feature for the company to be active, otherwise setting it to `Draft` will result in an error.   # noqa: E501

        :return: The onboarding_state of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._onboarding_state

    @onboarding_state.setter
    def onboarding_state(self, onboarding_state):
        """Sets the onboarding_state of this Employee.

        When using self-onboarding, an employee is in state 'Draft' until the employee has entered all information.  This requires the onboarding feature for the company to be active, otherwise setting it to `Draft` will result in an error.   # noqa: E501

        :param onboarding_state: The onboarding_state of this Employee.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"Draft", "Final"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and onboarding_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `onboarding_state` ({0}), must be one of {1}"  # noqa: E501
                .format(onboarding_state, allowed_values)
            )

        self._onboarding_state = onboarding_state

    @property
    def paid_out_this_year(self):
        """Gets the paid_out_this_year of this Employee.  # noqa: E501

        Total salary amount paid out this year to date (i.e. after taxes)  # noqa: E501

        :return: The paid_out_this_year of this Employee.  # noqa: E501
        :rtype: float
        """
        return self._paid_out_this_year

    @paid_out_this_year.setter
    def paid_out_this_year(self, paid_out_this_year):
        """Sets the paid_out_this_year of this Employee.

        Total salary amount paid out this year to date (i.e. after taxes)  # noqa: E501

        :param paid_out_this_year: The paid_out_this_year of this Employee.  # noqa: E501
        :type: float
        """

        self._paid_out_this_year = paid_out_this_year

    @property
    def pay_slip_transport_e_mail(self):
        """Gets the pay_slip_transport_e_mail of this Employee.  # noqa: E501

        Send payslip to employee via email.  # noqa: E501

        :return: The pay_slip_transport_e_mail of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_e_mail

    @pay_slip_transport_e_mail.setter
    def pay_slip_transport_e_mail(self, pay_slip_transport_e_mail):
        """Sets the pay_slip_transport_e_mail of this Employee.

        Send payslip to employee via email.  # noqa: E501

        :param pay_slip_transport_e_mail: The pay_slip_transport_e_mail of this Employee.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_e_mail = pay_slip_transport_e_mail

    @property
    def pay_slip_transport_national_inbox(self):
        """Gets the pay_slip_transport_national_inbox of this Employee.  # noqa: E501

        Send payslip to employee via national solution (eboks).  # noqa: E501

        :return: The pay_slip_transport_national_inbox of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_national_inbox

    @pay_slip_transport_national_inbox.setter
    def pay_slip_transport_national_inbox(self, pay_slip_transport_national_inbox):
        """Sets the pay_slip_transport_national_inbox of this Employee.

        Send payslip to employee via national solution (eboks).  # noqa: E501

        :param pay_slip_transport_national_inbox: The pay_slip_transport_national_inbox of this Employee.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_national_inbox = pay_slip_transport_national_inbox

    @property
    def pay_slip_transport_sms(self):
        """Gets the pay_slip_transport_sms of this Employee.  # noqa: E501

        Send payslip information via SMS.  # noqa: E501

        :return: The pay_slip_transport_sms of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_sms

    @pay_slip_transport_sms.setter
    def pay_slip_transport_sms(self, pay_slip_transport_sms):
        """Sets the pay_slip_transport_sms of this Employee.

        Send payslip information via SMS.  # noqa: E501

        :param pay_slip_transport_sms: The pay_slip_transport_sms of this Employee.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_sms = pay_slip_transport_sms

    @property
    def phone_number(self):
        """Gets the phone_number of this Employee.  # noqa: E501

        The phone number without country code for the employee.  # noqa: E501

        :return: The phone_number of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Employee.

        The phone number without country code for the employee.  # noqa: E501

        :param phone_number: The phone_number of this Employee.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_country_code(self):
        """Gets the phone_number_country_code of this Employee.  # noqa: E501

        The country code of the phone number of the employee.  # noqa: E501

        :return: The phone_number_country_code of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._phone_number_country_code

    @phone_number_country_code.setter
    def phone_number_country_code(self, phone_number_country_code):
        """Sets the phone_number_country_code of this Employee.

        The country code of the phone number of the employee.  # noqa: E501

        :param phone_number_country_code: The phone_number_country_code of this Employee.  # noqa: E501
        :type: str
        """

        self._phone_number_country_code = phone_number_country_code

    @property
    def postal_code(self):
        """Gets the postal_code of this Employee.  # noqa: E501

        The postal code of the employee.  Required if `onboardingState` = `Final`.  # noqa: E501

        :return: The postal_code of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Employee.

        The postal code of the employee.  Required if `onboardingState` = `Final`.  # noqa: E501

        :param postal_code: The postal_code of this Employee.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def profile_image_url(self):
        """Gets the profile_image_url of this Employee.  # noqa: E501

        URL to a profile image of the employee  # noqa: E501

        :return: The profile_image_url of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """Sets the profile_image_url of this Employee.

        URL to a profile image of the employee  # noqa: E501

        :param profile_image_url: The profile_image_url of this Employee.  # noqa: E501
        :type: str
        """

        self._profile_image_url = profile_image_url

    @property
    def transfer_destination_type(self):
        """Gets the transfer_destination_type of this Employee.  # noqa: E501

        The type of the destination for the salary pay out for this employee.  # noqa: E501

        :return: The transfer_destination_type of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._transfer_destination_type

    @transfer_destination_type.setter
    def transfer_destination_type(self, transfer_destination_type):
        """Sets the transfer_destination_type of this Employee.

        The type of the destination for the salary pay out for this employee.  # noqa: E501

        :param transfer_destination_type: The transfer_destination_type of this Employee.  # noqa: E501
        :type: str
        """
        allowed_values = ["DK Account", "DK NemKonto", "Foreign Account", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and transfer_destination_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `transfer_destination_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transfer_destination_type, allowed_values)
            )

        self._transfer_destination_type = transfer_destination_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Employee):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Employee):
            return True

        return self.to_dict() != other.to_dict()
