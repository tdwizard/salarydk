# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class Dashboard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accounting_integration': 'str',
        'accounting_integration_display_name': 'str',
        'car_allowances_approved': 'float',
        'car_allowances_pending': 'float',
        'cvr': 'str',
        'employee_count': 'float',
        'id': 'str',
        'leave_registrations_approved': 'float',
        'leave_registrations_pending': 'float',
        'name': 'str',
        'pay_rolls': 'list[DashboardPayRolls]',
        'payment_integration': 'str',
        'reimbursements_approved': 'float',
        'reimbursements_pending': 'float',
        'rule_pay_roll_run_approval': 'str',
        'swipe_approved': 'float',
        'swipe_enabled': 'bool',
        'swipe_pending': 'float',
        'time_registrations_approved': 'float',
        'time_registrations_pending': 'float',
        'user_count': 'float',
        'warning_count': 'float'
    }

    attribute_map = {
        'accounting_integration': 'accountingIntegration',
        'accounting_integration_display_name': 'accountingIntegrationDisplayName',
        'car_allowances_approved': 'carAllowancesApproved',
        'car_allowances_pending': 'carAllowancesPending',
        'cvr': 'cvr',
        'employee_count': 'employeeCount',
        'id': 'id',
        'leave_registrations_approved': 'leaveRegistrationsApproved',
        'leave_registrations_pending': 'leaveRegistrationsPending',
        'name': 'name',
        'pay_rolls': 'payRolls',
        'payment_integration': 'paymentIntegration',
        'reimbursements_approved': 'reimbursementsApproved',
        'reimbursements_pending': 'reimbursementsPending',
        'rule_pay_roll_run_approval': 'rulePayRollRunApproval',
        'swipe_approved': 'swipeApproved',
        'swipe_enabled': 'swipeEnabled',
        'swipe_pending': 'swipePending',
        'time_registrations_approved': 'timeRegistrationsApproved',
        'time_registrations_pending': 'timeRegistrationsPending',
        'user_count': 'userCount',
        'warning_count': 'warningCount'
    }

    def __init__(self, accounting_integration=None, accounting_integration_display_name=None, car_allowances_approved=None, car_allowances_pending=None, cvr=None, employee_count=None, id=None, leave_registrations_approved=None, leave_registrations_pending=None, name=None, pay_rolls=None, payment_integration=None, reimbursements_approved=None, reimbursements_pending=None, rule_pay_roll_run_approval=None, swipe_approved=None, swipe_enabled=None, swipe_pending=None, time_registrations_approved=None, time_registrations_pending=None, user_count=None, warning_count=None, local_vars_configuration=None):  # noqa: E501
        """Dashboard - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accounting_integration = None
        self._accounting_integration_display_name = None
        self._car_allowances_approved = None
        self._car_allowances_pending = None
        self._cvr = None
        self._employee_count = None
        self._id = None
        self._leave_registrations_approved = None
        self._leave_registrations_pending = None
        self._name = None
        self._pay_rolls = None
        self._payment_integration = None
        self._reimbursements_approved = None
        self._reimbursements_pending = None
        self._rule_pay_roll_run_approval = None
        self._swipe_approved = None
        self._swipe_enabled = None
        self._swipe_pending = None
        self._time_registrations_approved = None
        self._time_registrations_pending = None
        self._user_count = None
        self._warning_count = None
        self.discriminator = None

        if accounting_integration is not None:
            self.accounting_integration = accounting_integration
        if accounting_integration_display_name is not None:
            self.accounting_integration_display_name = accounting_integration_display_name
        self.car_allowances_approved = car_allowances_approved
        self.car_allowances_pending = car_allowances_pending
        if cvr is not None:
            self.cvr = cvr
        self.employee_count = employee_count
        if id is not None:
            self.id = id
        self.leave_registrations_approved = leave_registrations_approved
        self.leave_registrations_pending = leave_registrations_pending
        if name is not None:
            self.name = name
        if pay_rolls is not None:
            self.pay_rolls = pay_rolls
        if payment_integration is not None:
            self.payment_integration = payment_integration
        self.reimbursements_approved = reimbursements_approved
        self.reimbursements_pending = reimbursements_pending
        if rule_pay_roll_run_approval is not None:
            self.rule_pay_roll_run_approval = rule_pay_roll_run_approval
        self.swipe_approved = swipe_approved
        self.swipe_enabled = swipe_enabled
        self.swipe_pending = swipe_pending
        self.time_registrations_approved = time_registrations_approved
        self.time_registrations_pending = time_registrations_pending
        self.user_count = user_count
        self.warning_count = warning_count

    @property
    def accounting_integration(self):
        """Gets the accounting_integration of this Dashboard.  # noqa: E501


        :return: The accounting_integration of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._accounting_integration

    @accounting_integration.setter
    def accounting_integration(self, accounting_integration):
        """Sets the accounting_integration of this Dashboard.


        :param accounting_integration: The accounting_integration of this Dashboard.  # noqa: E501
        :type: str
        """

        self._accounting_integration = accounting_integration

    @property
    def accounting_integration_display_name(self):
        """Gets the accounting_integration_display_name of this Dashboard.  # noqa: E501


        :return: The accounting_integration_display_name of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._accounting_integration_display_name

    @accounting_integration_display_name.setter
    def accounting_integration_display_name(self, accounting_integration_display_name):
        """Sets the accounting_integration_display_name of this Dashboard.


        :param accounting_integration_display_name: The accounting_integration_display_name of this Dashboard.  # noqa: E501
        :type: str
        """

        self._accounting_integration_display_name = accounting_integration_display_name

    @property
    def car_allowances_approved(self):
        """Gets the car_allowances_approved of this Dashboard.  # noqa: E501


        :return: The car_allowances_approved of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._car_allowances_approved

    @car_allowances_approved.setter
    def car_allowances_approved(self, car_allowances_approved):
        """Sets the car_allowances_approved of this Dashboard.


        :param car_allowances_approved: The car_allowances_approved of this Dashboard.  # noqa: E501
        :type: float
        """

        self._car_allowances_approved = car_allowances_approved

    @property
    def car_allowances_pending(self):
        """Gets the car_allowances_pending of this Dashboard.  # noqa: E501


        :return: The car_allowances_pending of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._car_allowances_pending

    @car_allowances_pending.setter
    def car_allowances_pending(self, car_allowances_pending):
        """Sets the car_allowances_pending of this Dashboard.


        :param car_allowances_pending: The car_allowances_pending of this Dashboard.  # noqa: E501
        :type: float
        """

        self._car_allowances_pending = car_allowances_pending

    @property
    def cvr(self):
        """Gets the cvr of this Dashboard.  # noqa: E501


        :return: The cvr of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._cvr

    @cvr.setter
    def cvr(self, cvr):
        """Sets the cvr of this Dashboard.


        :param cvr: The cvr of this Dashboard.  # noqa: E501
        :type: str
        """

        self._cvr = cvr

    @property
    def employee_count(self):
        """Gets the employee_count of this Dashboard.  # noqa: E501


        :return: The employee_count of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._employee_count

    @employee_count.setter
    def employee_count(self, employee_count):
        """Sets the employee_count of this Dashboard.


        :param employee_count: The employee_count of this Dashboard.  # noqa: E501
        :type: float
        """

        self._employee_count = employee_count

    @property
    def id(self):
        """Gets the id of this Dashboard.  # noqa: E501


        :return: The id of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dashboard.


        :param id: The id of this Dashboard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def leave_registrations_approved(self):
        """Gets the leave_registrations_approved of this Dashboard.  # noqa: E501


        :return: The leave_registrations_approved of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._leave_registrations_approved

    @leave_registrations_approved.setter
    def leave_registrations_approved(self, leave_registrations_approved):
        """Sets the leave_registrations_approved of this Dashboard.


        :param leave_registrations_approved: The leave_registrations_approved of this Dashboard.  # noqa: E501
        :type: float
        """

        self._leave_registrations_approved = leave_registrations_approved

    @property
    def leave_registrations_pending(self):
        """Gets the leave_registrations_pending of this Dashboard.  # noqa: E501


        :return: The leave_registrations_pending of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._leave_registrations_pending

    @leave_registrations_pending.setter
    def leave_registrations_pending(self, leave_registrations_pending):
        """Sets the leave_registrations_pending of this Dashboard.


        :param leave_registrations_pending: The leave_registrations_pending of this Dashboard.  # noqa: E501
        :type: float
        """

        self._leave_registrations_pending = leave_registrations_pending

    @property
    def name(self):
        """Gets the name of this Dashboard.  # noqa: E501


        :return: The name of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dashboard.


        :param name: The name of this Dashboard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pay_rolls(self):
        """Gets the pay_rolls of this Dashboard.  # noqa: E501


        :return: The pay_rolls of this Dashboard.  # noqa: E501
        :rtype: list[DashboardPayRolls]
        """
        return self._pay_rolls

    @pay_rolls.setter
    def pay_rolls(self, pay_rolls):
        """Sets the pay_rolls of this Dashboard.


        :param pay_rolls: The pay_rolls of this Dashboard.  # noqa: E501
        :type: list[DashboardPayRolls]
        """

        self._pay_rolls = pay_rolls

    @property
    def payment_integration(self):
        """Gets the payment_integration of this Dashboard.  # noqa: E501


        :return: The payment_integration of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._payment_integration

    @payment_integration.setter
    def payment_integration(self, payment_integration):
        """Sets the payment_integration of this Dashboard.


        :param payment_integration: The payment_integration of this Dashboard.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "NETS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and payment_integration not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `payment_integration` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_integration, allowed_values)
            )

        self._payment_integration = payment_integration

    @property
    def reimbursements_approved(self):
        """Gets the reimbursements_approved of this Dashboard.  # noqa: E501


        :return: The reimbursements_approved of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._reimbursements_approved

    @reimbursements_approved.setter
    def reimbursements_approved(self, reimbursements_approved):
        """Sets the reimbursements_approved of this Dashboard.


        :param reimbursements_approved: The reimbursements_approved of this Dashboard.  # noqa: E501
        :type: float
        """

        self._reimbursements_approved = reimbursements_approved

    @property
    def reimbursements_pending(self):
        """Gets the reimbursements_pending of this Dashboard.  # noqa: E501


        :return: The reimbursements_pending of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._reimbursements_pending

    @reimbursements_pending.setter
    def reimbursements_pending(self, reimbursements_pending):
        """Sets the reimbursements_pending of this Dashboard.


        :param reimbursements_pending: The reimbursements_pending of this Dashboard.  # noqa: E501
        :type: float
        """

        self._reimbursements_pending = reimbursements_pending

    @property
    def rule_pay_roll_run_approval(self):
        """Gets the rule_pay_roll_run_approval of this Dashboard.  # noqa: E501


        :return: The rule_pay_roll_run_approval of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._rule_pay_roll_run_approval

    @rule_pay_roll_run_approval.setter
    def rule_pay_roll_run_approval(self, rule_pay_roll_run_approval):
        """Sets the rule_pay_roll_run_approval of this Dashboard.


        :param rule_pay_roll_run_approval: The rule_pay_roll_run_approval of this Dashboard.  # noqa: E501
        :type: str
        """
        allowed_values = ["Automatic", "Manual"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and rule_pay_roll_run_approval not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `rule_pay_roll_run_approval` ({0}), must be one of {1}"  # noqa: E501
                .format(rule_pay_roll_run_approval, allowed_values)
            )

        self._rule_pay_roll_run_approval = rule_pay_roll_run_approval

    @property
    def swipe_approved(self):
        """Gets the swipe_approved of this Dashboard.  # noqa: E501


        :return: The swipe_approved of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._swipe_approved

    @swipe_approved.setter
    def swipe_approved(self, swipe_approved):
        """Sets the swipe_approved of this Dashboard.


        :param swipe_approved: The swipe_approved of this Dashboard.  # noqa: E501
        :type: float
        """

        self._swipe_approved = swipe_approved

    @property
    def swipe_enabled(self):
        """Gets the swipe_enabled of this Dashboard.  # noqa: E501


        :return: The swipe_enabled of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._swipe_enabled

    @swipe_enabled.setter
    def swipe_enabled(self, swipe_enabled):
        """Sets the swipe_enabled of this Dashboard.


        :param swipe_enabled: The swipe_enabled of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._swipe_enabled = swipe_enabled

    @property
    def swipe_pending(self):
        """Gets the swipe_pending of this Dashboard.  # noqa: E501


        :return: The swipe_pending of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._swipe_pending

    @swipe_pending.setter
    def swipe_pending(self, swipe_pending):
        """Sets the swipe_pending of this Dashboard.


        :param swipe_pending: The swipe_pending of this Dashboard.  # noqa: E501
        :type: float
        """

        self._swipe_pending = swipe_pending

    @property
    def time_registrations_approved(self):
        """Gets the time_registrations_approved of this Dashboard.  # noqa: E501


        :return: The time_registrations_approved of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._time_registrations_approved

    @time_registrations_approved.setter
    def time_registrations_approved(self, time_registrations_approved):
        """Sets the time_registrations_approved of this Dashboard.


        :param time_registrations_approved: The time_registrations_approved of this Dashboard.  # noqa: E501
        :type: float
        """

        self._time_registrations_approved = time_registrations_approved

    @property
    def time_registrations_pending(self):
        """Gets the time_registrations_pending of this Dashboard.  # noqa: E501


        :return: The time_registrations_pending of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._time_registrations_pending

    @time_registrations_pending.setter
    def time_registrations_pending(self, time_registrations_pending):
        """Sets the time_registrations_pending of this Dashboard.


        :param time_registrations_pending: The time_registrations_pending of this Dashboard.  # noqa: E501
        :type: float
        """

        self._time_registrations_pending = time_registrations_pending

    @property
    def user_count(self):
        """Gets the user_count of this Dashboard.  # noqa: E501


        :return: The user_count of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this Dashboard.


        :param user_count: The user_count of this Dashboard.  # noqa: E501
        :type: float
        """

        self._user_count = user_count

    @property
    def warning_count(self):
        """Gets the warning_count of this Dashboard.  # noqa: E501


        :return: The warning_count of this Dashboard.  # noqa: E501
        :rtype: float
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this Dashboard.


        :param warning_count: The warning_count of this Dashboard.  # noqa: E501
        :type: float
        """

        self._warning_count = warning_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dashboard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Dashboard):
            return True

        return self.to_dict() != other.to_dict()
