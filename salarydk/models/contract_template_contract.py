# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class ContractTemplateContract(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'car_allowance_registration_method_type': 'str',
        'contract_template_id': 'str',
        'day_laborer': 'str',
        'employment_position_id': 'str',
        'id': 'str',
        'order': 'int',
        'position': 'str',
        'remuneration': 'Remuneration',
        'salary_cycle_id': 'str',
        'template_valid_from': 'date',
        'template_valid_to': 'date',
        'time_registration_method_type': 'str',
        'valid_from': 'int',
        'valid_to': 'int',
        'weekly_hours': 'float',
        'work_week': 'list'
    }

    attribute_map = {
        'car_allowance_registration_method_type': 'carAllowanceRegistrationMethodType',
        'contract_template_id': 'contractTemplateID',
        'day_laborer': 'dayLaborer',
        'employment_position_id': 'employmentPositionID',
        'id': 'id',
        'order': 'order',
        'position': 'position',
        'remuneration': 'remuneration',
        'salary_cycle_id': 'salaryCycleID',
        'template_valid_from': 'templateValidFrom',
        'template_valid_to': 'templateValidTo',
        'time_registration_method_type': 'timeRegistrationMethodType',
        'valid_from': 'validFrom',
        'valid_to': 'validTo',
        'weekly_hours': 'weeklyHours',
        'work_week': 'workWeek'
    }

    def __init__(self, car_allowance_registration_method_type='Detailed', contract_template_id=None, day_laborer=None, employment_position_id=None, id=None, order=None, position=None, remuneration=None, salary_cycle_id=None, template_valid_from=None, template_valid_to=None, time_registration_method_type='Detailed', valid_from=None, valid_to=None, weekly_hours=None, work_week=None, local_vars_configuration=None):  # noqa: E501
        """ContractTemplateContract - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._car_allowance_registration_method_type = None
        self._contract_template_id = None
        self._day_laborer = None
        self._employment_position_id = None
        self._id = None
        self._order = None
        self._position = None
        self._remuneration = None
        self._salary_cycle_id = None
        self._template_valid_from = None
        self._template_valid_to = None
        self._time_registration_method_type = None
        self._valid_from = None
        self._valid_to = None
        self._weekly_hours = None
        self._work_week = None
        self.discriminator = None

        if car_allowance_registration_method_type is not None:
            self.car_allowance_registration_method_type = car_allowance_registration_method_type
        if contract_template_id is not None:
            self.contract_template_id = contract_template_id
        self.day_laborer = day_laborer
        self.employment_position_id = employment_position_id
        if id is not None:
            self.id = id
        if order is not None:
            self.order = order
        self.position = position
        if remuneration is not None:
            self.remuneration = remuneration
        self.salary_cycle_id = salary_cycle_id
        self.template_valid_from = template_valid_from
        self.template_valid_to = template_valid_to
        if time_registration_method_type is not None:
            self.time_registration_method_type = time_registration_method_type
        self.valid_from = valid_from
        self.valid_to = valid_to
        self.weekly_hours = weekly_hours
        if work_week is not None:
            self.work_week = work_week

    @property
    def car_allowance_registration_method_type(self):
        """Gets the car_allowance_registration_method_type of this ContractTemplateContract.  # noqa: E501

        Car allowance registration method.  # noqa: E501

        :return: The car_allowance_registration_method_type of this ContractTemplateContract.  # noqa: E501
        :rtype: str
        """
        return self._car_allowance_registration_method_type

    @car_allowance_registration_method_type.setter
    def car_allowance_registration_method_type(self, car_allowance_registration_method_type):
        """Sets the car_allowance_registration_method_type of this ContractTemplateContract.

        Car allowance registration method.  # noqa: E501

        :param car_allowance_registration_method_type: The car_allowance_registration_method_type of this ContractTemplateContract.  # noqa: E501
        :type: str
        """
        allowed_values = ["Coarse", "Detailed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and car_allowance_registration_method_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `car_allowance_registration_method_type` ({0}), must be one of {1}"  # noqa: E501
                .format(car_allowance_registration_method_type, allowed_values)
            )

        self._car_allowance_registration_method_type = car_allowance_registration_method_type

    @property
    def contract_template_id(self):
        """Gets the contract_template_id of this ContractTemplateContract.  # noqa: E501

        The ID of the owning contract template.  # noqa: E501

        :return: The contract_template_id of this ContractTemplateContract.  # noqa: E501
        :rtype: str
        """
        return self._contract_template_id

    @contract_template_id.setter
    def contract_template_id(self, contract_template_id):
        """Sets the contract_template_id of this ContractTemplateContract.

        The ID of the owning contract template.  # noqa: E501

        :param contract_template_id: The contract_template_id of this ContractTemplateContract.  # noqa: E501
        :type: str
        """

        self._contract_template_id = contract_template_id

    @property
    def day_laborer(self):
        """Gets the day_laborer of this ContractTemplateContract.  # noqa: E501

        Determines whether the employee is a day laborer or not. If the employee is a day laborer, it also determines how vacation days are calculated.  # noqa: E501

        :return: The day_laborer of this ContractTemplateContract.  # noqa: E501
        :rtype: str
        """
        return self._day_laborer

    @day_laborer.setter
    def day_laborer(self, day_laborer):
        """Sets the day_laborer of this ContractTemplateContract.

        Determines whether the employee is a day laborer or not. If the employee is a day laborer, it also determines how vacation days are calculated.  # noqa: E501

        :param day_laborer: The day_laborer of this ContractTemplateContract.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"None", "Hours", "Days"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and day_laborer not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `day_laborer` ({0}), must be one of {1}"  # noqa: E501
                .format(day_laborer, allowed_values)
            )

        self._day_laborer = day_laborer

    @property
    def employment_position_id(self):
        """Gets the employment_position_id of this ContractTemplateContract.  # noqa: E501

        The id of the position. DISCO code id.  # noqa: E501

        :return: The employment_position_id of this ContractTemplateContract.  # noqa: E501
        :rtype: str
        """
        return self._employment_position_id

    @employment_position_id.setter
    def employment_position_id(self, employment_position_id):
        """Sets the employment_position_id of this ContractTemplateContract.

        The id of the position. DISCO code id.  # noqa: E501

        :param employment_position_id: The employment_position_id of this ContractTemplateContract.  # noqa: E501
        :type: str
        """

        self._employment_position_id = employment_position_id

    @property
    def id(self):
        """Gets the id of this ContractTemplateContract.  # noqa: E501

        The ID of the template contract.  # noqa: E501

        :return: The id of this ContractTemplateContract.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractTemplateContract.

        The ID of the template contract.  # noqa: E501

        :param id: The id of this ContractTemplateContract.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def order(self):
        """Gets the order of this ContractTemplateContract.  # noqa: E501

        The order of the template contract.  # noqa: E501

        :return: The order of this ContractTemplateContract.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ContractTemplateContract.

        The order of the template contract.  # noqa: E501

        :param order: The order of this ContractTemplateContract.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def position(self):
        """Gets the position of this ContractTemplateContract.  # noqa: E501

        The title of the position.  # noqa: E501

        :return: The position of this ContractTemplateContract.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ContractTemplateContract.

        The title of the position.  # noqa: E501

        :param position: The position of this ContractTemplateContract.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def remuneration(self):
        """Gets the remuneration of this ContractTemplateContract.  # noqa: E501


        :return: The remuneration of this ContractTemplateContract.  # noqa: E501
        :rtype: Remuneration
        """
        return self._remuneration

    @remuneration.setter
    def remuneration(self, remuneration):
        """Sets the remuneration of this ContractTemplateContract.


        :param remuneration: The remuneration of this ContractTemplateContract.  # noqa: E501
        :type: Remuneration
        """

        self._remuneration = remuneration

    @property
    def salary_cycle_id(self):
        """Gets the salary_cycle_id of this ContractTemplateContract.  # noqa: E501

        The id of the salary cycle.  # noqa: E501

        :return: The salary_cycle_id of this ContractTemplateContract.  # noqa: E501
        :rtype: str
        """
        return self._salary_cycle_id

    @salary_cycle_id.setter
    def salary_cycle_id(self, salary_cycle_id):
        """Sets the salary_cycle_id of this ContractTemplateContract.

        The id of the salary cycle.  # noqa: E501

        :param salary_cycle_id: The salary_cycle_id of this ContractTemplateContract.  # noqa: E501
        :type: str
        """

        self._salary_cycle_id = salary_cycle_id

    @property
    def template_valid_from(self):
        """Gets the template_valid_from of this ContractTemplateContract.  # noqa: E501

        The date where this template becomes valid  # noqa: E501

        :return: The template_valid_from of this ContractTemplateContract.  # noqa: E501
        :rtype: date
        """
        return self._template_valid_from

    @template_valid_from.setter
    def template_valid_from(self, template_valid_from):
        """Sets the template_valid_from of this ContractTemplateContract.

        The date where this template becomes valid  # noqa: E501

        :param template_valid_from: The template_valid_from of this ContractTemplateContract.  # noqa: E501
        :type: date
        """

        self._template_valid_from = template_valid_from

    @property
    def template_valid_to(self):
        """Gets the template_valid_to of this ContractTemplateContract.  # noqa: E501

        The date where this template ceases to be valid  # noqa: E501

        :return: The template_valid_to of this ContractTemplateContract.  # noqa: E501
        :rtype: date
        """
        return self._template_valid_to

    @template_valid_to.setter
    def template_valid_to(self, template_valid_to):
        """Sets the template_valid_to of this ContractTemplateContract.

        The date where this template ceases to be valid  # noqa: E501

        :param template_valid_to: The template_valid_to of this ContractTemplateContract.  # noqa: E501
        :type: date
        """

        self._template_valid_to = template_valid_to

    @property
    def time_registration_method_type(self):
        """Gets the time_registration_method_type of this ContractTemplateContract.  # noqa: E501

        Time registration method.  # noqa: E501

        :return: The time_registration_method_type of this ContractTemplateContract.  # noqa: E501
        :rtype: str
        """
        return self._time_registration_method_type

    @time_registration_method_type.setter
    def time_registration_method_type(self, time_registration_method_type):
        """Sets the time_registration_method_type of this ContractTemplateContract.

        Time registration method.  # noqa: E501

        :param time_registration_method_type: The time_registration_method_type of this ContractTemplateContract.  # noqa: E501
        :type: str
        """
        allowed_values = ["Coarse", "Detailed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and time_registration_method_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `time_registration_method_type` ({0}), must be one of {1}"  # noqa: E501
                .format(time_registration_method_type, allowed_values)
            )

        self._time_registration_method_type = time_registration_method_type

    @property
    def valid_from(self):
        """Gets the valid_from of this ContractTemplateContract.  # noqa: E501

        The number of periods from employment date the template contract is valid from, if null valid immediately.  # noqa: E501

        :return: The valid_from of this ContractTemplateContract.  # noqa: E501
        :rtype: int
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this ContractTemplateContract.

        The number of periods from employment date the template contract is valid from, if null valid immediately.  # noqa: E501

        :param valid_from: The valid_from of this ContractTemplateContract.  # noqa: E501
        :type: int
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this ContractTemplateContract.  # noqa: E501

        The number of periods from `validFrom` the template contract is valid to, if null it never runs out.  Do not use with future contracts, as the successive contracts will apply this immediately, only use this for temporary employment templates.   # noqa: E501

        :return: The valid_to of this ContractTemplateContract.  # noqa: E501
        :rtype: int
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this ContractTemplateContract.

        The number of periods from `validFrom` the template contract is valid to, if null it never runs out.  Do not use with future contracts, as the successive contracts will apply this immediately, only use this for temporary employment templates.   # noqa: E501

        :param valid_to: The valid_to of this ContractTemplateContract.  # noqa: E501
        :type: int
        """

        self._valid_to = valid_to

    @property
    def weekly_hours(self):
        """Gets the weekly_hours of this ContractTemplateContract.  # noqa: E501

        The number of work hours.  # noqa: E501

        :return: The weekly_hours of this ContractTemplateContract.  # noqa: E501
        :rtype: float
        """
        return self._weekly_hours

    @weekly_hours.setter
    def weekly_hours(self, weekly_hours):
        """Sets the weekly_hours of this ContractTemplateContract.

        The number of work hours.  # noqa: E501

        :param weekly_hours: The weekly_hours of this ContractTemplateContract.  # noqa: E501
        :type: float
        """

        self._weekly_hours = weekly_hours

    @property
    def work_week(self):
        """Gets the work_week of this ContractTemplateContract.  # noqa: E501


        :return: The work_week of this ContractTemplateContract.  # noqa: E501
        :rtype: list
        """
        return self._work_week

    @work_week.setter
    def work_week(self, work_week):
        """Sets the work_week of this ContractTemplateContract.


        :param work_week: The work_week of this ContractTemplateContract.  # noqa: E501
        :type: list
        """

        self._work_week = work_week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractTemplateContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContractTemplateContract):
            return True

        return self.to_dict() != other.to_dict()
