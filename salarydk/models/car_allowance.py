# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class CarAllowance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'approved': 'bool',
        'company_id': 'str',
        'create_return_trip': 'bool',
        'created_at': 'datetime',
        'date': 'date',
        'employee_id': 'str',
        'id': 'str',
        'immutable': 'bool',
        'kilometers': 'float',
        'license_plate': 'str',
        'location_from': 'str',
        'location_to': 'str',
        'reason': 'str',
        'settled': 'bool'
    }

    attribute_map = {
        'approved': 'approved',
        'company_id': 'companyID',
        'create_return_trip': 'createReturnTrip',
        'created_at': 'createdAt',
        'date': 'date',
        'employee_id': 'employeeID',
        'id': 'id',
        'immutable': 'immutable',
        'kilometers': 'kilometers',
        'license_plate': 'licensePlate',
        'location_from': 'locationFrom',
        'location_to': 'locationTo',
        'reason': 'reason',
        'settled': 'settled'
    }

    def __init__(self, approved=None, company_id=None, create_return_trip=None, created_at=None, date=None, employee_id=None, id=None, immutable=None, kilometers=None, license_plate=None, location_from=None, location_to=None, reason=None, settled=None, local_vars_configuration=None):  # noqa: E501
        """CarAllowance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._approved = None
        self._company_id = None
        self._create_return_trip = None
        self._created_at = None
        self._date = None
        self._employee_id = None
        self._id = None
        self._immutable = None
        self._kilometers = None
        self._license_plate = None
        self._location_from = None
        self._location_to = None
        self._reason = None
        self._settled = None
        self.discriminator = None

        if approved is not None:
            self.approved = approved
        if company_id is not None:
            self.company_id = company_id
        self.create_return_trip = create_return_trip
        if created_at is not None:
            self.created_at = created_at
        self.date = date
        if employee_id is not None:
            self.employee_id = employee_id
        if id is not None:
            self.id = id
        if immutable is not None:
            self.immutable = immutable
        self.kilometers = kilometers
        self.license_plate = license_plate
        self.location_from = location_from
        self.location_to = location_to
        self.reason = reason
        if settled is not None:
            self.settled = settled

    @property
    def approved(self):
        """Gets the approved of this CarAllowance.  # noqa: E501


        :return: The approved of this CarAllowance.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this CarAllowance.


        :param approved: The approved of this CarAllowance.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def company_id(self):
        """Gets the company_id of this CarAllowance.  # noqa: E501


        :return: The company_id of this CarAllowance.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CarAllowance.


        :param company_id: The company_id of this CarAllowance.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def create_return_trip(self):
        """Gets the create_return_trip of this CarAllowance.  # noqa: E501

        When creating, set this to also create a return trip. Requires v2.1. Deprecated from v2.2.  # noqa: E501

        :return: The create_return_trip of this CarAllowance.  # noqa: E501
        :rtype: bool
        """
        return self._create_return_trip

    @create_return_trip.setter
    def create_return_trip(self, create_return_trip):
        """Sets the create_return_trip of this CarAllowance.

        When creating, set this to also create a return trip. Requires v2.1. Deprecated from v2.2.  # noqa: E501

        :param create_return_trip: The create_return_trip of this CarAllowance.  # noqa: E501
        :type: bool
        """

        self._create_return_trip = create_return_trip

    @property
    def created_at(self):
        """Gets the created_at of this CarAllowance.  # noqa: E501


        :return: The created_at of this CarAllowance.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CarAllowance.


        :param created_at: The created_at of this CarAllowance.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def date(self):
        """Gets the date of this CarAllowance.  # noqa: E501


        :return: The date of this CarAllowance.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this CarAllowance.


        :param date: The date of this CarAllowance.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def employee_id(self):
        """Gets the employee_id of this CarAllowance.  # noqa: E501


        :return: The employee_id of this CarAllowance.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this CarAllowance.


        :param employee_id: The employee_id of this CarAllowance.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def id(self):
        """Gets the id of this CarAllowance.  # noqa: E501


        :return: The id of this CarAllowance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarAllowance.


        :param id: The id of this CarAllowance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def immutable(self):
        """Gets the immutable of this CarAllowance.  # noqa: E501

        Whether the allowance can be changed  # noqa: E501

        :return: The immutable of this CarAllowance.  # noqa: E501
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this CarAllowance.

        Whether the allowance can be changed  # noqa: E501

        :param immutable: The immutable of this CarAllowance.  # noqa: E501
        :type: bool
        """

        self._immutable = immutable

    @property
    def kilometers(self):
        """Gets the kilometers of this CarAllowance.  # noqa: E501


        :return: The kilometers of this CarAllowance.  # noqa: E501
        :rtype: float
        """
        return self._kilometers

    @kilometers.setter
    def kilometers(self, kilometers):
        """Sets the kilometers of this CarAllowance.


        :param kilometers: The kilometers of this CarAllowance.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and kilometers is None:  # noqa: E501
            raise ValueError("Invalid value for `kilometers`, must not be `None`")  # noqa: E501

        self._kilometers = kilometers

    @property
    def license_plate(self):
        """Gets the license_plate of this CarAllowance.  # noqa: E501

        The license plate of the car used  # noqa: E501

        :return: The license_plate of this CarAllowance.  # noqa: E501
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this CarAllowance.

        The license plate of the car used  # noqa: E501

        :param license_plate: The license_plate of this CarAllowance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and license_plate is None:  # noqa: E501
            raise ValueError("Invalid value for `license_plate`, must not be `None`")  # noqa: E501

        self._license_plate = license_plate

    @property
    def location_from(self):
        """Gets the location_from of this CarAllowance.  # noqa: E501

        The location the trip started  # noqa: E501

        :return: The location_from of this CarAllowance.  # noqa: E501
        :rtype: str
        """
        return self._location_from

    @location_from.setter
    def location_from(self, location_from):
        """Sets the location_from of this CarAllowance.

        The location the trip started  # noqa: E501

        :param location_from: The location_from of this CarAllowance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location_from is None:  # noqa: E501
            raise ValueError("Invalid value for `location_from`, must not be `None`")  # noqa: E501

        self._location_from = location_from

    @property
    def location_to(self):
        """Gets the location_to of this CarAllowance.  # noqa: E501

        The location the trip ended  # noqa: E501

        :return: The location_to of this CarAllowance.  # noqa: E501
        :rtype: str
        """
        return self._location_to

    @location_to.setter
    def location_to(self, location_to):
        """Sets the location_to of this CarAllowance.

        The location the trip ended  # noqa: E501

        :param location_to: The location_to of this CarAllowance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location_to is None:  # noqa: E501
            raise ValueError("Invalid value for `location_to`, must not be `None`")  # noqa: E501

        self._location_to = location_to

    @property
    def reason(self):
        """Gets the reason of this CarAllowance.  # noqa: E501

        The work-related reason for the trip  # noqa: E501

        :return: The reason of this CarAllowance.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CarAllowance.

        The work-related reason for the trip  # noqa: E501

        :param reason: The reason of this CarAllowance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reason is None:  # noqa: E501
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def settled(self):
        """Gets the settled of this CarAllowance.  # noqa: E501

        Whether the allowance has been settled  # noqa: E501

        :return: The settled of this CarAllowance.  # noqa: E501
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this CarAllowance.

        Whether the allowance has been settled  # noqa: E501

        :param settled: The settled of this CarAllowance.  # noqa: E501
        :type: bool
        """

        self._settled = settled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarAllowance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CarAllowance):
            return True

        return self.to_dict() != other.to_dict()
