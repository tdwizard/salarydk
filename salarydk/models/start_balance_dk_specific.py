# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class StartBalanceDkSpecific(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'a_income': 'float',
        'a_tax': 'float',
        'am_income': 'float',
        'am_tax': 'float',
        'car_allowance': 'StartBalanceDkSpecificCarAllowance',
        'employee_atp': 'float',
        'employer_atp': 'float',
        'extra_vacation_accrual': 'StartBalanceDkSpecificExtraVacationAccrual',
        'fritvalg': 'float',
        'personal_time_accrual': 'StartBalanceDkSpecificPersonalTimeAccrual',
        'sh_dage': 'float',
        'vacation_accrual': 'StartBalanceDkSpecificVacationAccrual',
        'vacation_basis_last_year': 'float',
        'vacation_basis_next_year': 'float',
        'vacation_basis_this_year': 'float',
        'vacation_basis_transition_year2019': 'float',
        'vacation_basis_transition_year2020': 'float',
        'vacation_fund': 'StartBalanceDkSpecificVacationFund',
        'vacation_no_pay': 'StartBalanceDkSpecificVacationNoPay',
        'vacation_optional': 'StartBalanceDkSpecificVacationOptional',
        'vacation_paid': 'StartBalanceDkSpecificVacationPaid',
        'vacation_paid_additional': 'StartBalanceDkSpecificVacationPaidAdditional',
        'vacation_personal_days': 'StartBalanceDkSpecificVacationPersonalDays'
    }

    attribute_map = {
        'a_income': 'aIncome',
        'a_tax': 'aTax',
        'am_income': 'amIncome',
        'am_tax': 'amTax',
        'car_allowance': 'carAllowance',
        'employee_atp': 'employeeATP',
        'employer_atp': 'employerATP',
        'extra_vacation_accrual': 'extraVacationAccrual',
        'fritvalg': 'fritvalg',
        'personal_time_accrual': 'personalTimeAccrual',
        'sh_dage': 'shDage',
        'vacation_accrual': 'vacationAccrual',
        'vacation_basis_last_year': 'vacationBasisLastYear',
        'vacation_basis_next_year': 'vacationBasisNextYear',
        'vacation_basis_this_year': 'vacationBasisThisYear',
        'vacation_basis_transition_year2019': 'vacationBasisTransitionYear2019',
        'vacation_basis_transition_year2020': 'vacationBasisTransitionYear2020',
        'vacation_fund': 'vacationFund',
        'vacation_no_pay': 'vacationNoPay',
        'vacation_optional': 'vacationOptional',
        'vacation_paid': 'vacationPaid',
        'vacation_paid_additional': 'vacationPaidAdditional',
        'vacation_personal_days': 'vacationPersonalDays'
    }

    def __init__(self, a_income=None, a_tax=None, am_income=None, am_tax=None, car_allowance=None, employee_atp=None, employer_atp=None, extra_vacation_accrual=None, fritvalg=None, personal_time_accrual=None, sh_dage=None, vacation_accrual=None, vacation_basis_last_year=None, vacation_basis_next_year=None, vacation_basis_this_year=None, vacation_basis_transition_year2019=None, vacation_basis_transition_year2020=None, vacation_fund=None, vacation_no_pay=None, vacation_optional=None, vacation_paid=None, vacation_paid_additional=None, vacation_personal_days=None, local_vars_configuration=None):  # noqa: E501
        """StartBalanceDkSpecific - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._a_income = None
        self._a_tax = None
        self._am_income = None
        self._am_tax = None
        self._car_allowance = None
        self._employee_atp = None
        self._employer_atp = None
        self._extra_vacation_accrual = None
        self._fritvalg = None
        self._personal_time_accrual = None
        self._sh_dage = None
        self._vacation_accrual = None
        self._vacation_basis_last_year = None
        self._vacation_basis_next_year = None
        self._vacation_basis_this_year = None
        self._vacation_basis_transition_year2019 = None
        self._vacation_basis_transition_year2020 = None
        self._vacation_fund = None
        self._vacation_no_pay = None
        self._vacation_optional = None
        self._vacation_paid = None
        self._vacation_paid_additional = None
        self._vacation_personal_days = None
        self.discriminator = None

        if a_income is not None:
            self.a_income = a_income
        if a_tax is not None:
            self.a_tax = a_tax
        if am_income is not None:
            self.am_income = am_income
        if am_tax is not None:
            self.am_tax = am_tax
        if car_allowance is not None:
            self.car_allowance = car_allowance
        if employee_atp is not None:
            self.employee_atp = employee_atp
        if employer_atp is not None:
            self.employer_atp = employer_atp
        if extra_vacation_accrual is not None:
            self.extra_vacation_accrual = extra_vacation_accrual
        if fritvalg is not None:
            self.fritvalg = fritvalg
        if personal_time_accrual is not None:
            self.personal_time_accrual = personal_time_accrual
        if sh_dage is not None:
            self.sh_dage = sh_dage
        if vacation_accrual is not None:
            self.vacation_accrual = vacation_accrual
        if vacation_basis_last_year is not None:
            self.vacation_basis_last_year = vacation_basis_last_year
        if vacation_basis_next_year is not None:
            self.vacation_basis_next_year = vacation_basis_next_year
        if vacation_basis_this_year is not None:
            self.vacation_basis_this_year = vacation_basis_this_year
        if vacation_basis_transition_year2019 is not None:
            self.vacation_basis_transition_year2019 = vacation_basis_transition_year2019
        if vacation_basis_transition_year2020 is not None:
            self.vacation_basis_transition_year2020 = vacation_basis_transition_year2020
        if vacation_fund is not None:
            self.vacation_fund = vacation_fund
        if vacation_no_pay is not None:
            self.vacation_no_pay = vacation_no_pay
        if vacation_optional is not None:
            self.vacation_optional = vacation_optional
        if vacation_paid is not None:
            self.vacation_paid = vacation_paid
        if vacation_paid_additional is not None:
            self.vacation_paid_additional = vacation_paid_additional
        if vacation_personal_days is not None:
            self.vacation_personal_days = vacation_personal_days

    @property
    def a_income(self):
        """Gets the a_income of this StartBalanceDkSpecific.  # noqa: E501


        :return: The a_income of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._a_income

    @a_income.setter
    def a_income(self, a_income):
        """Sets the a_income of this StartBalanceDkSpecific.


        :param a_income: The a_income of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._a_income = a_income

    @property
    def a_tax(self):
        """Gets the a_tax of this StartBalanceDkSpecific.  # noqa: E501


        :return: The a_tax of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._a_tax

    @a_tax.setter
    def a_tax(self, a_tax):
        """Sets the a_tax of this StartBalanceDkSpecific.


        :param a_tax: The a_tax of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._a_tax = a_tax

    @property
    def am_income(self):
        """Gets the am_income of this StartBalanceDkSpecific.  # noqa: E501


        :return: The am_income of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._am_income

    @am_income.setter
    def am_income(self, am_income):
        """Sets the am_income of this StartBalanceDkSpecific.


        :param am_income: The am_income of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._am_income = am_income

    @property
    def am_tax(self):
        """Gets the am_tax of this StartBalanceDkSpecific.  # noqa: E501


        :return: The am_tax of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._am_tax

    @am_tax.setter
    def am_tax(self, am_tax):
        """Sets the am_tax of this StartBalanceDkSpecific.


        :param am_tax: The am_tax of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._am_tax = am_tax

    @property
    def car_allowance(self):
        """Gets the car_allowance of this StartBalanceDkSpecific.  # noqa: E501


        :return: The car_allowance of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificCarAllowance
        """
        return self._car_allowance

    @car_allowance.setter
    def car_allowance(self, car_allowance):
        """Sets the car_allowance of this StartBalanceDkSpecific.


        :param car_allowance: The car_allowance of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificCarAllowance
        """

        self._car_allowance = car_allowance

    @property
    def employee_atp(self):
        """Gets the employee_atp of this StartBalanceDkSpecific.  # noqa: E501


        :return: The employee_atp of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._employee_atp

    @employee_atp.setter
    def employee_atp(self, employee_atp):
        """Sets the employee_atp of this StartBalanceDkSpecific.


        :param employee_atp: The employee_atp of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._employee_atp = employee_atp

    @property
    def employer_atp(self):
        """Gets the employer_atp of this StartBalanceDkSpecific.  # noqa: E501


        :return: The employer_atp of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._employer_atp

    @employer_atp.setter
    def employer_atp(self, employer_atp):
        """Sets the employer_atp of this StartBalanceDkSpecific.


        :param employer_atp: The employer_atp of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._employer_atp = employer_atp

    @property
    def extra_vacation_accrual(self):
        """Gets the extra_vacation_accrual of this StartBalanceDkSpecific.  # noqa: E501


        :return: The extra_vacation_accrual of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificExtraVacationAccrual
        """
        return self._extra_vacation_accrual

    @extra_vacation_accrual.setter
    def extra_vacation_accrual(self, extra_vacation_accrual):
        """Sets the extra_vacation_accrual of this StartBalanceDkSpecific.


        :param extra_vacation_accrual: The extra_vacation_accrual of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificExtraVacationAccrual
        """

        self._extra_vacation_accrual = extra_vacation_accrual

    @property
    def fritvalg(self):
        """Gets the fritvalg of this StartBalanceDkSpecific.  # noqa: E501


        :return: The fritvalg of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._fritvalg

    @fritvalg.setter
    def fritvalg(self, fritvalg):
        """Sets the fritvalg of this StartBalanceDkSpecific.


        :param fritvalg: The fritvalg of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._fritvalg = fritvalg

    @property
    def personal_time_accrual(self):
        """Gets the personal_time_accrual of this StartBalanceDkSpecific.  # noqa: E501


        :return: The personal_time_accrual of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificPersonalTimeAccrual
        """
        return self._personal_time_accrual

    @personal_time_accrual.setter
    def personal_time_accrual(self, personal_time_accrual):
        """Sets the personal_time_accrual of this StartBalanceDkSpecific.


        :param personal_time_accrual: The personal_time_accrual of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificPersonalTimeAccrual
        """

        self._personal_time_accrual = personal_time_accrual

    @property
    def sh_dage(self):
        """Gets the sh_dage of this StartBalanceDkSpecific.  # noqa: E501


        :return: The sh_dage of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._sh_dage

    @sh_dage.setter
    def sh_dage(self, sh_dage):
        """Sets the sh_dage of this StartBalanceDkSpecific.


        :param sh_dage: The sh_dage of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._sh_dage = sh_dage

    @property
    def vacation_accrual(self):
        """Gets the vacation_accrual of this StartBalanceDkSpecific.  # noqa: E501


        :return: The vacation_accrual of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificVacationAccrual
        """
        return self._vacation_accrual

    @vacation_accrual.setter
    def vacation_accrual(self, vacation_accrual):
        """Sets the vacation_accrual of this StartBalanceDkSpecific.


        :param vacation_accrual: The vacation_accrual of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificVacationAccrual
        """

        self._vacation_accrual = vacation_accrual

    @property
    def vacation_basis_last_year(self):
        """Gets the vacation_basis_last_year of this StartBalanceDkSpecific.  # noqa: E501

        Ferieberettiget løn sidste år  # noqa: E501

        :return: The vacation_basis_last_year of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._vacation_basis_last_year

    @vacation_basis_last_year.setter
    def vacation_basis_last_year(self, vacation_basis_last_year):
        """Sets the vacation_basis_last_year of this StartBalanceDkSpecific.

        Ferieberettiget løn sidste år  # noqa: E501

        :param vacation_basis_last_year: The vacation_basis_last_year of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._vacation_basis_last_year = vacation_basis_last_year

    @property
    def vacation_basis_next_year(self):
        """Gets the vacation_basis_next_year of this StartBalanceDkSpecific.  # noqa: E501

        Ferieberettiget løn næste år  # noqa: E501

        :return: The vacation_basis_next_year of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._vacation_basis_next_year

    @vacation_basis_next_year.setter
    def vacation_basis_next_year(self, vacation_basis_next_year):
        """Sets the vacation_basis_next_year of this StartBalanceDkSpecific.

        Ferieberettiget løn næste år  # noqa: E501

        :param vacation_basis_next_year: The vacation_basis_next_year of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._vacation_basis_next_year = vacation_basis_next_year

    @property
    def vacation_basis_this_year(self):
        """Gets the vacation_basis_this_year of this StartBalanceDkSpecific.  # noqa: E501

        Ferieberettiget løn i år  # noqa: E501

        :return: The vacation_basis_this_year of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._vacation_basis_this_year

    @vacation_basis_this_year.setter
    def vacation_basis_this_year(self, vacation_basis_this_year):
        """Sets the vacation_basis_this_year of this StartBalanceDkSpecific.

        Ferieberettiget løn i år  # noqa: E501

        :param vacation_basis_this_year: The vacation_basis_this_year of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._vacation_basis_this_year = vacation_basis_this_year

    @property
    def vacation_basis_transition_year2019(self):
        """Gets the vacation_basis_transition_year2019 of this StartBalanceDkSpecific.  # noqa: E501

        Ferieberettiget løn overgangsår 2019-09-01 til 2019-12-31  # noqa: E501

        :return: The vacation_basis_transition_year2019 of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._vacation_basis_transition_year2019

    @vacation_basis_transition_year2019.setter
    def vacation_basis_transition_year2019(self, vacation_basis_transition_year2019):
        """Sets the vacation_basis_transition_year2019 of this StartBalanceDkSpecific.

        Ferieberettiget løn overgangsår 2019-09-01 til 2019-12-31  # noqa: E501

        :param vacation_basis_transition_year2019: The vacation_basis_transition_year2019 of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._vacation_basis_transition_year2019 = vacation_basis_transition_year2019

    @property
    def vacation_basis_transition_year2020(self):
        """Gets the vacation_basis_transition_year2020 of this StartBalanceDkSpecific.  # noqa: E501

        Ferieberettiget løn overgangsår 2020-01-01 til 2020-08-31  # noqa: E501

        :return: The vacation_basis_transition_year2020 of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: float
        """
        return self._vacation_basis_transition_year2020

    @vacation_basis_transition_year2020.setter
    def vacation_basis_transition_year2020(self, vacation_basis_transition_year2020):
        """Sets the vacation_basis_transition_year2020 of this StartBalanceDkSpecific.

        Ferieberettiget løn overgangsår 2020-01-01 til 2020-08-31  # noqa: E501

        :param vacation_basis_transition_year2020: The vacation_basis_transition_year2020 of this StartBalanceDkSpecific.  # noqa: E501
        :type: float
        """

        self._vacation_basis_transition_year2020 = vacation_basis_transition_year2020

    @property
    def vacation_fund(self):
        """Gets the vacation_fund of this StartBalanceDkSpecific.  # noqa: E501


        :return: The vacation_fund of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificVacationFund
        """
        return self._vacation_fund

    @vacation_fund.setter
    def vacation_fund(self, vacation_fund):
        """Sets the vacation_fund of this StartBalanceDkSpecific.


        :param vacation_fund: The vacation_fund of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificVacationFund
        """

        self._vacation_fund = vacation_fund

    @property
    def vacation_no_pay(self):
        """Gets the vacation_no_pay of this StartBalanceDkSpecific.  # noqa: E501


        :return: The vacation_no_pay of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificVacationNoPay
        """
        return self._vacation_no_pay

    @vacation_no_pay.setter
    def vacation_no_pay(self, vacation_no_pay):
        """Sets the vacation_no_pay of this StartBalanceDkSpecific.


        :param vacation_no_pay: The vacation_no_pay of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificVacationNoPay
        """

        self._vacation_no_pay = vacation_no_pay

    @property
    def vacation_optional(self):
        """Gets the vacation_optional of this StartBalanceDkSpecific.  # noqa: E501


        :return: The vacation_optional of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificVacationOptional
        """
        return self._vacation_optional

    @vacation_optional.setter
    def vacation_optional(self, vacation_optional):
        """Sets the vacation_optional of this StartBalanceDkSpecific.


        :param vacation_optional: The vacation_optional of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificVacationOptional
        """

        self._vacation_optional = vacation_optional

    @property
    def vacation_paid(self):
        """Gets the vacation_paid of this StartBalanceDkSpecific.  # noqa: E501


        :return: The vacation_paid of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificVacationPaid
        """
        return self._vacation_paid

    @vacation_paid.setter
    def vacation_paid(self, vacation_paid):
        """Sets the vacation_paid of this StartBalanceDkSpecific.


        :param vacation_paid: The vacation_paid of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificVacationPaid
        """

        self._vacation_paid = vacation_paid

    @property
    def vacation_paid_additional(self):
        """Gets the vacation_paid_additional of this StartBalanceDkSpecific.  # noqa: E501


        :return: The vacation_paid_additional of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificVacationPaidAdditional
        """
        return self._vacation_paid_additional

    @vacation_paid_additional.setter
    def vacation_paid_additional(self, vacation_paid_additional):
        """Sets the vacation_paid_additional of this StartBalanceDkSpecific.


        :param vacation_paid_additional: The vacation_paid_additional of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificVacationPaidAdditional
        """

        self._vacation_paid_additional = vacation_paid_additional

    @property
    def vacation_personal_days(self):
        """Gets the vacation_personal_days of this StartBalanceDkSpecific.  # noqa: E501


        :return: The vacation_personal_days of this StartBalanceDkSpecific.  # noqa: E501
        :rtype: StartBalanceDkSpecificVacationPersonalDays
        """
        return self._vacation_personal_days

    @vacation_personal_days.setter
    def vacation_personal_days(self, vacation_personal_days):
        """Sets the vacation_personal_days of this StartBalanceDkSpecific.


        :param vacation_personal_days: The vacation_personal_days of this StartBalanceDkSpecific.  # noqa: E501
        :type: StartBalanceDkSpecificVacationPersonalDays
        """

        self._vacation_personal_days = vacation_personal_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartBalanceDkSpecific):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StartBalanceDkSpecific):
            return True

        return self.to_dict() != other.to_dict()
