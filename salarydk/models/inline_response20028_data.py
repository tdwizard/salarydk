# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class InlineResponse20028Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'agreements': 'list[Agreement]',
        'companies': 'list[Company]',
        'company_features': 'list[CompanyFeature]',
        'company_pricing_packages': 'list[CompanyPricingPackage]',
        'company_pricings': 'list[CompanyPricing]',
        'cost_centers': 'list[CostCenter]',
        'current_time': 'datetime',
        'departments': 'list[Department]',
        'employees': 'list[Employee]',
        'leave_types': 'list[LeaveType]',
        'pricing_packages': 'list[PricingPackage]',
        'salary_types': 'list[SalaryType]',
        'supplement_types': 'list[SupplementType]',
        'user': 'User',
        'user_companies': 'list[UserCompany]',
        'user_departments': 'list[UserDepartment]'
    }

    attribute_map = {
        'agreements': 'agreements',
        'companies': 'companies',
        'company_features': 'companyFeatures',
        'company_pricing_packages': 'companyPricingPackages',
        'company_pricings': 'companyPricings',
        'cost_centers': 'costCenters',
        'current_time': 'currentTime',
        'departments': 'departments',
        'employees': 'employees',
        'leave_types': 'leaveTypes',
        'pricing_packages': 'pricingPackages',
        'salary_types': 'salaryTypes',
        'supplement_types': 'supplementTypes',
        'user': 'user',
        'user_companies': 'userCompanies',
        'user_departments': 'userDepartments'
    }

    def __init__(self, agreements=None, companies=None, company_features=None, company_pricing_packages=None, company_pricings=None, cost_centers=None, current_time=None, departments=None, employees=None, leave_types=None, pricing_packages=None, salary_types=None, supplement_types=None, user=None, user_companies=None, user_departments=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20028Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._agreements = None
        self._companies = None
        self._company_features = None
        self._company_pricing_packages = None
        self._company_pricings = None
        self._cost_centers = None
        self._current_time = None
        self._departments = None
        self._employees = None
        self._leave_types = None
        self._pricing_packages = None
        self._salary_types = None
        self._supplement_types = None
        self._user = None
        self._user_companies = None
        self._user_departments = None
        self.discriminator = None

        if agreements is not None:
            self.agreements = agreements
        self.companies = companies
        if company_features is not None:
            self.company_features = company_features
        if company_pricing_packages is not None:
            self.company_pricing_packages = company_pricing_packages
        if company_pricings is not None:
            self.company_pricings = company_pricings
        if cost_centers is not None:
            self.cost_centers = cost_centers
        self.current_time = current_time
        if departments is not None:
            self.departments = departments
        if employees is not None:
            self.employees = employees
        if leave_types is not None:
            self.leave_types = leave_types
        if pricing_packages is not None:
            self.pricing_packages = pricing_packages
        if salary_types is not None:
            self.salary_types = salary_types
        if supplement_types is not None:
            self.supplement_types = supplement_types
        self.user = user
        self.user_companies = user_companies
        if user_departments is not None:
            self.user_departments = user_departments

    @property
    def agreements(self):
        """Gets the agreements of this InlineResponse20028Data.  # noqa: E501


        :return: The agreements of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[Agreement]
        """
        return self._agreements

    @agreements.setter
    def agreements(self, agreements):
        """Sets the agreements of this InlineResponse20028Data.


        :param agreements: The agreements of this InlineResponse20028Data.  # noqa: E501
        :type: list[Agreement]
        """

        self._agreements = agreements

    @property
    def companies(self):
        """Gets the companies of this InlineResponse20028Data.  # noqa: E501


        :return: The companies of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[Company]
        """
        return self._companies

    @companies.setter
    def companies(self, companies):
        """Sets the companies of this InlineResponse20028Data.


        :param companies: The companies of this InlineResponse20028Data.  # noqa: E501
        :type: list[Company]
        """
        if self.local_vars_configuration.client_side_validation and companies is None:  # noqa: E501
            raise ValueError("Invalid value for `companies`, must not be `None`")  # noqa: E501

        self._companies = companies

    @property
    def company_features(self):
        """Gets the company_features of this InlineResponse20028Data.  # noqa: E501


        :return: The company_features of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[CompanyFeature]
        """
        return self._company_features

    @company_features.setter
    def company_features(self, company_features):
        """Sets the company_features of this InlineResponse20028Data.


        :param company_features: The company_features of this InlineResponse20028Data.  # noqa: E501
        :type: list[CompanyFeature]
        """

        self._company_features = company_features

    @property
    def company_pricing_packages(self):
        """Gets the company_pricing_packages of this InlineResponse20028Data.  # noqa: E501


        :return: The company_pricing_packages of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[CompanyPricingPackage]
        """
        return self._company_pricing_packages

    @company_pricing_packages.setter
    def company_pricing_packages(self, company_pricing_packages):
        """Sets the company_pricing_packages of this InlineResponse20028Data.


        :param company_pricing_packages: The company_pricing_packages of this InlineResponse20028Data.  # noqa: E501
        :type: list[CompanyPricingPackage]
        """

        self._company_pricing_packages = company_pricing_packages

    @property
    def company_pricings(self):
        """Gets the company_pricings of this InlineResponse20028Data.  # noqa: E501


        :return: The company_pricings of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[CompanyPricing]
        """
        return self._company_pricings

    @company_pricings.setter
    def company_pricings(self, company_pricings):
        """Sets the company_pricings of this InlineResponse20028Data.


        :param company_pricings: The company_pricings of this InlineResponse20028Data.  # noqa: E501
        :type: list[CompanyPricing]
        """

        self._company_pricings = company_pricings

    @property
    def cost_centers(self):
        """Gets the cost_centers of this InlineResponse20028Data.  # noqa: E501


        :return: The cost_centers of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[CostCenter]
        """
        return self._cost_centers

    @cost_centers.setter
    def cost_centers(self, cost_centers):
        """Sets the cost_centers of this InlineResponse20028Data.


        :param cost_centers: The cost_centers of this InlineResponse20028Data.  # noqa: E501
        :type: list[CostCenter]
        """

        self._cost_centers = cost_centers

    @property
    def current_time(self):
        """Gets the current_time of this InlineResponse20028Data.  # noqa: E501


        :return: The current_time of this InlineResponse20028Data.  # noqa: E501
        :rtype: datetime
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this InlineResponse20028Data.


        :param current_time: The current_time of this InlineResponse20028Data.  # noqa: E501
        :type: datetime
        """

        self._current_time = current_time

    @property
    def departments(self):
        """Gets the departments of this InlineResponse20028Data.  # noqa: E501


        :return: The departments of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[Department]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this InlineResponse20028Data.


        :param departments: The departments of this InlineResponse20028Data.  # noqa: E501
        :type: list[Department]
        """

        self._departments = departments

    @property
    def employees(self):
        """Gets the employees of this InlineResponse20028Data.  # noqa: E501


        :return: The employees of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[Employee]
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this InlineResponse20028Data.


        :param employees: The employees of this InlineResponse20028Data.  # noqa: E501
        :type: list[Employee]
        """

        self._employees = employees

    @property
    def leave_types(self):
        """Gets the leave_types of this InlineResponse20028Data.  # noqa: E501


        :return: The leave_types of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[LeaveType]
        """
        return self._leave_types

    @leave_types.setter
    def leave_types(self, leave_types):
        """Sets the leave_types of this InlineResponse20028Data.


        :param leave_types: The leave_types of this InlineResponse20028Data.  # noqa: E501
        :type: list[LeaveType]
        """

        self._leave_types = leave_types

    @property
    def pricing_packages(self):
        """Gets the pricing_packages of this InlineResponse20028Data.  # noqa: E501


        :return: The pricing_packages of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[PricingPackage]
        """
        return self._pricing_packages

    @pricing_packages.setter
    def pricing_packages(self, pricing_packages):
        """Sets the pricing_packages of this InlineResponse20028Data.


        :param pricing_packages: The pricing_packages of this InlineResponse20028Data.  # noqa: E501
        :type: list[PricingPackage]
        """

        self._pricing_packages = pricing_packages

    @property
    def salary_types(self):
        """Gets the salary_types of this InlineResponse20028Data.  # noqa: E501


        :return: The salary_types of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[SalaryType]
        """
        return self._salary_types

    @salary_types.setter
    def salary_types(self, salary_types):
        """Sets the salary_types of this InlineResponse20028Data.


        :param salary_types: The salary_types of this InlineResponse20028Data.  # noqa: E501
        :type: list[SalaryType]
        """

        self._salary_types = salary_types

    @property
    def supplement_types(self):
        """Gets the supplement_types of this InlineResponse20028Data.  # noqa: E501


        :return: The supplement_types of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[SupplementType]
        """
        return self._supplement_types

    @supplement_types.setter
    def supplement_types(self, supplement_types):
        """Sets the supplement_types of this InlineResponse20028Data.


        :param supplement_types: The supplement_types of this InlineResponse20028Data.  # noqa: E501
        :type: list[SupplementType]
        """

        self._supplement_types = supplement_types

    @property
    def user(self):
        """Gets the user of this InlineResponse20028Data.  # noqa: E501


        :return: The user of this InlineResponse20028Data.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InlineResponse20028Data.


        :param user: The user of this InlineResponse20028Data.  # noqa: E501
        :type: User
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def user_companies(self):
        """Gets the user_companies of this InlineResponse20028Data.  # noqa: E501


        :return: The user_companies of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[UserCompany]
        """
        return self._user_companies

    @user_companies.setter
    def user_companies(self, user_companies):
        """Sets the user_companies of this InlineResponse20028Data.


        :param user_companies: The user_companies of this InlineResponse20028Data.  # noqa: E501
        :type: list[UserCompany]
        """
        if self.local_vars_configuration.client_side_validation and user_companies is None:  # noqa: E501
            raise ValueError("Invalid value for `user_companies`, must not be `None`")  # noqa: E501

        self._user_companies = user_companies

    @property
    def user_departments(self):
        """Gets the user_departments of this InlineResponse20028Data.  # noqa: E501

        A list of user departments for the current user and the current company  # noqa: E501

        :return: The user_departments of this InlineResponse20028Data.  # noqa: E501
        :rtype: list[UserDepartment]
        """
        return self._user_departments

    @user_departments.setter
    def user_departments(self, user_departments):
        """Sets the user_departments of this InlineResponse20028Data.

        A list of user departments for the current user and the current company  # noqa: E501

        :param user_departments: The user_departments of this InlineResponse20028Data.  # noqa: E501
        :type: list[UserDepartment]
        """

        self._user_departments = user_departments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20028Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20028Data):
            return True

        return self.to_dict() != other.to_dict()
