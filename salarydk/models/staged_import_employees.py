# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class StagedImportEmployees(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'affiliation_type': 'str',
        'bank_account_number': 'str',
        'bank_registration_number': 'str',
        'city': 'str',
        'coarse_car_allowances': 'list[CoarseCarAllowance]',
        'coarse_salary_registrations': 'list[CoarseSalaryRegistration]',
        'coarse_time_registrations': 'list[CoarseTimeRegistration]',
        'email': 'str',
        'employee_id': 'str',
        'employee_number': 'str',
        'employment_start_date': 'date',
        'errors': 'list[StagedImportError]',
        'hours': 'float',
        'leave_adjustments': 'list[LeaveAdjustment]',
        'name': 'str',
        'national_id': 'str',
        'one_time_pays': 'list[OneTimePay]',
        'pay_slip_transport_e_mail': 'bool',
        'pay_slip_transport_national_inbox': 'bool',
        'pay_slip_transport_sms_notification': 'bool',
        'phone_number': 'str',
        'phone_number_country_code': 'str',
        'position': 'str',
        'postal_code': 'str',
        'preferred_tax_card_type': 'str',
        'production_unit_id': 'str',
        'remuneration': 'Remuneration',
        'salary_changes': 'list[SalaryDefinition]',
        'salary_cycle_id': 'str',
        'start_balances': 'StartBalance',
        'work_days': 'float'
    }

    attribute_map = {
        'address': 'address',
        'affiliation_type': 'affiliationType',
        'bank_account_number': 'bankAccountNumber',
        'bank_registration_number': 'bankRegistrationNumber',
        'city': 'city',
        'coarse_car_allowances': 'coarseCarAllowances',
        'coarse_salary_registrations': 'coarseSalaryRegistrations',
        'coarse_time_registrations': 'coarseTimeRegistrations',
        'email': 'email',
        'employee_id': 'employeeID',
        'employee_number': 'employeeNumber',
        'employment_start_date': 'employmentStartDate',
        'errors': 'errors',
        'hours': 'hours',
        'leave_adjustments': 'leaveAdjustments',
        'name': 'name',
        'national_id': 'nationalID',
        'one_time_pays': 'oneTimePays',
        'pay_slip_transport_e_mail': 'paySlipTransportEMail',
        'pay_slip_transport_national_inbox': 'paySlipTransportNationalInbox',
        'pay_slip_transport_sms_notification': 'paySlipTransportSMSNotification',
        'phone_number': 'phoneNumber',
        'phone_number_country_code': 'phoneNumberCountryCode',
        'position': 'position',
        'postal_code': 'postalCode',
        'preferred_tax_card_type': 'preferredTaxCardType',
        'production_unit_id': 'productionUnitID',
        'remuneration': 'remuneration',
        'salary_changes': 'salaryChanges',
        'salary_cycle_id': 'salaryCycleID',
        'start_balances': 'startBalances',
        'work_days': 'workDays'
    }

    def __init__(self, address=None, affiliation_type=None, bank_account_number=None, bank_registration_number=None, city=None, coarse_car_allowances=None, coarse_salary_registrations=None, coarse_time_registrations=None, email=None, employee_id=None, employee_number=None, employment_start_date=None, errors=None, hours=None, leave_adjustments=None, name=None, national_id=None, one_time_pays=None, pay_slip_transport_e_mail=None, pay_slip_transport_national_inbox=None, pay_slip_transport_sms_notification=None, phone_number=None, phone_number_country_code=None, position=None, postal_code=None, preferred_tax_card_type=None, production_unit_id=None, remuneration=None, salary_changes=None, salary_cycle_id=None, start_balances=None, work_days=None, local_vars_configuration=None):  # noqa: E501
        """StagedImportEmployees - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._affiliation_type = None
        self._bank_account_number = None
        self._bank_registration_number = None
        self._city = None
        self._coarse_car_allowances = None
        self._coarse_salary_registrations = None
        self._coarse_time_registrations = None
        self._email = None
        self._employee_id = None
        self._employee_number = None
        self._employment_start_date = None
        self._errors = None
        self._hours = None
        self._leave_adjustments = None
        self._name = None
        self._national_id = None
        self._one_time_pays = None
        self._pay_slip_transport_e_mail = None
        self._pay_slip_transport_national_inbox = None
        self._pay_slip_transport_sms_notification = None
        self._phone_number = None
        self._phone_number_country_code = None
        self._position = None
        self._postal_code = None
        self._preferred_tax_card_type = None
        self._production_unit_id = None
        self._remuneration = None
        self._salary_changes = None
        self._salary_cycle_id = None
        self._start_balances = None
        self._work_days = None
        self.discriminator = None

        self.address = address
        self.affiliation_type = affiliation_type
        self.bank_account_number = bank_account_number
        self.bank_registration_number = bank_registration_number
        self.city = city
        if coarse_car_allowances is not None:
            self.coarse_car_allowances = coarse_car_allowances
        if coarse_salary_registrations is not None:
            self.coarse_salary_registrations = coarse_salary_registrations
        if coarse_time_registrations is not None:
            self.coarse_time_registrations = coarse_time_registrations
        self.email = email
        self.employee_id = employee_id
        self.employee_number = employee_number
        self.employment_start_date = employment_start_date
        if errors is not None:
            self.errors = errors
        self.hours = hours
        if leave_adjustments is not None:
            self.leave_adjustments = leave_adjustments
        self.name = name
        self.national_id = national_id
        if one_time_pays is not None:
            self.one_time_pays = one_time_pays
        self.pay_slip_transport_e_mail = pay_slip_transport_e_mail
        self.pay_slip_transport_national_inbox = pay_slip_transport_national_inbox
        self.pay_slip_transport_sms_notification = pay_slip_transport_sms_notification
        self.phone_number = phone_number
        self.phone_number_country_code = phone_number_country_code
        self.position = position
        self.postal_code = postal_code
        self.preferred_tax_card_type = preferred_tax_card_type
        self.production_unit_id = production_unit_id
        if remuneration is not None:
            self.remuneration = remuneration
        if salary_changes is not None:
            self.salary_changes = salary_changes
        self.salary_cycle_id = salary_cycle_id
        if start_balances is not None:
            self.start_balances = start_balances
        self.work_days = work_days

    @property
    def address(self):
        """Gets the address of this StagedImportEmployees.  # noqa: E501


        :return: The address of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this StagedImportEmployees.


        :param address: The address of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def affiliation_type(self):
        """Gets the affiliation_type of this StagedImportEmployees.  # noqa: E501


        :return: The affiliation_type of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._affiliation_type

    @affiliation_type.setter
    def affiliation_type(self, affiliation_type):
        """Sets the affiliation_type of this StagedImportEmployees.


        :param affiliation_type: The affiliation_type of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._affiliation_type = affiliation_type

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this StagedImportEmployees.  # noqa: E501


        :return: The bank_account_number of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this StagedImportEmployees.


        :param bank_account_number: The bank_account_number of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_registration_number(self):
        """Gets the bank_registration_number of this StagedImportEmployees.  # noqa: E501


        :return: The bank_registration_number of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._bank_registration_number

    @bank_registration_number.setter
    def bank_registration_number(self, bank_registration_number):
        """Sets the bank_registration_number of this StagedImportEmployees.


        :param bank_registration_number: The bank_registration_number of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._bank_registration_number = bank_registration_number

    @property
    def city(self):
        """Gets the city of this StagedImportEmployees.  # noqa: E501


        :return: The city of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this StagedImportEmployees.


        :param city: The city of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def coarse_car_allowances(self):
        """Gets the coarse_car_allowances of this StagedImportEmployees.  # noqa: E501


        :return: The coarse_car_allowances of this StagedImportEmployees.  # noqa: E501
        :rtype: list[CoarseCarAllowance]
        """
        return self._coarse_car_allowances

    @coarse_car_allowances.setter
    def coarse_car_allowances(self, coarse_car_allowances):
        """Sets the coarse_car_allowances of this StagedImportEmployees.


        :param coarse_car_allowances: The coarse_car_allowances of this StagedImportEmployees.  # noqa: E501
        :type: list[CoarseCarAllowance]
        """

        self._coarse_car_allowances = coarse_car_allowances

    @property
    def coarse_salary_registrations(self):
        """Gets the coarse_salary_registrations of this StagedImportEmployees.  # noqa: E501


        :return: The coarse_salary_registrations of this StagedImportEmployees.  # noqa: E501
        :rtype: list[CoarseSalaryRegistration]
        """
        return self._coarse_salary_registrations

    @coarse_salary_registrations.setter
    def coarse_salary_registrations(self, coarse_salary_registrations):
        """Sets the coarse_salary_registrations of this StagedImportEmployees.


        :param coarse_salary_registrations: The coarse_salary_registrations of this StagedImportEmployees.  # noqa: E501
        :type: list[CoarseSalaryRegistration]
        """

        self._coarse_salary_registrations = coarse_salary_registrations

    @property
    def coarse_time_registrations(self):
        """Gets the coarse_time_registrations of this StagedImportEmployees.  # noqa: E501


        :return: The coarse_time_registrations of this StagedImportEmployees.  # noqa: E501
        :rtype: list[CoarseTimeRegistration]
        """
        return self._coarse_time_registrations

    @coarse_time_registrations.setter
    def coarse_time_registrations(self, coarse_time_registrations):
        """Sets the coarse_time_registrations of this StagedImportEmployees.


        :param coarse_time_registrations: The coarse_time_registrations of this StagedImportEmployees.  # noqa: E501
        :type: list[CoarseTimeRegistration]
        """

        self._coarse_time_registrations = coarse_time_registrations

    @property
    def email(self):
        """Gets the email of this StagedImportEmployees.  # noqa: E501


        :return: The email of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this StagedImportEmployees.


        :param email: The email of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def employee_id(self):
        """Gets the employee_id of this StagedImportEmployees.  # noqa: E501


        :return: The employee_id of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this StagedImportEmployees.


        :param employee_id: The employee_id of this StagedImportEmployees.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and employee_id is None:  # noqa: E501
            raise ValueError("Invalid value for `employee_id`, must not be `None`")  # noqa: E501

        self._employee_id = employee_id

    @property
    def employee_number(self):
        """Gets the employee_number of this StagedImportEmployees.  # noqa: E501


        :return: The employee_number of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this StagedImportEmployees.


        :param employee_number: The employee_number of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._employee_number = employee_number

    @property
    def employment_start_date(self):
        """Gets the employment_start_date of this StagedImportEmployees.  # noqa: E501


        :return: The employment_start_date of this StagedImportEmployees.  # noqa: E501
        :rtype: date
        """
        return self._employment_start_date

    @employment_start_date.setter
    def employment_start_date(self, employment_start_date):
        """Sets the employment_start_date of this StagedImportEmployees.


        :param employment_start_date: The employment_start_date of this StagedImportEmployees.  # noqa: E501
        :type: date
        """

        self._employment_start_date = employment_start_date

    @property
    def errors(self):
        """Gets the errors of this StagedImportEmployees.  # noqa: E501


        :return: The errors of this StagedImportEmployees.  # noqa: E501
        :rtype: list[StagedImportError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this StagedImportEmployees.


        :param errors: The errors of this StagedImportEmployees.  # noqa: E501
        :type: list[StagedImportError]
        """

        self._errors = errors

    @property
    def hours(self):
        """Gets the hours of this StagedImportEmployees.  # noqa: E501


        :return: The hours of this StagedImportEmployees.  # noqa: E501
        :rtype: float
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this StagedImportEmployees.


        :param hours: The hours of this StagedImportEmployees.  # noqa: E501
        :type: float
        """

        self._hours = hours

    @property
    def leave_adjustments(self):
        """Gets the leave_adjustments of this StagedImportEmployees.  # noqa: E501


        :return: The leave_adjustments of this StagedImportEmployees.  # noqa: E501
        :rtype: list[LeaveAdjustment]
        """
        return self._leave_adjustments

    @leave_adjustments.setter
    def leave_adjustments(self, leave_adjustments):
        """Sets the leave_adjustments of this StagedImportEmployees.


        :param leave_adjustments: The leave_adjustments of this StagedImportEmployees.  # noqa: E501
        :type: list[LeaveAdjustment]
        """

        self._leave_adjustments = leave_adjustments

    @property
    def name(self):
        """Gets the name of this StagedImportEmployees.  # noqa: E501


        :return: The name of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StagedImportEmployees.


        :param name: The name of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def national_id(self):
        """Gets the national_id of this StagedImportEmployees.  # noqa: E501


        :return: The national_id of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._national_id

    @national_id.setter
    def national_id(self, national_id):
        """Sets the national_id of this StagedImportEmployees.


        :param national_id: The national_id of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._national_id = national_id

    @property
    def one_time_pays(self):
        """Gets the one_time_pays of this StagedImportEmployees.  # noqa: E501


        :return: The one_time_pays of this StagedImportEmployees.  # noqa: E501
        :rtype: list[OneTimePay]
        """
        return self._one_time_pays

    @one_time_pays.setter
    def one_time_pays(self, one_time_pays):
        """Sets the one_time_pays of this StagedImportEmployees.


        :param one_time_pays: The one_time_pays of this StagedImportEmployees.  # noqa: E501
        :type: list[OneTimePay]
        """

        self._one_time_pays = one_time_pays

    @property
    def pay_slip_transport_e_mail(self):
        """Gets the pay_slip_transport_e_mail of this StagedImportEmployees.  # noqa: E501


        :return: The pay_slip_transport_e_mail of this StagedImportEmployees.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_e_mail

    @pay_slip_transport_e_mail.setter
    def pay_slip_transport_e_mail(self, pay_slip_transport_e_mail):
        """Sets the pay_slip_transport_e_mail of this StagedImportEmployees.


        :param pay_slip_transport_e_mail: The pay_slip_transport_e_mail of this StagedImportEmployees.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_e_mail = pay_slip_transport_e_mail

    @property
    def pay_slip_transport_national_inbox(self):
        """Gets the pay_slip_transport_national_inbox of this StagedImportEmployees.  # noqa: E501


        :return: The pay_slip_transport_national_inbox of this StagedImportEmployees.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_national_inbox

    @pay_slip_transport_national_inbox.setter
    def pay_slip_transport_national_inbox(self, pay_slip_transport_national_inbox):
        """Sets the pay_slip_transport_national_inbox of this StagedImportEmployees.


        :param pay_slip_transport_national_inbox: The pay_slip_transport_national_inbox of this StagedImportEmployees.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_national_inbox = pay_slip_transport_national_inbox

    @property
    def pay_slip_transport_sms_notification(self):
        """Gets the pay_slip_transport_sms_notification of this StagedImportEmployees.  # noqa: E501


        :return: The pay_slip_transport_sms_notification of this StagedImportEmployees.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_sms_notification

    @pay_slip_transport_sms_notification.setter
    def pay_slip_transport_sms_notification(self, pay_slip_transport_sms_notification):
        """Sets the pay_slip_transport_sms_notification of this StagedImportEmployees.


        :param pay_slip_transport_sms_notification: The pay_slip_transport_sms_notification of this StagedImportEmployees.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_sms_notification = pay_slip_transport_sms_notification

    @property
    def phone_number(self):
        """Gets the phone_number of this StagedImportEmployees.  # noqa: E501


        :return: The phone_number of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this StagedImportEmployees.


        :param phone_number: The phone_number of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_country_code(self):
        """Gets the phone_number_country_code of this StagedImportEmployees.  # noqa: E501


        :return: The phone_number_country_code of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._phone_number_country_code

    @phone_number_country_code.setter
    def phone_number_country_code(self, phone_number_country_code):
        """Sets the phone_number_country_code of this StagedImportEmployees.


        :param phone_number_country_code: The phone_number_country_code of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._phone_number_country_code = phone_number_country_code

    @property
    def position(self):
        """Gets the position of this StagedImportEmployees.  # noqa: E501


        :return: The position of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StagedImportEmployees.


        :param position: The position of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def postal_code(self):
        """Gets the postal_code of this StagedImportEmployees.  # noqa: E501


        :return: The postal_code of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this StagedImportEmployees.


        :param postal_code: The postal_code of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def preferred_tax_card_type(self):
        """Gets the preferred_tax_card_type of this StagedImportEmployees.  # noqa: E501


        :return: The preferred_tax_card_type of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._preferred_tax_card_type

    @preferred_tax_card_type.setter
    def preferred_tax_card_type(self, preferred_tax_card_type):
        """Sets the preferred_tax_card_type of this StagedImportEmployees.


        :param preferred_tax_card_type: The preferred_tax_card_type of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._preferred_tax_card_type = preferred_tax_card_type

    @property
    def production_unit_id(self):
        """Gets the production_unit_id of this StagedImportEmployees.  # noqa: E501


        :return: The production_unit_id of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._production_unit_id

    @production_unit_id.setter
    def production_unit_id(self, production_unit_id):
        """Sets the production_unit_id of this StagedImportEmployees.


        :param production_unit_id: The production_unit_id of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._production_unit_id = production_unit_id

    @property
    def remuneration(self):
        """Gets the remuneration of this StagedImportEmployees.  # noqa: E501


        :return: The remuneration of this StagedImportEmployees.  # noqa: E501
        :rtype: Remuneration
        """
        return self._remuneration

    @remuneration.setter
    def remuneration(self, remuneration):
        """Sets the remuneration of this StagedImportEmployees.


        :param remuneration: The remuneration of this StagedImportEmployees.  # noqa: E501
        :type: Remuneration
        """

        self._remuneration = remuneration

    @property
    def salary_changes(self):
        """Gets the salary_changes of this StagedImportEmployees.  # noqa: E501


        :return: The salary_changes of this StagedImportEmployees.  # noqa: E501
        :rtype: list[SalaryDefinition]
        """
        return self._salary_changes

    @salary_changes.setter
    def salary_changes(self, salary_changes):
        """Sets the salary_changes of this StagedImportEmployees.


        :param salary_changes: The salary_changes of this StagedImportEmployees.  # noqa: E501
        :type: list[SalaryDefinition]
        """

        self._salary_changes = salary_changes

    @property
    def salary_cycle_id(self):
        """Gets the salary_cycle_id of this StagedImportEmployees.  # noqa: E501


        :return: The salary_cycle_id of this StagedImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._salary_cycle_id

    @salary_cycle_id.setter
    def salary_cycle_id(self, salary_cycle_id):
        """Sets the salary_cycle_id of this StagedImportEmployees.


        :param salary_cycle_id: The salary_cycle_id of this StagedImportEmployees.  # noqa: E501
        :type: str
        """

        self._salary_cycle_id = salary_cycle_id

    @property
    def start_balances(self):
        """Gets the start_balances of this StagedImportEmployees.  # noqa: E501


        :return: The start_balances of this StagedImportEmployees.  # noqa: E501
        :rtype: StartBalance
        """
        return self._start_balances

    @start_balances.setter
    def start_balances(self, start_balances):
        """Sets the start_balances of this StagedImportEmployees.


        :param start_balances: The start_balances of this StagedImportEmployees.  # noqa: E501
        :type: StartBalance
        """

        self._start_balances = start_balances

    @property
    def work_days(self):
        """Gets the work_days of this StagedImportEmployees.  # noqa: E501


        :return: The work_days of this StagedImportEmployees.  # noqa: E501
        :rtype: float
        """
        return self._work_days

    @work_days.setter
    def work_days(self, work_days):
        """Sets the work_days of this StagedImportEmployees.


        :param work_days: The work_days of this StagedImportEmployees.  # noqa: E501
        :type: float
        """

        self._work_days = work_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StagedImportEmployees):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StagedImportEmployees):
            return True

        return self.to_dict() != other.to_dict()
