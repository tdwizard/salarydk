# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class TaxCard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'e_tax_card_id': 'str',
        'active_for_current_period': 'bool',
        'batch_run_id': 'int',
        'deduction_daily': 'int',
        'deduction_monthly': 'int',
        'deduction_semi_monthly': 'int',
        'deduction_weekly': 'int',
        'employee_id': 'str',
        'id': 'str',
        'income_year': 'int',
        'max_a_income_free_card': 'int',
        'run_date': 'date',
        'tax_card_type': 'str',
        'tax_percentage': 'int',
        'valid_from_date': 'date'
    }

    attribute_map = {
        'e_tax_card_id': 'ETaxCardID',
        'active_for_current_period': 'activeForCurrentPeriod',
        'batch_run_id': 'batchRunID',
        'deduction_daily': 'deductionDaily',
        'deduction_monthly': 'deductionMonthly',
        'deduction_semi_monthly': 'deductionSemiMonthly',
        'deduction_weekly': 'deductionWeekly',
        'employee_id': 'employeeID',
        'id': 'id',
        'income_year': 'incomeYear',
        'max_a_income_free_card': 'maxAIncomeFreeCard',
        'run_date': 'runDate',
        'tax_card_type': 'taxCardType',
        'tax_percentage': 'taxPercentage',
        'valid_from_date': 'validFromDate'
    }

    def __init__(self, e_tax_card_id=None, active_for_current_period=None, batch_run_id=None, deduction_daily=None, deduction_monthly=None, deduction_semi_monthly=None, deduction_weekly=None, employee_id=None, id=None, income_year=None, max_a_income_free_card=None, run_date=None, tax_card_type=None, tax_percentage=None, valid_from_date=None, local_vars_configuration=None):  # noqa: E501
        """TaxCard - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._e_tax_card_id = None
        self._active_for_current_period = None
        self._batch_run_id = None
        self._deduction_daily = None
        self._deduction_monthly = None
        self._deduction_semi_monthly = None
        self._deduction_weekly = None
        self._employee_id = None
        self._id = None
        self._income_year = None
        self._max_a_income_free_card = None
        self._run_date = None
        self._tax_card_type = None
        self._tax_percentage = None
        self._valid_from_date = None
        self.discriminator = None

        self.e_tax_card_id = e_tax_card_id
        if active_for_current_period is not None:
            self.active_for_current_period = active_for_current_period
        self.batch_run_id = batch_run_id
        self.deduction_daily = deduction_daily
        self.deduction_monthly = deduction_monthly
        self.deduction_semi_monthly = deduction_semi_monthly
        self.deduction_weekly = deduction_weekly
        self.employee_id = employee_id
        if id is not None:
            self.id = id
        self.income_year = income_year
        self.max_a_income_free_card = max_a_income_free_card
        self.run_date = run_date
        self.tax_card_type = tax_card_type
        self.tax_percentage = tax_percentage
        self.valid_from_date = valid_from_date

    @property
    def e_tax_card_id(self):
        """Gets the e_tax_card_id of this TaxCard.  # noqa: E501


        :return: The e_tax_card_id of this TaxCard.  # noqa: E501
        :rtype: str
        """
        return self._e_tax_card_id

    @e_tax_card_id.setter
    def e_tax_card_id(self, e_tax_card_id):
        """Sets the e_tax_card_id of this TaxCard.


        :param e_tax_card_id: The e_tax_card_id of this TaxCard.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and e_tax_card_id is None:  # noqa: E501
            raise ValueError("Invalid value for `e_tax_card_id`, must not be `None`")  # noqa: E501

        self._e_tax_card_id = e_tax_card_id

    @property
    def active_for_current_period(self):
        """Gets the active_for_current_period of this TaxCard.  # noqa: E501

        If true, this is the tax card to be used in the current salary period.  # noqa: E501

        :return: The active_for_current_period of this TaxCard.  # noqa: E501
        :rtype: bool
        """
        return self._active_for_current_period

    @active_for_current_period.setter
    def active_for_current_period(self, active_for_current_period):
        """Sets the active_for_current_period of this TaxCard.

        If true, this is the tax card to be used in the current salary period.  # noqa: E501

        :param active_for_current_period: The active_for_current_period of this TaxCard.  # noqa: E501
        :type: bool
        """

        self._active_for_current_period = active_for_current_period

    @property
    def batch_run_id(self):
        """Gets the batch_run_id of this TaxCard.  # noqa: E501


        :return: The batch_run_id of this TaxCard.  # noqa: E501
        :rtype: int
        """
        return self._batch_run_id

    @batch_run_id.setter
    def batch_run_id(self, batch_run_id):
        """Sets the batch_run_id of this TaxCard.


        :param batch_run_id: The batch_run_id of this TaxCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and batch_run_id is None:  # noqa: E501
            raise ValueError("Invalid value for `batch_run_id`, must not be `None`")  # noqa: E501

        self._batch_run_id = batch_run_id

    @property
    def deduction_daily(self):
        """Gets the deduction_daily of this TaxCard.  # noqa: E501


        :return: The deduction_daily of this TaxCard.  # noqa: E501
        :rtype: int
        """
        return self._deduction_daily

    @deduction_daily.setter
    def deduction_daily(self, deduction_daily):
        """Sets the deduction_daily of this TaxCard.


        :param deduction_daily: The deduction_daily of this TaxCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and deduction_daily is None:  # noqa: E501
            raise ValueError("Invalid value for `deduction_daily`, must not be `None`")  # noqa: E501

        self._deduction_daily = deduction_daily

    @property
    def deduction_monthly(self):
        """Gets the deduction_monthly of this TaxCard.  # noqa: E501


        :return: The deduction_monthly of this TaxCard.  # noqa: E501
        :rtype: int
        """
        return self._deduction_monthly

    @deduction_monthly.setter
    def deduction_monthly(self, deduction_monthly):
        """Sets the deduction_monthly of this TaxCard.


        :param deduction_monthly: The deduction_monthly of this TaxCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and deduction_monthly is None:  # noqa: E501
            raise ValueError("Invalid value for `deduction_monthly`, must not be `None`")  # noqa: E501

        self._deduction_monthly = deduction_monthly

    @property
    def deduction_semi_monthly(self):
        """Gets the deduction_semi_monthly of this TaxCard.  # noqa: E501


        :return: The deduction_semi_monthly of this TaxCard.  # noqa: E501
        :rtype: int
        """
        return self._deduction_semi_monthly

    @deduction_semi_monthly.setter
    def deduction_semi_monthly(self, deduction_semi_monthly):
        """Sets the deduction_semi_monthly of this TaxCard.


        :param deduction_semi_monthly: The deduction_semi_monthly of this TaxCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and deduction_semi_monthly is None:  # noqa: E501
            raise ValueError("Invalid value for `deduction_semi_monthly`, must not be `None`")  # noqa: E501

        self._deduction_semi_monthly = deduction_semi_monthly

    @property
    def deduction_weekly(self):
        """Gets the deduction_weekly of this TaxCard.  # noqa: E501


        :return: The deduction_weekly of this TaxCard.  # noqa: E501
        :rtype: int
        """
        return self._deduction_weekly

    @deduction_weekly.setter
    def deduction_weekly(self, deduction_weekly):
        """Sets the deduction_weekly of this TaxCard.


        :param deduction_weekly: The deduction_weekly of this TaxCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and deduction_weekly is None:  # noqa: E501
            raise ValueError("Invalid value for `deduction_weekly`, must not be `None`")  # noqa: E501

        self._deduction_weekly = deduction_weekly

    @property
    def employee_id(self):
        """Gets the employee_id of this TaxCard.  # noqa: E501


        :return: The employee_id of this TaxCard.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this TaxCard.


        :param employee_id: The employee_id of this TaxCard.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and employee_id is None:  # noqa: E501
            raise ValueError("Invalid value for `employee_id`, must not be `None`")  # noqa: E501

        self._employee_id = employee_id

    @property
    def id(self):
        """Gets the id of this TaxCard.  # noqa: E501


        :return: The id of this TaxCard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxCard.


        :param id: The id of this TaxCard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def income_year(self):
        """Gets the income_year of this TaxCard.  # noqa: E501


        :return: The income_year of this TaxCard.  # noqa: E501
        :rtype: int
        """
        return self._income_year

    @income_year.setter
    def income_year(self, income_year):
        """Sets the income_year of this TaxCard.


        :param income_year: The income_year of this TaxCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and income_year is None:  # noqa: E501
            raise ValueError("Invalid value for `income_year`, must not be `None`")  # noqa: E501

        self._income_year = income_year

    @property
    def max_a_income_free_card(self):
        """Gets the max_a_income_free_card of this TaxCard.  # noqa: E501


        :return: The max_a_income_free_card of this TaxCard.  # noqa: E501
        :rtype: int
        """
        return self._max_a_income_free_card

    @max_a_income_free_card.setter
    def max_a_income_free_card(self, max_a_income_free_card):
        """Sets the max_a_income_free_card of this TaxCard.


        :param max_a_income_free_card: The max_a_income_free_card of this TaxCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_a_income_free_card is None:  # noqa: E501
            raise ValueError("Invalid value for `max_a_income_free_card`, must not be `None`")  # noqa: E501

        self._max_a_income_free_card = max_a_income_free_card

    @property
    def run_date(self):
        """Gets the run_date of this TaxCard.  # noqa: E501


        :return: The run_date of this TaxCard.  # noqa: E501
        :rtype: date
        """
        return self._run_date

    @run_date.setter
    def run_date(self, run_date):
        """Sets the run_date of this TaxCard.


        :param run_date: The run_date of this TaxCard.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and run_date is None:  # noqa: E501
            raise ValueError("Invalid value for `run_date`, must not be `None`")  # noqa: E501

        self._run_date = run_date

    @property
    def tax_card_type(self):
        """Gets the tax_card_type of this TaxCard.  # noqa: E501


        :return: The tax_card_type of this TaxCard.  # noqa: E501
        :rtype: str
        """
        return self._tax_card_type

    @tax_card_type.setter
    def tax_card_type(self, tax_card_type):
        """Sets the tax_card_type of this TaxCard.


        :param tax_card_type: The tax_card_type of this TaxCard.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tax_card_type is None:  # noqa: E501
            raise ValueError("Invalid value for `tax_card_type`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Brutto", "Primary", "Free", "Secondary", "BruttoNoRetainment", "PrimaryNoRetainment", "SecondaryNoRetainment"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tax_card_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tax_card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_card_type, allowed_values)
            )

        self._tax_card_type = tax_card_type

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this TaxCard.  # noqa: E501


        :return: The tax_percentage of this TaxCard.  # noqa: E501
        :rtype: int
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this TaxCard.


        :param tax_percentage: The tax_percentage of this TaxCard.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and tax_percentage is None:  # noqa: E501
            raise ValueError("Invalid value for `tax_percentage`, must not be `None`")  # noqa: E501

        self._tax_percentage = tax_percentage

    @property
    def valid_from_date(self):
        """Gets the valid_from_date of this TaxCard.  # noqa: E501


        :return: The valid_from_date of this TaxCard.  # noqa: E501
        :rtype: date
        """
        return self._valid_from_date

    @valid_from_date.setter
    def valid_from_date(self, valid_from_date):
        """Sets the valid_from_date of this TaxCard.


        :param valid_from_date: The valid_from_date of this TaxCard.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and valid_from_date is None:  # noqa: E501
            raise ValueError("Invalid value for `valid_from_date`, must not be `None`")  # noqa: E501

        self._valid_from_date = valid_from_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxCard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxCard):
            return True

        return self.to_dict() != other.to_dict()
