# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class Company(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'da_union_code': 'float',
        'accounting_manual_payment_always_asset': 'bool',
        'accounting_vacation_liability': 'bool',
        'active_employee_cap': 'float',
        'address': 'str',
        'allow_custom_pdf_passwords': 'bool',
        'allow_empty_tax_card_mail': 'bool',
        'allow_pay_roll_review': 'bool',
        'auto_approve_car_allowances': 'bool',
        'auto_approve_compensations': 'bool',
        'auto_approve_reimbursement_vouchers': 'bool',
        'auto_approve_time_registration_hours': 'bool',
        'bank_account_number': 'str',
        'bank_registration_number': 'str',
        'city': 'str',
        'cost_center_accounting': 'str',
        'created_at': 'datetime',
        'default_biweekly_cycle_id': 'str',
        'default_hourly_monthly_cycle_id': 'str',
        'dk_specific': 'CompanyDkSpecific',
        'employee_count': 'int',
        'enable_absence_statistics': 'bool',
        'enable_always_current_pay_roll_run': 'bool',
        'enable_early_payments': 'bool',
        'enable_immediate_pay': 'bool',
        'enable_negating_pay_rolls': 'bool',
        'enable_nem_konto_transfers': 'bool',
        'enable_otp_accounting_text': 'bool',
        'enable_quarterly_salary_statistics': 'bool',
        'enable_swipe': 'bool',
        'enable_yearly_salary_statistics': 'bool',
        'family_leave_fund': 'str',
        'id': 'str',
        'limit_i_calendar_to_departments': 'str',
        'name': 'str',
        'national_id': 'str',
        'next_available_employee_number': 'int',
        'number_of_basic_approvers': 'float',
        'number_of_pay_roll_approvers': 'float',
        'number_of_pay_roll_reviewers': 'float',
        'offset_disposition_bi_weekly': 'str',
        'offset_disposition_weekly': 'str',
        'pay_slip_questions_link': 'str',
        'pay_slip_questions_visible': 'bool',
        'pending_invite_count': 'int',
        'periodic_limit_for_immediate_pay_out': 'float',
        'postal_code': 'str',
        'primary_color': 'str',
        'production_units': 'list[ProductionUnit]',
        'rule_pay_roll_run_approval': 'str',
        'settings_enabled': 'list[CompanySettingBoolean]',
        'state': 'str',
        'swipe_employee_types': 'list[str]',
        'swipe_notification_at': 'float',
        'user_count': 'int',
        'vacation_excess_limit': 'float',
        'verified': 'bool'
    }

    attribute_map = {
        'da_union_code': 'DAUnionCode',
        'accounting_manual_payment_always_asset': 'accountingManualPaymentAlwaysAsset',
        'accounting_vacation_liability': 'accountingVacationLiability',
        'active_employee_cap': 'activeEmployeeCap',
        'address': 'address',
        'allow_custom_pdf_passwords': 'allowCustomPDFPasswords',
        'allow_empty_tax_card_mail': 'allowEmptyTaxCardMail',
        'allow_pay_roll_review': 'allowPayRollReview',
        'auto_approve_car_allowances': 'autoApproveCarAllowances',
        'auto_approve_compensations': 'autoApproveCompensations',
        'auto_approve_reimbursement_vouchers': 'autoApproveReimbursementVouchers',
        'auto_approve_time_registration_hours': 'autoApproveTimeRegistrationHours',
        'bank_account_number': 'bankAccountNumber',
        'bank_registration_number': 'bankRegistrationNumber',
        'city': 'city',
        'cost_center_accounting': 'costCenterAccounting',
        'created_at': 'createdAt',
        'default_biweekly_cycle_id': 'defaultBiweeklyCycleID',
        'default_hourly_monthly_cycle_id': 'defaultHourlyMonthlyCycleID',
        'dk_specific': 'dkSpecific',
        'employee_count': 'employeeCount',
        'enable_absence_statistics': 'enableAbsenceStatistics',
        'enable_always_current_pay_roll_run': 'enableAlwaysCurrentPayRollRun',
        'enable_early_payments': 'enableEarlyPayments',
        'enable_immediate_pay': 'enableImmediatePay',
        'enable_negating_pay_rolls': 'enableNegatingPayRolls',
        'enable_nem_konto_transfers': 'enableNemKontoTransfers',
        'enable_otp_accounting_text': 'enableOTPAccountingText',
        'enable_quarterly_salary_statistics': 'enableQuarterlySalaryStatistics',
        'enable_swipe': 'enableSwipe',
        'enable_yearly_salary_statistics': 'enableYearlySalaryStatistics',
        'family_leave_fund': 'familyLeaveFund',
        'id': 'id',
        'limit_i_calendar_to_departments': 'limitICalendarToDepartments',
        'name': 'name',
        'national_id': 'nationalID',
        'next_available_employee_number': 'nextAvailableEmployeeNumber',
        'number_of_basic_approvers': 'numberOfBasicApprovers',
        'number_of_pay_roll_approvers': 'numberOfPayRollApprovers',
        'number_of_pay_roll_reviewers': 'numberOfPayRollReviewers',
        'offset_disposition_bi_weekly': 'offsetDispositionBiWeekly',
        'offset_disposition_weekly': 'offsetDispositionWeekly',
        'pay_slip_questions_link': 'paySlipQuestionsLink',
        'pay_slip_questions_visible': 'paySlipQuestionsVisible',
        'pending_invite_count': 'pendingInviteCount',
        'periodic_limit_for_immediate_pay_out': 'periodicLimitForImmediatePayOut',
        'postal_code': 'postalCode',
        'primary_color': 'primaryColor',
        'production_units': 'productionUnits',
        'rule_pay_roll_run_approval': 'rulePayRollRunApproval',
        'settings_enabled': 'settingsEnabled',
        'state': 'state',
        'swipe_employee_types': 'swipeEmployeeTypes',
        'swipe_notification_at': 'swipeNotificationAt',
        'user_count': 'userCount',
        'vacation_excess_limit': 'vacationExcessLimit',
        'verified': 'verified'
    }

    def __init__(self, da_union_code=None, accounting_manual_payment_always_asset=True, accounting_vacation_liability=False, active_employee_cap=None, address=None, allow_custom_pdf_passwords=False, allow_empty_tax_card_mail=True, allow_pay_roll_review=None, auto_approve_car_allowances=False, auto_approve_compensations=False, auto_approve_reimbursement_vouchers=False, auto_approve_time_registration_hours=False, bank_account_number=None, bank_registration_number=None, city=None, cost_center_accounting=None, created_at=None, default_biweekly_cycle_id=None, default_hourly_monthly_cycle_id=None, dk_specific=None, employee_count=None, enable_absence_statistics=False, enable_always_current_pay_roll_run=False, enable_early_payments=False, enable_immediate_pay=False, enable_negating_pay_rolls=False, enable_nem_konto_transfers=False, enable_otp_accounting_text=False, enable_quarterly_salary_statistics=False, enable_swipe=False, enable_yearly_salary_statistics=False, family_leave_fund='DK Barsel.dk', id=None, limit_i_calendar_to_departments=None, name=None, national_id=None, next_available_employee_number=None, number_of_basic_approvers=None, number_of_pay_roll_approvers=None, number_of_pay_roll_reviewers=None, offset_disposition_bi_weekly='PeriodEnd', offset_disposition_weekly='PeriodEnd', pay_slip_questions_link=None, pay_slip_questions_visible=None, pending_invite_count=None, periodic_limit_for_immediate_pay_out=None, postal_code=None, primary_color=None, production_units=None, rule_pay_roll_run_approval=None, settings_enabled=None, state=None, swipe_employee_types=None, swipe_notification_at=None, user_count=None, vacation_excess_limit=None, verified=None, local_vars_configuration=None):  # noqa: E501
        """Company - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._da_union_code = None
        self._accounting_manual_payment_always_asset = None
        self._accounting_vacation_liability = None
        self._active_employee_cap = None
        self._address = None
        self._allow_custom_pdf_passwords = None
        self._allow_empty_tax_card_mail = None
        self._allow_pay_roll_review = None
        self._auto_approve_car_allowances = None
        self._auto_approve_compensations = None
        self._auto_approve_reimbursement_vouchers = None
        self._auto_approve_time_registration_hours = None
        self._bank_account_number = None
        self._bank_registration_number = None
        self._city = None
        self._cost_center_accounting = None
        self._created_at = None
        self._default_biweekly_cycle_id = None
        self._default_hourly_monthly_cycle_id = None
        self._dk_specific = None
        self._employee_count = None
        self._enable_absence_statistics = None
        self._enable_always_current_pay_roll_run = None
        self._enable_early_payments = None
        self._enable_immediate_pay = None
        self._enable_negating_pay_rolls = None
        self._enable_nem_konto_transfers = None
        self._enable_otp_accounting_text = None
        self._enable_quarterly_salary_statistics = None
        self._enable_swipe = None
        self._enable_yearly_salary_statistics = None
        self._family_leave_fund = None
        self._id = None
        self._limit_i_calendar_to_departments = None
        self._name = None
        self._national_id = None
        self._next_available_employee_number = None
        self._number_of_basic_approvers = None
        self._number_of_pay_roll_approvers = None
        self._number_of_pay_roll_reviewers = None
        self._offset_disposition_bi_weekly = None
        self._offset_disposition_weekly = None
        self._pay_slip_questions_link = None
        self._pay_slip_questions_visible = None
        self._pending_invite_count = None
        self._periodic_limit_for_immediate_pay_out = None
        self._postal_code = None
        self._primary_color = None
        self._production_units = None
        self._rule_pay_roll_run_approval = None
        self._settings_enabled = None
        self._state = None
        self._swipe_employee_types = None
        self._swipe_notification_at = None
        self._user_count = None
        self._vacation_excess_limit = None
        self._verified = None
        self.discriminator = None

        self.da_union_code = da_union_code
        if accounting_manual_payment_always_asset is not None:
            self.accounting_manual_payment_always_asset = accounting_manual_payment_always_asset
        self.accounting_vacation_liability = accounting_vacation_liability
        self.active_employee_cap = active_employee_cap
        self.address = address
        self.allow_custom_pdf_passwords = allow_custom_pdf_passwords
        self.allow_empty_tax_card_mail = allow_empty_tax_card_mail
        self.allow_pay_roll_review = allow_pay_roll_review
        self.auto_approve_car_allowances = auto_approve_car_allowances
        self.auto_approve_compensations = auto_approve_compensations
        self.auto_approve_reimbursement_vouchers = auto_approve_reimbursement_vouchers
        self.auto_approve_time_registration_hours = auto_approve_time_registration_hours
        self.bank_account_number = bank_account_number
        self.bank_registration_number = bank_registration_number
        self.city = city
        if cost_center_accounting is not None:
            self.cost_center_accounting = cost_center_accounting
        if created_at is not None:
            self.created_at = created_at
        self.default_biweekly_cycle_id = default_biweekly_cycle_id
        self.default_hourly_monthly_cycle_id = default_hourly_monthly_cycle_id
        if dk_specific is not None:
            self.dk_specific = dk_specific
        if employee_count is not None:
            self.employee_count = employee_count
        self.enable_absence_statistics = enable_absence_statistics
        self.enable_always_current_pay_roll_run = enable_always_current_pay_roll_run
        self.enable_early_payments = enable_early_payments
        self.enable_immediate_pay = enable_immediate_pay
        self.enable_negating_pay_rolls = enable_negating_pay_rolls
        self.enable_nem_konto_transfers = enable_nem_konto_transfers
        self.enable_otp_accounting_text = enable_otp_accounting_text
        self.enable_quarterly_salary_statistics = enable_quarterly_salary_statistics
        self.enable_swipe = enable_swipe
        self.enable_yearly_salary_statistics = enable_yearly_salary_statistics
        self.family_leave_fund = family_leave_fund
        if id is not None:
            self.id = id
        self.limit_i_calendar_to_departments = limit_i_calendar_to_departments
        self.name = name
        self.national_id = national_id
        if next_available_employee_number is not None:
            self.next_available_employee_number = next_available_employee_number
        self.number_of_basic_approvers = number_of_basic_approvers
        self.number_of_pay_roll_approvers = number_of_pay_roll_approvers
        self.number_of_pay_roll_reviewers = number_of_pay_roll_reviewers
        self.offset_disposition_bi_weekly = offset_disposition_bi_weekly
        self.offset_disposition_weekly = offset_disposition_weekly
        self.pay_slip_questions_link = pay_slip_questions_link
        self.pay_slip_questions_visible = pay_slip_questions_visible
        if pending_invite_count is not None:
            self.pending_invite_count = pending_invite_count
        self.periodic_limit_for_immediate_pay_out = periodic_limit_for_immediate_pay_out
        self.postal_code = postal_code
        self.primary_color = primary_color
        self.production_units = production_units
        self.rule_pay_roll_run_approval = rule_pay_roll_run_approval
        if settings_enabled is not None:
            self.settings_enabled = settings_enabled
        if state is not None:
            self.state = state
        self.swipe_employee_types = swipe_employee_types
        self.swipe_notification_at = swipe_notification_at
        if user_count is not None:
            self.user_count = user_count
        self.vacation_excess_limit = vacation_excess_limit
        if verified is not None:
            self.verified = verified

    @property
    def da_union_code(self):
        """Gets the da_union_code of this Company.  # noqa: E501

        The DA Union code for this company.  # noqa: E501

        :return: The da_union_code of this Company.  # noqa: E501
        :rtype: float
        """
        return self._da_union_code

    @da_union_code.setter
    def da_union_code(self, da_union_code):
        """Sets the da_union_code of this Company.

        The DA Union code for this company.  # noqa: E501

        :param da_union_code: The da_union_code of this Company.  # noqa: E501
        :type: float
        """

        self._da_union_code = da_union_code

    @property
    def accounting_manual_payment_always_asset(self):
        """Gets the accounting_manual_payment_always_asset of this Company.  # noqa: E501

        Determines whether manual payments are from asset.  # noqa: E501

        :return: The accounting_manual_payment_always_asset of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._accounting_manual_payment_always_asset

    @accounting_manual_payment_always_asset.setter
    def accounting_manual_payment_always_asset(self, accounting_manual_payment_always_asset):
        """Sets the accounting_manual_payment_always_asset of this Company.

        Determines whether manual payments are from asset.  # noqa: E501

        :param accounting_manual_payment_always_asset: The accounting_manual_payment_always_asset of this Company.  # noqa: E501
        :type: bool
        """

        self._accounting_manual_payment_always_asset = accounting_manual_payment_always_asset

    @property
    def accounting_vacation_liability(self):
        """Gets the accounting_vacation_liability of this Company.  # noqa: E501

        Determines whether or not accounting for vacation liability is enabled.  # noqa: E501

        :return: The accounting_vacation_liability of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._accounting_vacation_liability

    @accounting_vacation_liability.setter
    def accounting_vacation_liability(self, accounting_vacation_liability):
        """Sets the accounting_vacation_liability of this Company.

        Determines whether or not accounting for vacation liability is enabled.  # noqa: E501

        :param accounting_vacation_liability: The accounting_vacation_liability of this Company.  # noqa: E501
        :type: bool
        """

        self._accounting_vacation_liability = accounting_vacation_liability

    @property
    def active_employee_cap(self):
        """Gets the active_employee_cap of this Company.  # noqa: E501

        The limit to how many active employees this company can have, if null, then there is no limit  # noqa: E501

        :return: The active_employee_cap of this Company.  # noqa: E501
        :rtype: float
        """
        return self._active_employee_cap

    @active_employee_cap.setter
    def active_employee_cap(self, active_employee_cap):
        """Sets the active_employee_cap of this Company.

        The limit to how many active employees this company can have, if null, then there is no limit  # noqa: E501

        :param active_employee_cap: The active_employee_cap of this Company.  # noqa: E501
        :type: float
        """

        self._active_employee_cap = active_employee_cap

    @property
    def address(self):
        """Gets the address of this Company.  # noqa: E501

        The address of the company  # noqa: E501

        :return: The address of this Company.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Company.

        The address of the company  # noqa: E501

        :param address: The address of this Company.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def allow_custom_pdf_passwords(self):
        """Gets the allow_custom_pdf_passwords of this Company.  # noqa: E501

        Determines whether or not custom PDF Passwords can be set for employees.  # noqa: E501

        :return: The allow_custom_pdf_passwords of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._allow_custom_pdf_passwords

    @allow_custom_pdf_passwords.setter
    def allow_custom_pdf_passwords(self, allow_custom_pdf_passwords):
        """Sets the allow_custom_pdf_passwords of this Company.

        Determines whether or not custom PDF Passwords can be set for employees.  # noqa: E501

        :param allow_custom_pdf_passwords: The allow_custom_pdf_passwords of this Company.  # noqa: E501
        :type: bool
        """

        self._allow_custom_pdf_passwords = allow_custom_pdf_passwords

    @property
    def allow_empty_tax_card_mail(self):
        """Gets the allow_empty_tax_card_mail of this Company.  # noqa: E501

        Determines whether or not a mail may be sent to employees when we receive an empty tax card.  # noqa: E501

        :return: The allow_empty_tax_card_mail of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._allow_empty_tax_card_mail

    @allow_empty_tax_card_mail.setter
    def allow_empty_tax_card_mail(self, allow_empty_tax_card_mail):
        """Sets the allow_empty_tax_card_mail of this Company.

        Determines whether or not a mail may be sent to employees when we receive an empty tax card.  # noqa: E501

        :param allow_empty_tax_card_mail: The allow_empty_tax_card_mail of this Company.  # noqa: E501
        :type: bool
        """

        self._allow_empty_tax_card_mail = allow_empty_tax_card_mail

    @property
    def allow_pay_roll_review(self):
        """Gets the allow_pay_roll_review of this Company.  # noqa: E501

        Whether to allow pay rolls to be reviewed  # noqa: E501

        :return: The allow_pay_roll_review of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._allow_pay_roll_review

    @allow_pay_roll_review.setter
    def allow_pay_roll_review(self, allow_pay_roll_review):
        """Sets the allow_pay_roll_review of this Company.

        Whether to allow pay rolls to be reviewed  # noqa: E501

        :param allow_pay_roll_review: The allow_pay_roll_review of this Company.  # noqa: E501
        :type: bool
        """

        self._allow_pay_roll_review = allow_pay_roll_review

    @property
    def auto_approve_car_allowances(self):
        """Gets the auto_approve_car_allowances of this Company.  # noqa: E501

        If true, all car allowances registered by employees are approved when registered.  # noqa: E501

        :return: The auto_approve_car_allowances of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_car_allowances

    @auto_approve_car_allowances.setter
    def auto_approve_car_allowances(self, auto_approve_car_allowances):
        """Sets the auto_approve_car_allowances of this Company.

        If true, all car allowances registered by employees are approved when registered.  # noqa: E501

        :param auto_approve_car_allowances: The auto_approve_car_allowances of this Company.  # noqa: E501
        :type: bool
        """

        self._auto_approve_car_allowances = auto_approve_car_allowances

    @property
    def auto_approve_compensations(self):
        """Gets the auto_approve_compensations of this Company.  # noqa: E501

        If true, all compensations sent for approval by employees are approved when sent for approval.  # noqa: E501

        :return: The auto_approve_compensations of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_compensations

    @auto_approve_compensations.setter
    def auto_approve_compensations(self, auto_approve_compensations):
        """Sets the auto_approve_compensations of this Company.

        If true, all compensations sent for approval by employees are approved when sent for approval.  # noqa: E501

        :param auto_approve_compensations: The auto_approve_compensations of this Company.  # noqa: E501
        :type: bool
        """

        self._auto_approve_compensations = auto_approve_compensations

    @property
    def auto_approve_reimbursement_vouchers(self):
        """Gets the auto_approve_reimbursement_vouchers of this Company.  # noqa: E501

        If true, all reimbursement vouchers sent for approval by employees are approved when sent for approval.  # noqa: E501

        :return: The auto_approve_reimbursement_vouchers of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_reimbursement_vouchers

    @auto_approve_reimbursement_vouchers.setter
    def auto_approve_reimbursement_vouchers(self, auto_approve_reimbursement_vouchers):
        """Sets the auto_approve_reimbursement_vouchers of this Company.

        If true, all reimbursement vouchers sent for approval by employees are approved when sent for approval.  # noqa: E501

        :param auto_approve_reimbursement_vouchers: The auto_approve_reimbursement_vouchers of this Company.  # noqa: E501
        :type: bool
        """

        self._auto_approve_reimbursement_vouchers = auto_approve_reimbursement_vouchers

    @property
    def auto_approve_time_registration_hours(self):
        """Gets the auto_approve_time_registration_hours of this Company.  # noqa: E501

        If true, all hours registered by employees are approved when registered.  # noqa: E501

        :return: The auto_approve_time_registration_hours of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_time_registration_hours

    @auto_approve_time_registration_hours.setter
    def auto_approve_time_registration_hours(self, auto_approve_time_registration_hours):
        """Sets the auto_approve_time_registration_hours of this Company.

        If true, all hours registered by employees are approved when registered.  # noqa: E501

        :param auto_approve_time_registration_hours: The auto_approve_time_registration_hours of this Company.  # noqa: E501
        :type: bool
        """

        self._auto_approve_time_registration_hours = auto_approve_time_registration_hours

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this Company.  # noqa: E501

        The bank account number for paying salary  # noqa: E501

        :return: The bank_account_number of this Company.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this Company.

        The bank account number for paying salary  # noqa: E501

        :param bank_account_number: The bank_account_number of this Company.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_registration_number(self):
        """Gets the bank_registration_number of this Company.  # noqa: E501

        The bank registration number for paying salary  # noqa: E501

        :return: The bank_registration_number of this Company.  # noqa: E501
        :rtype: str
        """
        return self._bank_registration_number

    @bank_registration_number.setter
    def bank_registration_number(self, bank_registration_number):
        """Sets the bank_registration_number of this Company.

        The bank registration number for paying salary  # noqa: E501

        :param bank_registration_number: The bank_registration_number of this Company.  # noqa: E501
        :type: str
        """

        self._bank_registration_number = bank_registration_number

    @property
    def city(self):
        """Gets the city of this Company.  # noqa: E501

        The city of the company  # noqa: E501

        :return: The city of this Company.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Company.

        The city of the company  # noqa: E501

        :param city: The city of this Company.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and city is None:  # noqa: E501
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def cost_center_accounting(self):
        """Gets the cost_center_accounting of this Company.  # noqa: E501

        Whether cost center accounting is active.  # noqa: E501

        :return: The cost_center_accounting of this Company.  # noqa: E501
        :rtype: str
        """
        return self._cost_center_accounting

    @cost_center_accounting.setter
    def cost_center_accounting(self, cost_center_accounting):
        """Sets the cost_center_accounting of this Company.

        Whether cost center accounting is active.  # noqa: E501

        :param cost_center_accounting: The cost_center_accounting of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = ["Off", "Departments", "CostCenters"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cost_center_accounting not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cost_center_accounting` ({0}), must be one of {1}"  # noqa: E501
                .format(cost_center_accounting, allowed_values)
            )

        self._cost_center_accounting = cost_center_accounting

    @property
    def created_at(self):
        """Gets the created_at of this Company.  # noqa: E501

        Timestamp for creation of the company in Salary.dk  # noqa: E501

        :return: The created_at of this Company.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Company.

        Timestamp for creation of the company in Salary.dk  # noqa: E501

        :param created_at: The created_at of this Company.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def default_biweekly_cycle_id(self):
        """Gets the default_biweekly_cycle_id of this Company.  # noqa: E501

        The default biweekly cycle to use for new biweekly employees.  # noqa: E501

        :return: The default_biweekly_cycle_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._default_biweekly_cycle_id

    @default_biweekly_cycle_id.setter
    def default_biweekly_cycle_id(self, default_biweekly_cycle_id):
        """Sets the default_biweekly_cycle_id of this Company.

        The default biweekly cycle to use for new biweekly employees.  # noqa: E501

        :param default_biweekly_cycle_id: The default_biweekly_cycle_id of this Company.  # noqa: E501
        :type: str
        """

        self._default_biweekly_cycle_id = default_biweekly_cycle_id

    @property
    def default_hourly_monthly_cycle_id(self):
        """Gets the default_hourly_monthly_cycle_id of this Company.  # noqa: E501

        The default monthly cycle to use for new hourly monthly employees.  # noqa: E501

        :return: The default_hourly_monthly_cycle_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._default_hourly_monthly_cycle_id

    @default_hourly_monthly_cycle_id.setter
    def default_hourly_monthly_cycle_id(self, default_hourly_monthly_cycle_id):
        """Sets the default_hourly_monthly_cycle_id of this Company.

        The default monthly cycle to use for new hourly monthly employees.  # noqa: E501

        :param default_hourly_monthly_cycle_id: The default_hourly_monthly_cycle_id of this Company.  # noqa: E501
        :type: str
        """

        self._default_hourly_monthly_cycle_id = default_hourly_monthly_cycle_id

    @property
    def dk_specific(self):
        """Gets the dk_specific of this Company.  # noqa: E501


        :return: The dk_specific of this Company.  # noqa: E501
        :rtype: CompanyDkSpecific
        """
        return self._dk_specific

    @dk_specific.setter
    def dk_specific(self, dk_specific):
        """Sets the dk_specific of this Company.


        :param dk_specific: The dk_specific of this Company.  # noqa: E501
        :type: CompanyDkSpecific
        """

        self._dk_specific = dk_specific

    @property
    def employee_count(self):
        """Gets the employee_count of this Company.  # noqa: E501

        The number of employees in this company  # noqa: E501

        :return: The employee_count of this Company.  # noqa: E501
        :rtype: int
        """
        return self._employee_count

    @employee_count.setter
    def employee_count(self, employee_count):
        """Sets the employee_count of this Company.

        The number of employees in this company  # noqa: E501

        :param employee_count: The employee_count of this Company.  # noqa: E501
        :type: int
        """

        self._employee_count = employee_count

    @property
    def enable_absence_statistics(self):
        """Gets the enable_absence_statistics of this Company.  # noqa: E501

        Determines whether or not automatic absence statistics reporting is enabled.  # noqa: E501

        :return: The enable_absence_statistics of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_absence_statistics

    @enable_absence_statistics.setter
    def enable_absence_statistics(self, enable_absence_statistics):
        """Sets the enable_absence_statistics of this Company.

        Determines whether or not automatic absence statistics reporting is enabled.  # noqa: E501

        :param enable_absence_statistics: The enable_absence_statistics of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_absence_statistics = enable_absence_statistics

    @property
    def enable_always_current_pay_roll_run(self):
        """Gets the enable_always_current_pay_roll_run of this Company.  # noqa: E501

        When offset periods have ended, but their disposition date have not yet been reached, the following pay roll run will not have started.  Enabling this will start one, so there is always a current (calendar date wise) pay roll run.  # noqa: E501

        :return: The enable_always_current_pay_roll_run of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_always_current_pay_roll_run

    @enable_always_current_pay_roll_run.setter
    def enable_always_current_pay_roll_run(self, enable_always_current_pay_roll_run):
        """Sets the enable_always_current_pay_roll_run of this Company.

        When offset periods have ended, but their disposition date have not yet been reached, the following pay roll run will not have started.  Enabling this will start one, so there is always a current (calendar date wise) pay roll run.  # noqa: E501

        :param enable_always_current_pay_roll_run: The enable_always_current_pay_roll_run of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_always_current_pay_roll_run = enable_always_current_pay_roll_run

    @property
    def enable_early_payments(self):
        """Gets the enable_early_payments of this Company.  # noqa: E501

        Determines whether or not payments should be made as early as possible.  # noqa: E501

        :return: The enable_early_payments of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_early_payments

    @enable_early_payments.setter
    def enable_early_payments(self, enable_early_payments):
        """Sets the enable_early_payments of this Company.

        Determines whether or not payments should be made as early as possible.  # noqa: E501

        :param enable_early_payments: The enable_early_payments of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_early_payments = enable_early_payments

    @property
    def enable_immediate_pay(self):
        """Gets the enable_immediate_pay of this Company.  # noqa: E501

        Determines whether or not the immediate pay feature is enabled.  # noqa: E501

        :return: The enable_immediate_pay of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_immediate_pay

    @enable_immediate_pay.setter
    def enable_immediate_pay(self, enable_immediate_pay):
        """Sets the enable_immediate_pay of this Company.

        Determines whether or not the immediate pay feature is enabled.  # noqa: E501

        :param enable_immediate_pay: The enable_immediate_pay of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_immediate_pay = enable_immediate_pay

    @property
    def enable_negating_pay_rolls(self):
        """Gets the enable_negating_pay_rolls of this Company.  # noqa: E501

        Determines whether or not the negating pay roll feature is enabled.  # noqa: E501

        :return: The enable_negating_pay_rolls of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_negating_pay_rolls

    @enable_negating_pay_rolls.setter
    def enable_negating_pay_rolls(self, enable_negating_pay_rolls):
        """Sets the enable_negating_pay_rolls of this Company.

        Determines whether or not the negating pay roll feature is enabled.  # noqa: E501

        :param enable_negating_pay_rolls: The enable_negating_pay_rolls of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_negating_pay_rolls = enable_negating_pay_rolls

    @property
    def enable_nem_konto_transfers(self):
        """Gets the enable_nem_konto_transfers of this Company.  # noqa: E501

        Determines whether or not the nem konto transfer feature is enabled.  # noqa: E501

        :return: The enable_nem_konto_transfers of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_nem_konto_transfers

    @enable_nem_konto_transfers.setter
    def enable_nem_konto_transfers(self, enable_nem_konto_transfers):
        """Sets the enable_nem_konto_transfers of this Company.

        Determines whether or not the nem konto transfer feature is enabled.  # noqa: E501

        :param enable_nem_konto_transfers: The enable_nem_konto_transfers of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_nem_konto_transfers = enable_nem_konto_transfers

    @property
    def enable_otp_accounting_text(self):
        """Gets the enable_otp_accounting_text of this Company.  # noqa: E501

        Determines whether or not the accounting text on one time pays feature is enabled.  # noqa: E501

        :return: The enable_otp_accounting_text of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_otp_accounting_text

    @enable_otp_accounting_text.setter
    def enable_otp_accounting_text(self, enable_otp_accounting_text):
        """Sets the enable_otp_accounting_text of this Company.

        Determines whether or not the accounting text on one time pays feature is enabled.  # noqa: E501

        :param enable_otp_accounting_text: The enable_otp_accounting_text of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_otp_accounting_text = enable_otp_accounting_text

    @property
    def enable_quarterly_salary_statistics(self):
        """Gets the enable_quarterly_salary_statistics of this Company.  # noqa: E501

        Determines whether or not automatic quarterly salary statistics reporting is enabled.  # noqa: E501

        :return: The enable_quarterly_salary_statistics of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_quarterly_salary_statistics

    @enable_quarterly_salary_statistics.setter
    def enable_quarterly_salary_statistics(self, enable_quarterly_salary_statistics):
        """Sets the enable_quarterly_salary_statistics of this Company.

        Determines whether or not automatic quarterly salary statistics reporting is enabled.  # noqa: E501

        :param enable_quarterly_salary_statistics: The enable_quarterly_salary_statistics of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_quarterly_salary_statistics = enable_quarterly_salary_statistics

    @property
    def enable_swipe(self):
        """Gets the enable_swipe of this Company.  # noqa: E501

        Determines whether or not swipe is enabled.  # noqa: E501

        :return: The enable_swipe of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_swipe

    @enable_swipe.setter
    def enable_swipe(self, enable_swipe):
        """Sets the enable_swipe of this Company.

        Determines whether or not swipe is enabled.  # noqa: E501

        :param enable_swipe: The enable_swipe of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_swipe = enable_swipe

    @property
    def enable_yearly_salary_statistics(self):
        """Gets the enable_yearly_salary_statistics of this Company.  # noqa: E501

        Determines whether or not automatic yearly salary statistics reporting is enabled.  # noqa: E501

        :return: The enable_yearly_salary_statistics of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._enable_yearly_salary_statistics

    @enable_yearly_salary_statistics.setter
    def enable_yearly_salary_statistics(self, enable_yearly_salary_statistics):
        """Sets the enable_yearly_salary_statistics of this Company.

        Determines whether or not automatic yearly salary statistics reporting is enabled.  # noqa: E501

        :param enable_yearly_salary_statistics: The enable_yearly_salary_statistics of this Company.  # noqa: E501
        :type: bool
        """

        self._enable_yearly_salary_statistics = enable_yearly_salary_statistics

    @property
    def family_leave_fund(self):
        """Gets the family_leave_fund of this Company.  # noqa: E501

        The choice of family leave fund. If not set Barsel.dk is used.  # noqa: E501

        :return: The family_leave_fund of this Company.  # noqa: E501
        :rtype: str
        """
        return self._family_leave_fund

    @family_leave_fund.setter
    def family_leave_fund(self, family_leave_fund):
        """Sets the family_leave_fund of this Company.

        The choice of family leave fund. If not set Barsel.dk is used.  # noqa: E501

        :param family_leave_fund: The family_leave_fund of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"DK Barsel.dk", "DK DABarsel", "DK Partial Barsel.dk", "DK Other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and family_leave_fund not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `family_leave_fund` ({0}), must be one of {1}"  # noqa: E501
                .format(family_leave_fund, allowed_values)
            )

        self._family_leave_fund = family_leave_fund

    @property
    def id(self):
        """Gets the id of this Company.  # noqa: E501

        The ID of the company.  # noqa: E501

        :return: The id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Company.

        The ID of the company.  # noqa: E501

        :param id: The id of this Company.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def limit_i_calendar_to_departments(self):
        """Gets the limit_i_calendar_to_departments of this Company.  # noqa: E501

        How much can the employee see when using the icalendar feed  # noqa: E501

        :return: The limit_i_calendar_to_departments of this Company.  # noqa: E501
        :rtype: str
        """
        return self._limit_i_calendar_to_departments

    @limit_i_calendar_to_departments.setter
    def limit_i_calendar_to_departments(self, limit_i_calendar_to_departments):
        """Sets the limit_i_calendar_to_departments of this Company.

        How much can the employee see when using the icalendar feed  # noqa: E501

        :param limit_i_calendar_to_departments: The limit_i_calendar_to_departments of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"All", "Department", "Employee"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and limit_i_calendar_to_departments not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `limit_i_calendar_to_departments` ({0}), must be one of {1}"  # noqa: E501
                .format(limit_i_calendar_to_departments, allowed_values)
            )

        self._limit_i_calendar_to_departments = limit_i_calendar_to_departments

    @property
    def name(self):
        """Gets the name of this Company.  # noqa: E501

        The name of the company  # noqa: E501

        :return: The name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        The name of the company  # noqa: E501

        :param name: The name of this Company.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def national_id(self):
        """Gets the national_id of this Company.  # noqa: E501

        National identification number. For Denmark, this is equivalent to CVR-number.  # noqa: E501

        :return: The national_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._national_id

    @national_id.setter
    def national_id(self, national_id):
        """Sets the national_id of this Company.

        National identification number. For Denmark, this is equivalent to CVR-number.  # noqa: E501

        :param national_id: The national_id of this Company.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and national_id is None:  # noqa: E501
            raise ValueError("Invalid value for `national_id`, must not be `None`")  # noqa: E501

        self._national_id = national_id

    @property
    def next_available_employee_number(self):
        """Gets the next_available_employee_number of this Company.  # noqa: E501

        The next available employee number.  # noqa: E501

        :return: The next_available_employee_number of this Company.  # noqa: E501
        :rtype: int
        """
        return self._next_available_employee_number

    @next_available_employee_number.setter
    def next_available_employee_number(self, next_available_employee_number):
        """Sets the next_available_employee_number of this Company.

        The next available employee number.  # noqa: E501

        :param next_available_employee_number: The next_available_employee_number of this Company.  # noqa: E501
        :type: int
        """

        self._next_available_employee_number = next_available_employee_number

    @property
    def number_of_basic_approvers(self):
        """Gets the number_of_basic_approvers of this Company.  # noqa: E501

        The number of basic approvers is the number of required approvers for one time pays, time registrations and car allowances. Default is one.  # noqa: E501

        :return: The number_of_basic_approvers of this Company.  # noqa: E501
        :rtype: float
        """
        return self._number_of_basic_approvers

    @number_of_basic_approvers.setter
    def number_of_basic_approvers(self, number_of_basic_approvers):
        """Sets the number_of_basic_approvers of this Company.

        The number of basic approvers is the number of required approvers for one time pays, time registrations and car allowances. Default is one.  # noqa: E501

        :param number_of_basic_approvers: The number_of_basic_approvers of this Company.  # noqa: E501
        :type: float
        """

        self._number_of_basic_approvers = number_of_basic_approvers

    @property
    def number_of_pay_roll_approvers(self):
        """Gets the number_of_pay_roll_approvers of this Company.  # noqa: E501

        The number of pay roll approvers is the number of required approvers for pay rolls to be approved. Default is one.  # noqa: E501

        :return: The number_of_pay_roll_approvers of this Company.  # noqa: E501
        :rtype: float
        """
        return self._number_of_pay_roll_approvers

    @number_of_pay_roll_approvers.setter
    def number_of_pay_roll_approvers(self, number_of_pay_roll_approvers):
        """Sets the number_of_pay_roll_approvers of this Company.

        The number of pay roll approvers is the number of required approvers for pay rolls to be approved. Default is one.  # noqa: E501

        :param number_of_pay_roll_approvers: The number_of_pay_roll_approvers of this Company.  # noqa: E501
        :type: float
        """

        self._number_of_pay_roll_approvers = number_of_pay_roll_approvers

    @property
    def number_of_pay_roll_reviewers(self):
        """Gets the number_of_pay_roll_reviewers of this Company.  # noqa: E501

        The number of pay roll reviewers is the number of required reviewers for pay rolls to be approved. Default is zero.  # noqa: E501

        :return: The number_of_pay_roll_reviewers of this Company.  # noqa: E501
        :rtype: float
        """
        return self._number_of_pay_roll_reviewers

    @number_of_pay_roll_reviewers.setter
    def number_of_pay_roll_reviewers(self, number_of_pay_roll_reviewers):
        """Sets the number_of_pay_roll_reviewers of this Company.

        The number of pay roll reviewers is the number of required reviewers for pay rolls to be approved. Default is zero.  # noqa: E501

        :param number_of_pay_roll_reviewers: The number_of_pay_roll_reviewers of this Company.  # noqa: E501
        :type: float
        """

        self._number_of_pay_roll_reviewers = number_of_pay_roll_reviewers

    @property
    def offset_disposition_bi_weekly(self):
        """Gets the offset_disposition_bi_weekly of this Company.  # noqa: E501

        Offset the disposition date for bi-weekly periods  # noqa: E501

        :return: The offset_disposition_bi_weekly of this Company.  # noqa: E501
        :rtype: str
        """
        return self._offset_disposition_bi_weekly

    @offset_disposition_bi_weekly.setter
    def offset_disposition_bi_weekly(self, offset_disposition_bi_weekly):
        """Sets the offset_disposition_bi_weekly of this Company.

        Offset the disposition date for bi-weekly periods  # noqa: E501

        :param offset_disposition_bi_weekly: The offset_disposition_bi_weekly of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"PeriodEnd", "NextMonday", "NextTuesday", "NextWednesday", "NextThursday", "NextFriday"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and offset_disposition_bi_weekly not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `offset_disposition_bi_weekly` ({0}), must be one of {1}"  # noqa: E501
                .format(offset_disposition_bi_weekly, allowed_values)
            )

        self._offset_disposition_bi_weekly = offset_disposition_bi_weekly

    @property
    def offset_disposition_weekly(self):
        """Gets the offset_disposition_weekly of this Company.  # noqa: E501

        Offset the disposition date for weekly periods  # noqa: E501

        :return: The offset_disposition_weekly of this Company.  # noqa: E501
        :rtype: str
        """
        return self._offset_disposition_weekly

    @offset_disposition_weekly.setter
    def offset_disposition_weekly(self, offset_disposition_weekly):
        """Sets the offset_disposition_weekly of this Company.

        Offset the disposition date for weekly periods  # noqa: E501

        :param offset_disposition_weekly: The offset_disposition_weekly of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"PeriodEnd", "NextMonday", "NextTuesday", "NextWednesday", "NextThursday", "NextFriday"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and offset_disposition_weekly not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `offset_disposition_weekly` ({0}), must be one of {1}"  # noqa: E501
                .format(offset_disposition_weekly, allowed_values)
            )

        self._offset_disposition_weekly = offset_disposition_weekly

    @property
    def pay_slip_questions_link(self):
        """Gets the pay_slip_questions_link of this Company.  # noqa: E501

        The URL of the link to show on pay slips, if visible.  # noqa: E501

        :return: The pay_slip_questions_link of this Company.  # noqa: E501
        :rtype: str
        """
        return self._pay_slip_questions_link

    @pay_slip_questions_link.setter
    def pay_slip_questions_link(self, pay_slip_questions_link):
        """Sets the pay_slip_questions_link of this Company.

        The URL of the link to show on pay slips, if visible.  # noqa: E501

        :param pay_slip_questions_link: The pay_slip_questions_link of this Company.  # noqa: E501
        :type: str
        """

        self._pay_slip_questions_link = pay_slip_questions_link

    @property
    def pay_slip_questions_visible(self):
        """Gets the pay_slip_questions_visible of this Company.  # noqa: E501

        Whether to show a link on the pay slips for questions or not.  # noqa: E501

        :return: The pay_slip_questions_visible of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_questions_visible

    @pay_slip_questions_visible.setter
    def pay_slip_questions_visible(self, pay_slip_questions_visible):
        """Sets the pay_slip_questions_visible of this Company.

        Whether to show a link on the pay slips for questions or not.  # noqa: E501

        :param pay_slip_questions_visible: The pay_slip_questions_visible of this Company.  # noqa: E501
        :type: bool
        """

        self._pay_slip_questions_visible = pay_slip_questions_visible

    @property
    def pending_invite_count(self):
        """Gets the pending_invite_count of this Company.  # noqa: E501

        The number of pending invites for this company  # noqa: E501

        :return: The pending_invite_count of this Company.  # noqa: E501
        :rtype: int
        """
        return self._pending_invite_count

    @pending_invite_count.setter
    def pending_invite_count(self, pending_invite_count):
        """Sets the pending_invite_count of this Company.

        The number of pending invites for this company  # noqa: E501

        :param pending_invite_count: The pending_invite_count of this Company.  # noqa: E501
        :type: int
        """

        self._pending_invite_count = pending_invite_count

    @property
    def periodic_limit_for_immediate_pay_out(self):
        """Gets the periodic_limit_for_immediate_pay_out of this Company.  # noqa: E501

        The periodic limit for immediate pay out common for both Swipe and immediate pay (each employee has this limit regardless of period).  # noqa: E501

        :return: The periodic_limit_for_immediate_pay_out of this Company.  # noqa: E501
        :rtype: float
        """
        return self._periodic_limit_for_immediate_pay_out

    @periodic_limit_for_immediate_pay_out.setter
    def periodic_limit_for_immediate_pay_out(self, periodic_limit_for_immediate_pay_out):
        """Sets the periodic_limit_for_immediate_pay_out of this Company.

        The periodic limit for immediate pay out common for both Swipe and immediate pay (each employee has this limit regardless of period).  # noqa: E501

        :param periodic_limit_for_immediate_pay_out: The periodic_limit_for_immediate_pay_out of this Company.  # noqa: E501
        :type: float
        """

        self._periodic_limit_for_immediate_pay_out = periodic_limit_for_immediate_pay_out

    @property
    def postal_code(self):
        """Gets the postal_code of this Company.  # noqa: E501

        The postal code of the company  # noqa: E501

        :return: The postal_code of this Company.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Company.

        The postal code of the company  # noqa: E501

        :param postal_code: The postal_code of this Company.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and postal_code is None:  # noqa: E501
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def primary_color(self):
        """Gets the primary_color of this Company.  # noqa: E501

        The primary color of the company, based on the company logo  # noqa: E501

        :return: The primary_color of this Company.  # noqa: E501
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this Company.

        The primary color of the company, based on the company logo  # noqa: E501

        :param primary_color: The primary_color of this Company.  # noqa: E501
        :type: str
        """

        self._primary_color = primary_color

    @property
    def production_units(self):
        """Gets the production_units of this Company.  # noqa: E501

        A list of production units for the company.  # noqa: E501

        :return: The production_units of this Company.  # noqa: E501
        :rtype: list[ProductionUnit]
        """
        return self._production_units

    @production_units.setter
    def production_units(self, production_units):
        """Sets the production_units of this Company.

        A list of production units for the company.  # noqa: E501

        :param production_units: The production_units of this Company.  # noqa: E501
        :type: list[ProductionUnit]
        """
        if self.local_vars_configuration.client_side_validation and production_units is None:  # noqa: E501
            raise ValueError("Invalid value for `production_units`, must not be `None`")  # noqa: E501

        self._production_units = production_units

    @property
    def rule_pay_roll_run_approval(self):
        """Gets the rule_pay_roll_run_approval of this Company.  # noqa: E501

        How to handle pay roll approval  # noqa: E501

        :return: The rule_pay_roll_run_approval of this Company.  # noqa: E501
        :rtype: str
        """
        return self._rule_pay_roll_run_approval

    @rule_pay_roll_run_approval.setter
    def rule_pay_roll_run_approval(self, rule_pay_roll_run_approval):
        """Sets the rule_pay_roll_run_approval of this Company.

        How to handle pay roll approval  # noqa: E501

        :param rule_pay_roll_run_approval: The rule_pay_roll_run_approval of this Company.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and rule_pay_roll_run_approval is None:  # noqa: E501
            raise ValueError("Invalid value for `rule_pay_roll_run_approval`, must not be `None`")  # noqa: E501
        allowed_values = ["Automatic", "Manual"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and rule_pay_roll_run_approval not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `rule_pay_roll_run_approval` ({0}), must be one of {1}"  # noqa: E501
                .format(rule_pay_roll_run_approval, allowed_values)
            )

        self._rule_pay_roll_run_approval = rule_pay_roll_run_approval

    @property
    def settings_enabled(self):
        """Gets the settings_enabled of this Company.  # noqa: E501

        List of enabled settings (disabled settings do not appear).  # noqa: E501

        :return: The settings_enabled of this Company.  # noqa: E501
        :rtype: list[CompanySettingBoolean]
        """
        return self._settings_enabled

    @settings_enabled.setter
    def settings_enabled(self, settings_enabled):
        """Sets the settings_enabled of this Company.

        List of enabled settings (disabled settings do not appear).  # noqa: E501

        :param settings_enabled: The settings_enabled of this Company.  # noqa: E501
        :type: list[CompanySettingBoolean]
        """

        self._settings_enabled = settings_enabled

    @property
    def state(self):
        """Gets the state of this Company.  # noqa: E501

        The state of the company. Only `active` companies can perform pay rolls.  # noqa: E501

        :return: The state of this Company.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Company.

        The state of the company. Only `active` companies can perform pay rolls.  # noqa: E501

        :param state: The state of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unverified", "Active", "Frozen"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def swipe_employee_types(self):
        """Gets the swipe_employee_types of this Company.  # noqa: E501

        When Swipe is enabled, the list of employee types it is enabled for.  # noqa: E501

        :return: The swipe_employee_types of this Company.  # noqa: E501
        :rtype: list[str]
        """
        return self._swipe_employee_types

    @swipe_employee_types.setter
    def swipe_employee_types(self, swipe_employee_types):
        """Sets the swipe_employee_types of this Company.

        When Swipe is enabled, the list of employee types it is enabled for.  # noqa: E501

        :param swipe_employee_types: The swipe_employee_types of this Company.  # noqa: E501
        :type: list[str]
        """
        allowed_values = [None,"Fixed", "Hourly", "Commissioned", "Freelancer"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(swipe_employee_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `swipe_employee_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(swipe_employee_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._swipe_employee_types = swipe_employee_types

    @property
    def swipe_notification_at(self):
        """Gets the swipe_notification_at of this Company.  # noqa: E501

        When one or more users have notification for Swipe enabled, at what hour during the day should it be sent.  # noqa: E501

        :return: The swipe_notification_at of this Company.  # noqa: E501
        :rtype: float
        """
        return self._swipe_notification_at

    @swipe_notification_at.setter
    def swipe_notification_at(self, swipe_notification_at):
        """Sets the swipe_notification_at of this Company.

        When one or more users have notification for Swipe enabled, at what hour during the day should it be sent.  # noqa: E501

        :param swipe_notification_at: The swipe_notification_at of this Company.  # noqa: E501
        :type: float
        """

        self._swipe_notification_at = swipe_notification_at

    @property
    def user_count(self):
        """Gets the user_count of this Company.  # noqa: E501

        The number of users with access to this company  # noqa: E501

        :return: The user_count of this Company.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this Company.

        The number of users with access to this company  # noqa: E501

        :param user_count: The user_count of this Company.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    @property
    def vacation_excess_limit(self):
        """Gets the vacation_excess_limit of this Company.  # noqa: E501

        Determines whether or not excess vacation is allowed and the limit.  # noqa: E501

        :return: The vacation_excess_limit of this Company.  # noqa: E501
        :rtype: float
        """
        return self._vacation_excess_limit

    @vacation_excess_limit.setter
    def vacation_excess_limit(self, vacation_excess_limit):
        """Sets the vacation_excess_limit of this Company.

        Determines whether or not excess vacation is allowed and the limit.  # noqa: E501

        :param vacation_excess_limit: The vacation_excess_limit of this Company.  # noqa: E501
        :type: float
        """

        self._vacation_excess_limit = vacation_excess_limit

    @property
    def verified(self):
        """Gets the verified of this Company.  # noqa: E501

        (deprecated) Is the company verified, and may perform reporting through the system?  # noqa: E501

        :return: The verified of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Company.

        (deprecated) Is the company verified, and may perform reporting through the system?  # noqa: E501

        :param verified: The verified of this Company.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Company):
            return True

        return self.to_dict() != other.to_dict()
