# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class TimeRegistration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'approved': 'bool',
        'category': 'str',
        '_class': 'str',
        'cost_center_id': 'str',
        'date': 'date',
        'days': 'float',
        'employee_id': 'str',
        'end': 'float',
        'hours': 'float',
        'immutable': 'bool',
        'leave_type_id': 'str',
        'minutes': 'float',
        'note': 'str',
        'salary_type_id': 'str',
        'settled': 'bool',
        'start': 'float',
        'state': 'str',
        'type_name': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'approved': 'approved',
        'category': 'category',
        '_class': 'class',
        'cost_center_id': 'costCenterID',
        'date': 'date',
        'days': 'days',
        'employee_id': 'employeeID',
        'end': 'end',
        'hours': 'hours',
        'immutable': 'immutable',
        'leave_type_id': 'leaveTypeID',
        'minutes': 'minutes',
        'note': 'note',
        'salary_type_id': 'salaryTypeID',
        'settled': 'settled',
        'start': 'start',
        'state': 'state',
        'type_name': 'typeName'
    }

    def __init__(self, id=None, approved=None, category=None, _class=None, cost_center_id=None, date=None, days=None, employee_id=None, end=None, hours=None, immutable=None, leave_type_id=None, minutes=None, note=None, salary_type_id=None, settled=None, start=None, state=None, type_name=None, local_vars_configuration=None):  # noqa: E501
        """TimeRegistration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._approved = None
        self._category = None
        self.__class = None
        self._cost_center_id = None
        self._date = None
        self._days = None
        self._employee_id = None
        self._end = None
        self._hours = None
        self._immutable = None
        self._leave_type_id = None
        self._minutes = None
        self._note = None
        self._salary_type_id = None
        self._settled = None
        self._start = None
        self._state = None
        self._type_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if approved is not None:
            self.approved = approved
        self.category = category
        if _class is not None:
            self._class = _class
        self.cost_center_id = cost_center_id
        self.date = date
        self.days = days
        self.employee_id = employee_id
        self.end = end
        self.hours = hours
        if immutable is not None:
            self.immutable = immutable
        self.leave_type_id = leave_type_id
        self.minutes = minutes
        self.note = note
        self.salary_type_id = salary_type_id
        if settled is not None:
            self.settled = settled
        self.start = start
        if state is not None:
            self.state = state
        self.type_name = type_name

    @property
    def id(self):
        """Gets the id of this TimeRegistration.  # noqa: E501

        The ID of the time registration.  # noqa: E501

        :return: The id of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeRegistration.

        The ID of the time registration.  # noqa: E501

        :param id: The id of this TimeRegistration.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def approved(self):
        """Gets the approved of this TimeRegistration.  # noqa: E501

        Whether the time registration has been approved by the employer. Only approved registrations are included in the pay roll.   # noqa: E501

        :return: The approved of this TimeRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this TimeRegistration.

        Whether the time registration has been approved by the employer. Only approved registrations are included in the pay roll.   # noqa: E501

        :param approved: The approved of this TimeRegistration.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def category(self):
        """Gets the category of this TimeRegistration.  # noqa: E501

        Optional category for the time registration  # noqa: E501

        :return: The category of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TimeRegistration.

        Optional category for the time registration  # noqa: E501

        :param category: The category of this TimeRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"Child's first sick day", "Child's second sick day", "Anniversary", "Moving day", "Mourning day", "Time off in lieu"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def _class(self):
        """Gets the _class of this TimeRegistration.  # noqa: E501

        The type of registration.  # noqa: E501

        :return: The _class of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this TimeRegistration.

        The type of registration.  # noqa: E501

        :param _class: The _class of this TimeRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Leave", "Hours", "Flex"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and _class not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"  # noqa: E501
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def cost_center_id(self):
        """Gets the cost_center_id of this TimeRegistration.  # noqa: E501

        The cost center this registration is attached to.  Only for `class = \"Hours`.  # noqa: E501

        :return: The cost_center_id of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._cost_center_id

    @cost_center_id.setter
    def cost_center_id(self, cost_center_id):
        """Sets the cost_center_id of this TimeRegistration.

        The cost center this registration is attached to.  Only for `class = \"Hours`.  # noqa: E501

        :param cost_center_id: The cost_center_id of this TimeRegistration.  # noqa: E501
        :type: str
        """

        self._cost_center_id = cost_center_id

    @property
    def date(self):
        """Gets the date of this TimeRegistration.  # noqa: E501

        The date the time worked occured, or the date the leave happened.  # noqa: E501

        :return: The date of this TimeRegistration.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TimeRegistration.

        The date the time worked occured, or the date the leave happened.  # noqa: E501

        :param date: The date of this TimeRegistration.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def days(self):
        """Gets the days of this TimeRegistration.  # noqa: E501

        For registrations of leave held (`class = \"Leave\"`), this is the number of days held. Normally this is 1.0, but 0.25, 0.50 and 0.75 are also valid values. This can be used to take half a day off work.   # noqa: E501

        :return: The days of this TimeRegistration.  # noqa: E501
        :rtype: float
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this TimeRegistration.

        For registrations of leave held (`class = \"Leave\"`), this is the number of days held. Normally this is 1.0, but 0.25, 0.50 and 0.75 are also valid values. This can be used to take half a day off work.   # noqa: E501

        :param days: The days of this TimeRegistration.  # noqa: E501
        :type: float
        """

        self._days = days

    @property
    def employee_id(self):
        """Gets the employee_id of this TimeRegistration.  # noqa: E501

        The employee for the time registration.  # noqa: E501

        :return: The employee_id of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this TimeRegistration.

        The employee for the time registration.  # noqa: E501

        :param employee_id: The employee_id of this TimeRegistration.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and employee_id is None:  # noqa: E501
            raise ValueError("Invalid value for `employee_id`, must not be `None`")  # noqa: E501

        self._employee_id = employee_id

    @property
    def end(self):
        """Gets the end of this TimeRegistration.  # noqa: E501

        For time registrations of work done (`class = \"Hours\"`), this is the number of minutes since midnight (local time) this registration ends. For instance, if it ends at 18:00, this should be set to 1080. If the `start` + `hours` would be less than `end`, then the remaining time is assumed to be breaks. `end` cannot be a value so `start` + `hours` > `end`.   # noqa: E501

        :return: The end of this TimeRegistration.  # noqa: E501
        :rtype: float
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this TimeRegistration.

        For time registrations of work done (`class = \"Hours\"`), this is the number of minutes since midnight (local time) this registration ends. For instance, if it ends at 18:00, this should be set to 1080. If the `start` + `hours` would be less than `end`, then the remaining time is assumed to be breaks. `end` cannot be a value so `start` + `hours` > `end`.   # noqa: E501

        :param end: The end of this TimeRegistration.  # noqa: E501
        :type: float
        """

        self._end = end

    @property
    def hours(self):
        """Gets the hours of this TimeRegistration.  # noqa: E501

        For time registrations of work done (`class = \"Hours\"`), this is the number of hours worked.  # noqa: E501

        :return: The hours of this TimeRegistration.  # noqa: E501
        :rtype: float
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this TimeRegistration.

        For time registrations of work done (`class = \"Hours\"`), this is the number of hours worked.  # noqa: E501

        :param hours: The hours of this TimeRegistration.  # noqa: E501
        :type: float
        """

        self._hours = hours

    @property
    def immutable(self):
        """Gets the immutable of this TimeRegistration.  # noqa: E501

        Deprecated  # noqa: E501

        :return: The immutable of this TimeRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this TimeRegistration.

        Deprecated  # noqa: E501

        :param immutable: The immutable of this TimeRegistration.  # noqa: E501
        :type: bool
        """

        self._immutable = immutable

    @property
    def leave_type_id(self):
        """Gets the leave_type_id of this TimeRegistration.  # noqa: E501

        For `class = \"Leave\"`, this indicates the type of leave taken. You can get a list of valid IDs from [GetLeaveTypes](#operation/GetLeaveTypes).   # noqa: E501

        :return: The leave_type_id of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._leave_type_id

    @leave_type_id.setter
    def leave_type_id(self, leave_type_id):
        """Sets the leave_type_id of this TimeRegistration.

        For `class = \"Leave\"`, this indicates the type of leave taken. You can get a list of valid IDs from [GetLeaveTypes](#operation/GetLeaveTypes).   # noqa: E501

        :param leave_type_id: The leave_type_id of this TimeRegistration.  # noqa: E501
        :type: str
        """

        self._leave_type_id = leave_type_id

    @property
    def minutes(self):
        """Gets the minutes of this TimeRegistration.  # noqa: E501

        For registrations of flex time held (`class = \"Flex\"`), this is the number of minutes held. This can be used to take a fraction of a day off work.   # noqa: E501

        :return: The minutes of this TimeRegistration.  # noqa: E501
        :rtype: float
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this TimeRegistration.

        For registrations of flex time held (`class = \"Flex\"`), this is the number of minutes held. This can be used to take a fraction of a day off work.   # noqa: E501

        :param minutes: The minutes of this TimeRegistration.  # noqa: E501
        :type: float
        """

        self._minutes = minutes

    @property
    def note(self):
        """Gets the note of this TimeRegistration.  # noqa: E501

        Optional note the employee and employer can use.  # noqa: E501

        :return: The note of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TimeRegistration.

        Optional note the employee and employer can use.  # noqa: E501

        :param note: The note of this TimeRegistration.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def salary_type_id(self):
        """Gets the salary_type_id of this TimeRegistration.  # noqa: E501

        For `class = \"Hours\"`, this indicates the type of hours worked. You can get a list of valid IDs from [GetSalaryTypes](#operation/GetSalaryTypes).   # noqa: E501

        :return: The salary_type_id of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._salary_type_id

    @salary_type_id.setter
    def salary_type_id(self, salary_type_id):
        """Sets the salary_type_id of this TimeRegistration.

        For `class = \"Hours\"`, this indicates the type of hours worked. You can get a list of valid IDs from [GetSalaryTypes](#operation/GetSalaryTypes).   # noqa: E501

        :param salary_type_id: The salary_type_id of this TimeRegistration.  # noqa: E501
        :type: str
        """

        self._salary_type_id = salary_type_id

    @property
    def settled(self):
        """Gets the settled of this TimeRegistration.  # noqa: E501

        Deprecated  # noqa: E501

        :return: The settled of this TimeRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this TimeRegistration.

        Deprecated  # noqa: E501

        :param settled: The settled of this TimeRegistration.  # noqa: E501
        :type: bool
        """

        self._settled = settled

    @property
    def start(self):
        """Gets the start of this TimeRegistration.  # noqa: E501

        For time registrations of work done (`class = \"Hours\"`), this is the number of minutes since midnight (local time) this registration starts. For instance, if it starts at 10:00, this should be set to 600.   # noqa: E501

        :return: The start of this TimeRegistration.  # noqa: E501
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TimeRegistration.

        For time registrations of work done (`class = \"Hours\"`), this is the number of minutes since midnight (local time) this registration starts. For instance, if it starts at 10:00, this should be set to 600.   # noqa: E501

        :param start: The start of this TimeRegistration.  # noqa: E501
        :type: float
        """

        self._start = start

    @property
    def state(self):
        """Gets the state of this TimeRegistration.  # noqa: E501

        Only when `Pending` is the time registration still mutable.  # noqa: E501

        :return: The state of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TimeRegistration.

        Only when `Pending` is the time registration still mutable.  # noqa: E501

        :param state: The state of this TimeRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Settled", "Cancelled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type_name(self):
        """Gets the type_name of this TimeRegistration.  # noqa: E501

        Deprecated. Use salaryTypeID instead. For `class = \"Hours\"`, this indicates the type of hours worked. You can get a list of valid IDs from [GetSalaryTypes](#operation/GetSalaryTypes).   # noqa: E501

        :return: The type_name of this TimeRegistration.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this TimeRegistration.

        Deprecated. Use salaryTypeID instead. For `class = \"Hours\"`, this indicates the type of hours worked. You can get a list of valid IDs from [GetSalaryTypes](#operation/GetSalaryTypes).   # noqa: E501

        :param type_name: The type_name of this TimeRegistration.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeRegistration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeRegistration):
            return True

        return self.to_dict() != other.to_dict()
