# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class TimeRegistrationImportEmployees(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'can_import': 'bool',
        'email': 'str',
        'employee_id': 'str',
        'errors': 'TimeRegistrationImportErrors',
        'import_employee_id': 'str',
        'match_condition': 'str',
        'name': 'str',
        'name_salary': 'str',
        'national_id': 'str',
        'salary_types': 'list[TimeRegistrationImportSalaryTypes]'
    }

    attribute_map = {
        'can_import': 'canImport',
        'email': 'email',
        'employee_id': 'employeeID',
        'errors': 'errors',
        'import_employee_id': 'importEmployeeID',
        'match_condition': 'matchCondition',
        'name': 'name',
        'name_salary': 'nameSalary',
        'national_id': 'nationalID',
        'salary_types': 'salaryTypes'
    }

    def __init__(self, can_import=None, email=None, employee_id=None, errors=None, import_employee_id=None, match_condition=None, name=None, name_salary=None, national_id=None, salary_types=None, local_vars_configuration=None):  # noqa: E501
        """TimeRegistrationImportEmployees - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._can_import = None
        self._email = None
        self._employee_id = None
        self._errors = None
        self._import_employee_id = None
        self._match_condition = None
        self._name = None
        self._name_salary = None
        self._national_id = None
        self._salary_types = None
        self.discriminator = None

        if can_import is not None:
            self.can_import = can_import
        if email is not None:
            self.email = email
        self.employee_id = employee_id
        if errors is not None:
            self.errors = errors
        if import_employee_id is not None:
            self.import_employee_id = import_employee_id
        if match_condition is not None:
            self.match_condition = match_condition
        if name is not None:
            self.name = name
        if name_salary is not None:
            self.name_salary = name_salary
        if national_id is not None:
            self.national_id = national_id
        if salary_types is not None:
            self.salary_types = salary_types

    @property
    def can_import(self):
        """Gets the can_import of this TimeRegistrationImportEmployees.  # noqa: E501


        :return: The can_import of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: bool
        """
        return self._can_import

    @can_import.setter
    def can_import(self, can_import):
        """Sets the can_import of this TimeRegistrationImportEmployees.


        :param can_import: The can_import of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: bool
        """

        self._can_import = can_import

    @property
    def email(self):
        """Gets the email of this TimeRegistrationImportEmployees.  # noqa: E501


        :return: The email of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TimeRegistrationImportEmployees.


        :param email: The email of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def employee_id(self):
        """Gets the employee_id of this TimeRegistrationImportEmployees.  # noqa: E501

        The ID of the employee in Salary itself, if found  # noqa: E501

        :return: The employee_id of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this TimeRegistrationImportEmployees.

        The ID of the employee in Salary itself, if found  # noqa: E501

        :param employee_id: The employee_id of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def errors(self):
        """Gets the errors of this TimeRegistrationImportEmployees.  # noqa: E501


        :return: The errors of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: TimeRegistrationImportErrors
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this TimeRegistrationImportEmployees.


        :param errors: The errors of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: TimeRegistrationImportErrors
        """

        self._errors = errors

    @property
    def import_employee_id(self):
        """Gets the import_employee_id of this TimeRegistrationImportEmployees.  # noqa: E501

        A temporary ID used when modifying the import  # noqa: E501

        :return: The import_employee_id of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._import_employee_id

    @import_employee_id.setter
    def import_employee_id(self, import_employee_id):
        """Sets the import_employee_id of this TimeRegistrationImportEmployees.

        A temporary ID used when modifying the import  # noqa: E501

        :param import_employee_id: The import_employee_id of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: str
        """

        self._import_employee_id = import_employee_id

    @property
    def match_condition(self):
        """Gets the match_condition of this TimeRegistrationImportEmployees.  # noqa: E501

        On what field, the employee was matched (or not) between Salary and the external system, if `None`, no data in any of the fields was available  # noqa: E501

        :return: The match_condition of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._match_condition

    @match_condition.setter
    def match_condition(self, match_condition):
        """Sets the match_condition of this TimeRegistrationImportEmployees.

        On what field, the employee was matched (or not) between Salary and the external system, if `None`, no data in any of the fields was available  # noqa: E501

        :param match_condition: The match_condition of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "NationalID", "Email", "EmployeeNumber"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and match_condition not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `match_condition` ({0}), must be one of {1}"  # noqa: E501
                .format(match_condition, allowed_values)
            )

        self._match_condition = match_condition

    @property
    def name(self):
        """Gets the name of this TimeRegistrationImportEmployees.  # noqa: E501


        :return: The name of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeRegistrationImportEmployees.


        :param name: The name of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_salary(self):
        """Gets the name_salary of this TimeRegistrationImportEmployees.  # noqa: E501

        Their name in Salary (so they can be checked if they differ)  # noqa: E501

        :return: The name_salary of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._name_salary

    @name_salary.setter
    def name_salary(self, name_salary):
        """Sets the name_salary of this TimeRegistrationImportEmployees.

        Their name in Salary (so they can be checked if they differ)  # noqa: E501

        :param name_salary: The name_salary of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: str
        """

        self._name_salary = name_salary

    @property
    def national_id(self):
        """Gets the national_id of this TimeRegistrationImportEmployees.  # noqa: E501


        :return: The national_id of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: str
        """
        return self._national_id

    @national_id.setter
    def national_id(self, national_id):
        """Sets the national_id of this TimeRegistrationImportEmployees.


        :param national_id: The national_id of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: str
        """

        self._national_id = national_id

    @property
    def salary_types(self):
        """Gets the salary_types of this TimeRegistrationImportEmployees.  # noqa: E501

        Time registrations are sorted by type  # noqa: E501

        :return: The salary_types of this TimeRegistrationImportEmployees.  # noqa: E501
        :rtype: list[TimeRegistrationImportSalaryTypes]
        """
        return self._salary_types

    @salary_types.setter
    def salary_types(self, salary_types):
        """Sets the salary_types of this TimeRegistrationImportEmployees.

        Time registrations are sorted by type  # noqa: E501

        :param salary_types: The salary_types of this TimeRegistrationImportEmployees.  # noqa: E501
        :type: list[TimeRegistrationImportSalaryTypes]
        """

        self._salary_types = salary_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeRegistrationImportEmployees):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeRegistrationImportEmployees):
            return True

        return self.to_dict() != other.to_dict()
