# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class AccountingIntegrationSetupStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_plan': 'AccountPlan',
        'auth_url': 'str',
        'daybooks': 'list[AccountingIntegrationSetupStatusDaybooks]',
        'dimension_values': 'list[AccountingIntegrationSetupStatusDimensionValues]',
        'dimensions': 'list[AccountingIntegrationSetupStatusDimensions]',
        'next': 'str',
        'organizations': 'list[AccountingIntegrationSetupStatusOrganizations]',
        'state': 'str'
    }

    attribute_map = {
        'account_plan': 'accountPlan',
        'auth_url': 'authURL',
        'daybooks': 'daybooks',
        'dimension_values': 'dimensionValues',
        'dimensions': 'dimensions',
        'next': 'next',
        'organizations': 'organizations',
        'state': 'state'
    }

    def __init__(self, account_plan=None, auth_url=None, daybooks=None, dimension_values=None, dimensions=None, next=None, organizations=None, state=None, local_vars_configuration=None):  # noqa: E501
        """AccountingIntegrationSetupStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_plan = None
        self._auth_url = None
        self._daybooks = None
        self._dimension_values = None
        self._dimensions = None
        self._next = None
        self._organizations = None
        self._state = None
        self.discriminator = None

        if account_plan is not None:
            self.account_plan = account_plan
        if auth_url is not None:
            self.auth_url = auth_url
        if daybooks is not None:
            self.daybooks = daybooks
        if dimension_values is not None:
            self.dimension_values = dimension_values
        if dimensions is not None:
            self.dimensions = dimensions
        if next is not None:
            self.next = next
        if organizations is not None:
            self.organizations = organizations
        if state is not None:
            self.state = state

    @property
    def account_plan(self):
        """Gets the account_plan of this AccountingIntegrationSetupStatus.  # noqa: E501


        :return: The account_plan of this AccountingIntegrationSetupStatus.  # noqa: E501
        :rtype: AccountPlan
        """
        return self._account_plan

    @account_plan.setter
    def account_plan(self, account_plan):
        """Sets the account_plan of this AccountingIntegrationSetupStatus.


        :param account_plan: The account_plan of this AccountingIntegrationSetupStatus.  # noqa: E501
        :type: AccountPlan
        """

        self._account_plan = account_plan

    @property
    def auth_url(self):
        """Gets the auth_url of this AccountingIntegrationSetupStatus.  # noqa: E501

        Returned when an authentication from the frontend is required  # noqa: E501

        :return: The auth_url of this AccountingIntegrationSetupStatus.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this AccountingIntegrationSetupStatus.

        Returned when an authentication from the frontend is required  # noqa: E501

        :param auth_url: The auth_url of this AccountingIntegrationSetupStatus.  # noqa: E501
        :type: str
        """

        self._auth_url = auth_url

    @property
    def daybooks(self):
        """Gets the daybooks of this AccountingIntegrationSetupStatus.  # noqa: E501

        Returned when a daybook must be selected  # noqa: E501

        :return: The daybooks of this AccountingIntegrationSetupStatus.  # noqa: E501
        :rtype: list[AccountingIntegrationSetupStatusDaybooks]
        """
        return self._daybooks

    @daybooks.setter
    def daybooks(self, daybooks):
        """Sets the daybooks of this AccountingIntegrationSetupStatus.

        Returned when a daybook must be selected  # noqa: E501

        :param daybooks: The daybooks of this AccountingIntegrationSetupStatus.  # noqa: E501
        :type: list[AccountingIntegrationSetupStatusDaybooks]
        """

        self._daybooks = daybooks

    @property
    def dimension_values(self):
        """Gets the dimension_values of this AccountingIntegrationSetupStatus.  # noqa: E501

        Returned when deciding whether to chose to use dimensions or not, if using dimension values  # noqa: E501

        :return: The dimension_values of this AccountingIntegrationSetupStatus.  # noqa: E501
        :rtype: list[AccountingIntegrationSetupStatusDimensionValues]
        """
        return self._dimension_values

    @dimension_values.setter
    def dimension_values(self, dimension_values):
        """Sets the dimension_values of this AccountingIntegrationSetupStatus.

        Returned when deciding whether to chose to use dimensions or not, if using dimension values  # noqa: E501

        :param dimension_values: The dimension_values of this AccountingIntegrationSetupStatus.  # noqa: E501
        :type: list[AccountingIntegrationSetupStatusDimensionValues]
        """

        self._dimension_values = dimension_values

    @property
    def dimensions(self):
        """Gets the dimensions of this AccountingIntegrationSetupStatus.  # noqa: E501

        When not using dimension values, this is displayed for using dimensions or not; when using values, a dimensionID must be chosen so the values can map to cost centers and departments  # noqa: E501

        :return: The dimensions of this AccountingIntegrationSetupStatus.  # noqa: E501
        :rtype: list[AccountingIntegrationSetupStatusDimensions]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this AccountingIntegrationSetupStatus.

        When not using dimension values, this is displayed for using dimensions or not; when using values, a dimensionID must be chosen so the values can map to cost centers and departments  # noqa: E501

        :param dimensions: The dimensions of this AccountingIntegrationSetupStatus.  # noqa: E501
        :type: list[AccountingIntegrationSetupStatusDimensions]
        """

        self._dimensions = dimensions

    @property
    def next(self):
        """Gets the next of this AccountingIntegrationSetupStatus.  # noqa: E501

        Next step  # noqa: E501

        :return: The next of this AccountingIntegrationSetupStatus.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this AccountingIntegrationSetupStatus.

        Next step  # noqa: E501

        :param next: The next of this AccountingIntegrationSetupStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NeedKey", "NeedAuth", "ChooseOrganization", "ChooseDaybook", "ChooseDimension", "ChooseToUseDimensions", "MapAccounts", "Done"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and next not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `next` ({0}), must be one of {1}"  # noqa: E501
                .format(next, allowed_values)
            )

        self._next = next

    @property
    def organizations(self):
        """Gets the organizations of this AccountingIntegrationSetupStatus.  # noqa: E501

        Returned when a organization must be selected  # noqa: E501

        :return: The organizations of this AccountingIntegrationSetupStatus.  # noqa: E501
        :rtype: list[AccountingIntegrationSetupStatusOrganizations]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this AccountingIntegrationSetupStatus.

        Returned when a organization must be selected  # noqa: E501

        :param organizations: The organizations of this AccountingIntegrationSetupStatus.  # noqa: E501
        :type: list[AccountingIntegrationSetupStatusOrganizations]
        """

        self._organizations = organizations

    @property
    def state(self):
        """Gets the state of this AccountingIntegrationSetupStatus.  # noqa: E501

        The state token reference to this accounting integration set up  # noqa: E501

        :return: The state of this AccountingIntegrationSetupStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AccountingIntegrationSetupStatus.

        The state token reference to this accounting integration set up  # noqa: E501

        :param state: The state of this AccountingIntegrationSetupStatus.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingIntegrationSetupStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountingIntegrationSetupStatus):
            return True

        return self.to_dict() != other.to_dict()
