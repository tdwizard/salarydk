# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class EmployeeContract(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cached_salary_amount': 'float',
        'car_allowance_rate': 'float',
        'car_allowance_registration_method_type': 'str',
        'company_id': 'str',
        'contract_template_id': 'str',
        'day_laborer': 'str',
        'employee_id': 'str',
        'employment_id': 'str',
        'employment_position_id': 'str',
        'employment_type': 'str',
        'extra_tax_percentage': 'int',
        'family_leave_fund': 'str',
        'id': 'str',
        'manual_vacation_fund': 'bool',
        'period_work_hours': 'float',
        'position': 'str',
        'production_unit_id': 'str',
        'remuneration': 'Remuneration',
        'remuneration_type': 'str',
        'salary_cycle_id': 'str',
        'time_registration_method_type': 'str',
        'vacation_fund_cvr': 'str',
        'valid_from': 'date',
        'valid_to': 'date',
        'weekly_hours': 'float',
        'weekly_work_days': 'float',
        'work_schedule': 'str',
        'work_week': 'list[str]'
    }

    attribute_map = {
        'cached_salary_amount': 'cachedSalaryAmount',
        'car_allowance_rate': 'carAllowanceRate',
        'car_allowance_registration_method_type': 'carAllowanceRegistrationMethodType',
        'company_id': 'companyID',
        'contract_template_id': 'contractTemplateID',
        'day_laborer': 'dayLaborer',
        'employee_id': 'employeeID',
        'employment_id': 'employmentID',
        'employment_position_id': 'employmentPositionID',
        'employment_type': 'employmentType',
        'extra_tax_percentage': 'extraTaxPercentage',
        'family_leave_fund': 'familyLeaveFund',
        'id': 'id',
        'manual_vacation_fund': 'manualVacationFund',
        'period_work_hours': 'periodWorkHours',
        'position': 'position',
        'production_unit_id': 'productionUnitID',
        'remuneration': 'remuneration',
        'remuneration_type': 'remunerationType',
        'salary_cycle_id': 'salaryCycleID',
        'time_registration_method_type': 'timeRegistrationMethodType',
        'vacation_fund_cvr': 'vacationFundCVR',
        'valid_from': 'validFrom',
        'valid_to': 'validTo',
        'weekly_hours': 'weeklyHours',
        'weekly_work_days': 'weeklyWorkDays',
        'work_schedule': 'workSchedule',
        'work_week': 'workWeek'
    }

    def __init__(self, cached_salary_amount=None, car_allowance_rate=None, car_allowance_registration_method_type='Detailed', company_id=None, contract_template_id=None, day_laborer=None, employee_id=None, employment_id=None, employment_position_id=None, employment_type='Ordinary', extra_tax_percentage=None, family_leave_fund='DK Barsel.dk', id=None, manual_vacation_fund=None, period_work_hours=None, position=None, production_unit_id=None, remuneration=None, remuneration_type=None, salary_cycle_id=None, time_registration_method_type=None, vacation_fund_cvr=None, valid_from=None, valid_to=None, weekly_hours=None, weekly_work_days=None, work_schedule='None', work_week=None, local_vars_configuration=None):  # noqa: E501
        """EmployeeContract - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cached_salary_amount = None
        self._car_allowance_rate = None
        self._car_allowance_registration_method_type = None
        self._company_id = None
        self._contract_template_id = None
        self._day_laborer = None
        self._employee_id = None
        self._employment_id = None
        self._employment_position_id = None
        self._employment_type = None
        self._extra_tax_percentage = None
        self._family_leave_fund = None
        self._id = None
        self._manual_vacation_fund = None
        self._period_work_hours = None
        self._position = None
        self._production_unit_id = None
        self._remuneration = None
        self._remuneration_type = None
        self._salary_cycle_id = None
        self._time_registration_method_type = None
        self._vacation_fund_cvr = None
        self._valid_from = None
        self._valid_to = None
        self._weekly_hours = None
        self._weekly_work_days = None
        self._work_schedule = None
        self._work_week = None
        self.discriminator = None

        if cached_salary_amount is not None:
            self.cached_salary_amount = cached_salary_amount
        self.car_allowance_rate = car_allowance_rate
        if car_allowance_registration_method_type is not None:
            self.car_allowance_registration_method_type = car_allowance_registration_method_type
        if company_id is not None:
            self.company_id = company_id
        self.contract_template_id = contract_template_id
        if day_laborer is not None:
            self.day_laborer = day_laborer
        if employee_id is not None:
            self.employee_id = employee_id
        self.employment_id = employment_id
        self.employment_position_id = employment_position_id
        if employment_type is not None:
            self.employment_type = employment_type
        self.extra_tax_percentage = extra_tax_percentage
        self.family_leave_fund = family_leave_fund
        if id is not None:
            self.id = id
        self.manual_vacation_fund = manual_vacation_fund
        self.period_work_hours = period_work_hours
        if position is not None:
            self.position = position
        self.production_unit_id = production_unit_id
        if remuneration is not None:
            self.remuneration = remuneration
        if remuneration_type is not None:
            self.remuneration_type = remuneration_type
        self.salary_cycle_id = salary_cycle_id
        self.time_registration_method_type = time_registration_method_type
        self.vacation_fund_cvr = vacation_fund_cvr
        self.valid_from = valid_from
        self.valid_to = valid_to
        self.weekly_hours = weekly_hours
        if weekly_work_days is not None:
            self.weekly_work_days = weekly_work_days
        if work_schedule is not None:
            self.work_schedule = work_schedule
        if work_week is not None:
            self.work_week = work_week

    @property
    def cached_salary_amount(self):
        """Gets the cached_salary_amount of this EmployeeContract.  # noqa: E501

        The amount to show as salary next to each employee. Is calculated from the salary definitions of the remuneration  # noqa: E501

        :return: The cached_salary_amount of this EmployeeContract.  # noqa: E501
        :rtype: float
        """
        return self._cached_salary_amount

    @cached_salary_amount.setter
    def cached_salary_amount(self, cached_salary_amount):
        """Sets the cached_salary_amount of this EmployeeContract.

        The amount to show as salary next to each employee. Is calculated from the salary definitions of the remuneration  # noqa: E501

        :param cached_salary_amount: The cached_salary_amount of this EmployeeContract.  # noqa: E501
        :type: float
        """

        self._cached_salary_amount = cached_salary_amount

    @property
    def car_allowance_rate(self):
        """Gets the car_allowance_rate of this EmployeeContract.  # noqa: E501

        Override of the default car allowance rate.  # noqa: E501

        :return: The car_allowance_rate of this EmployeeContract.  # noqa: E501
        :rtype: float
        """
        return self._car_allowance_rate

    @car_allowance_rate.setter
    def car_allowance_rate(self, car_allowance_rate):
        """Sets the car_allowance_rate of this EmployeeContract.

        Override of the default car allowance rate.  # noqa: E501

        :param car_allowance_rate: The car_allowance_rate of this EmployeeContract.  # noqa: E501
        :type: float
        """

        self._car_allowance_rate = car_allowance_rate

    @property
    def car_allowance_registration_method_type(self):
        """Gets the car_allowance_registration_method_type of this EmployeeContract.  # noqa: E501

        The method used when registering car allowance in the frontend for this employee.  # noqa: E501

        :return: The car_allowance_registration_method_type of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._car_allowance_registration_method_type

    @car_allowance_registration_method_type.setter
    def car_allowance_registration_method_type(self, car_allowance_registration_method_type):
        """Sets the car_allowance_registration_method_type of this EmployeeContract.

        The method used when registering car allowance in the frontend for this employee.  # noqa: E501

        :param car_allowance_registration_method_type: The car_allowance_registration_method_type of this EmployeeContract.  # noqa: E501
        :type: str
        """
        allowed_values = ["Coarse", "Detailed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and car_allowance_registration_method_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `car_allowance_registration_method_type` ({0}), must be one of {1}"  # noqa: E501
                .format(car_allowance_registration_method_type, allowed_values)
            )

        self._car_allowance_registration_method_type = car_allowance_registration_method_type

    @property
    def company_id(self):
        """Gets the company_id of this EmployeeContract.  # noqa: E501

        The ID of the company.  # noqa: E501

        :return: The company_id of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this EmployeeContract.

        The ID of the company.  # noqa: E501

        :param company_id: The company_id of this EmployeeContract.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def contract_template_id(self):
        """Gets the contract_template_id of this EmployeeContract.  # noqa: E501

        The template that created this contract  # noqa: E501

        :return: The contract_template_id of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._contract_template_id

    @contract_template_id.setter
    def contract_template_id(self, contract_template_id):
        """Sets the contract_template_id of this EmployeeContract.

        The template that created this contract  # noqa: E501

        :param contract_template_id: The contract_template_id of this EmployeeContract.  # noqa: E501
        :type: str
        """

        self._contract_template_id = contract_template_id

    @property
    def day_laborer(self):
        """Gets the day_laborer of this EmployeeContract.  # noqa: E501

        Determines whether the employee is a day laborer or not. If the employee is a day laborer, it also determines how vacation days are calculated.  # noqa: E501

        :return: The day_laborer of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._day_laborer

    @day_laborer.setter
    def day_laborer(self, day_laborer):
        """Sets the day_laborer of this EmployeeContract.

        Determines whether the employee is a day laborer or not. If the employee is a day laborer, it also determines how vacation days are calculated.  # noqa: E501

        :param day_laborer: The day_laborer of this EmployeeContract.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Hours", "Days"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and day_laborer not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `day_laborer` ({0}), must be one of {1}"  # noqa: E501
                .format(day_laborer, allowed_values)
            )

        self._day_laborer = day_laborer

    @property
    def employee_id(self):
        """Gets the employee_id of this EmployeeContract.  # noqa: E501

        The ID of the employee.  # noqa: E501

        :return: The employee_id of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this EmployeeContract.

        The ID of the employee.  # noqa: E501

        :param employee_id: The employee_id of this EmployeeContract.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def employment_id(self):
        """Gets the employment_id of this EmployeeContract.  # noqa: E501

        The ID of the employment.  # noqa: E501

        :return: The employment_id of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._employment_id

    @employment_id.setter
    def employment_id(self, employment_id):
        """Sets the employment_id of this EmployeeContract.

        The ID of the employment.  # noqa: E501

        :param employment_id: The employment_id of this EmployeeContract.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and employment_id is None:  # noqa: E501
            raise ValueError("Invalid value for `employment_id`, must not be `None`")  # noqa: E501

        self._employment_id = employment_id

    @property
    def employment_position_id(self):
        """Gets the employment_position_id of this EmployeeContract.  # noqa: E501

        The ID of the standard employment position the employee has in the company.  # noqa: E501

        :return: The employment_position_id of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._employment_position_id

    @employment_position_id.setter
    def employment_position_id(self, employment_position_id):
        """Sets the employment_position_id of this EmployeeContract.

        The ID of the standard employment position the employee has in the company.  # noqa: E501

        :param employment_position_id: The employment_position_id of this EmployeeContract.  # noqa: E501
        :type: str
        """

        self._employment_position_id = employment_position_id

    @property
    def employment_type(self):
        """Gets the employment_type of this EmployeeContract.  # noqa: E501

        The employment type.  # noqa: E501

        :return: The employment_type of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._employment_type

    @employment_type.setter
    def employment_type(self, employment_type):
        """Sets the employment_type of this EmployeeContract.

        The employment type.  # noqa: E501

        :param employment_type: The employment_type of this EmployeeContract.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ordinary", "Freelance"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and employment_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `employment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(employment_type, allowed_values)
            )

        self._employment_type = employment_type

    @property
    def extra_tax_percentage(self):
        """Gets the extra_tax_percentage of this EmployeeContract.  # noqa: E501

        Extra tax percentage to deduct from salary.  # noqa: E501

        :return: The extra_tax_percentage of this EmployeeContract.  # noqa: E501
        :rtype: int
        """
        return self._extra_tax_percentage

    @extra_tax_percentage.setter
    def extra_tax_percentage(self, extra_tax_percentage):
        """Sets the extra_tax_percentage of this EmployeeContract.

        Extra tax percentage to deduct from salary.  # noqa: E501

        :param extra_tax_percentage: The extra_tax_percentage of this EmployeeContract.  # noqa: E501
        :type: int
        """

        self._extra_tax_percentage = extra_tax_percentage

    @property
    def family_leave_fund(self):
        """Gets the family_leave_fund of this EmployeeContract.  # noqa: E501

        The choice of family leave fund. If not set Barsel.dk is used.  # noqa: E501

        :return: The family_leave_fund of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._family_leave_fund

    @family_leave_fund.setter
    def family_leave_fund(self, family_leave_fund):
        """Sets the family_leave_fund of this EmployeeContract.

        The choice of family leave fund. If not set Barsel.dk is used.  # noqa: E501

        :param family_leave_fund: The family_leave_fund of this EmployeeContract.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"DK Barsel.dk", "DK DABarsel", "DK Partial Barsel.dk", "DK Other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and family_leave_fund not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `family_leave_fund` ({0}), must be one of {1}"  # noqa: E501
                .format(family_leave_fund, allowed_values)
            )

        self._family_leave_fund = family_leave_fund

    @property
    def id(self):
        """Gets the id of this EmployeeContract.  # noqa: E501

        The ID of the contract.  # noqa: E501

        :return: The id of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmployeeContract.

        The ID of the contract.  # noqa: E501

        :param id: The id of this EmployeeContract.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def manual_vacation_fund(self):
        """Gets the manual_vacation_fund of this EmployeeContract.  # noqa: E501

        Determines whether or not the vacation fund CVR is manual or not.  # noqa: E501

        :return: The manual_vacation_fund of this EmployeeContract.  # noqa: E501
        :rtype: bool
        """
        return self._manual_vacation_fund

    @manual_vacation_fund.setter
    def manual_vacation_fund(self, manual_vacation_fund):
        """Sets the manual_vacation_fund of this EmployeeContract.

        Determines whether or not the vacation fund CVR is manual or not.  # noqa: E501

        :param manual_vacation_fund: The manual_vacation_fund of this EmployeeContract.  # noqa: E501
        :type: bool
        """

        self._manual_vacation_fund = manual_vacation_fund

    @property
    def period_work_hours(self):
        """Gets the period_work_hours of this EmployeeContract.  # noqa: E501

        Override of the number of work hours to report for each period.  # noqa: E501

        :return: The period_work_hours of this EmployeeContract.  # noqa: E501
        :rtype: float
        """
        return self._period_work_hours

    @period_work_hours.setter
    def period_work_hours(self, period_work_hours):
        """Sets the period_work_hours of this EmployeeContract.

        Override of the number of work hours to report for each period.  # noqa: E501

        :param period_work_hours: The period_work_hours of this EmployeeContract.  # noqa: E501
        :type: float
        """

        self._period_work_hours = period_work_hours

    @property
    def position(self):
        """Gets the position of this EmployeeContract.  # noqa: E501

        A description of the position the employee has in the company.  # noqa: E501

        :return: The position of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EmployeeContract.

        A description of the position the employee has in the company.  # noqa: E501

        :param position: The position of this EmployeeContract.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def production_unit_id(self):
        """Gets the production_unit_id of this EmployeeContract.  # noqa: E501

        The ID of the production unit this employee is working at.  IDs for production units can be obtained through [GetCompanies](#operation/GetCompanies).  # noqa: E501

        :return: The production_unit_id of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._production_unit_id

    @production_unit_id.setter
    def production_unit_id(self, production_unit_id):
        """Sets the production_unit_id of this EmployeeContract.

        The ID of the production unit this employee is working at.  IDs for production units can be obtained through [GetCompanies](#operation/GetCompanies).  # noqa: E501

        :param production_unit_id: The production_unit_id of this EmployeeContract.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and production_unit_id is None:  # noqa: E501
            raise ValueError("Invalid value for `production_unit_id`, must not be `None`")  # noqa: E501

        self._production_unit_id = production_unit_id

    @property
    def remuneration(self):
        """Gets the remuneration of this EmployeeContract.  # noqa: E501


        :return: The remuneration of this EmployeeContract.  # noqa: E501
        :rtype: Remuneration
        """
        return self._remuneration

    @remuneration.setter
    def remuneration(self, remuneration):
        """Sets the remuneration of this EmployeeContract.


        :param remuneration: The remuneration of this EmployeeContract.  # noqa: E501
        :type: Remuneration
        """

        self._remuneration = remuneration

    @property
    def remuneration_type(self):
        """Gets the remuneration_type of this EmployeeContract.  # noqa: E501

        The remuneration type of the contract. Is calculated from the salary definitions of the remuneration  # noqa: E501

        :return: The remuneration_type of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._remuneration_type

    @remuneration_type.setter
    def remuneration_type(self, remuneration_type):
        """Sets the remuneration_type of this EmployeeContract.

        The remuneration type of the contract. Is calculated from the salary definitions of the remuneration  # noqa: E501

        :param remuneration_type: The remuneration_type of this EmployeeContract.  # noqa: E501
        :type: str
        """
        allowed_values = ["Salaried", "Hourly", "Commissioned"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and remuneration_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `remuneration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(remuneration_type, allowed_values)
            )

        self._remuneration_type = remuneration_type

    @property
    def salary_cycle_id(self):
        """Gets the salary_cycle_id of this EmployeeContract.  # noqa: E501

        The ID of the salary cycle this contract follows.  # noqa: E501

        :return: The salary_cycle_id of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._salary_cycle_id

    @salary_cycle_id.setter
    def salary_cycle_id(self, salary_cycle_id):
        """Sets the salary_cycle_id of this EmployeeContract.

        The ID of the salary cycle this contract follows.  # noqa: E501

        :param salary_cycle_id: The salary_cycle_id of this EmployeeContract.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and salary_cycle_id is None:  # noqa: E501
            raise ValueError("Invalid value for `salary_cycle_id`, must not be `None`")  # noqa: E501

        self._salary_cycle_id = salary_cycle_id

    @property
    def time_registration_method_type(self):
        """Gets the time_registration_method_type of this EmployeeContract.  # noqa: E501

        The method used when registering hours in the frontend for this employee.  # noqa: E501

        :return: The time_registration_method_type of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._time_registration_method_type

    @time_registration_method_type.setter
    def time_registration_method_type(self, time_registration_method_type):
        """Sets the time_registration_method_type of this EmployeeContract.

        The method used when registering hours in the frontend for this employee.  # noqa: E501

        :param time_registration_method_type: The time_registration_method_type of this EmployeeContract.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and time_registration_method_type is None:  # noqa: E501
            raise ValueError("Invalid value for `time_registration_method_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Coarse", "Detailed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and time_registration_method_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `time_registration_method_type` ({0}), must be one of {1}"  # noqa: E501
                .format(time_registration_method_type, allowed_values)
            )

        self._time_registration_method_type = time_registration_method_type

    @property
    def vacation_fund_cvr(self):
        """Gets the vacation_fund_cvr of this EmployeeContract.  # noqa: E501

        Override the CVR number of the vacation fund.  # noqa: E501

        :return: The vacation_fund_cvr of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._vacation_fund_cvr

    @vacation_fund_cvr.setter
    def vacation_fund_cvr(self, vacation_fund_cvr):
        """Sets the vacation_fund_cvr of this EmployeeContract.

        Override the CVR number of the vacation fund.  # noqa: E501

        :param vacation_fund_cvr: The vacation_fund_cvr of this EmployeeContract.  # noqa: E501
        :type: str
        """

        self._vacation_fund_cvr = vacation_fund_cvr

    @property
    def valid_from(self):
        """Gets the valid_from of this EmployeeContract.  # noqa: E501

        The start of the validity period of this contract.  # noqa: E501

        :return: The valid_from of this EmployeeContract.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this EmployeeContract.

        The start of the validity period of this contract.  # noqa: E501

        :param valid_from: The valid_from of this EmployeeContract.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and valid_from is None:  # noqa: E501
            raise ValueError("Invalid value for `valid_from`, must not be `None`")  # noqa: E501

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this EmployeeContract.  # noqa: E501

        The end of the validity period of this contract, if any.  # noqa: E501

        :return: The valid_to of this EmployeeContract.  # noqa: E501
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this EmployeeContract.

        The end of the validity period of this contract, if any.  # noqa: E501

        :param valid_to: The valid_to of this EmployeeContract.  # noqa: E501
        :type: date
        """

        self._valid_to = valid_to

    @property
    def weekly_hours(self):
        """Gets the weekly_hours of this EmployeeContract.  # noqa: E501

        The number of hours the employee is at work in a normal week.  # noqa: E501

        :return: The weekly_hours of this EmployeeContract.  # noqa: E501
        :rtype: float
        """
        return self._weekly_hours

    @weekly_hours.setter
    def weekly_hours(self, weekly_hours):
        """Sets the weekly_hours of this EmployeeContract.

        The number of hours the employee is at work in a normal week.  # noqa: E501

        :param weekly_hours: The weekly_hours of this EmployeeContract.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and weekly_hours is None:  # noqa: E501
            raise ValueError("Invalid value for `weekly_hours`, must not be `None`")  # noqa: E501

        self._weekly_hours = weekly_hours

    @property
    def weekly_work_days(self):
        """Gets the weekly_work_days of this EmployeeContract.  # noqa: E501

        The number of days the employee is at work in a normal week.  # noqa: E501

        :return: The weekly_work_days of this EmployeeContract.  # noqa: E501
        :rtype: float
        """
        return self._weekly_work_days

    @weekly_work_days.setter
    def weekly_work_days(self, weekly_work_days):
        """Sets the weekly_work_days of this EmployeeContract.

        The number of days the employee is at work in a normal week.  # noqa: E501

        :param weekly_work_days: The weekly_work_days of this EmployeeContract.  # noqa: E501
        :type: float
        """

        self._weekly_work_days = weekly_work_days

    @property
    def work_schedule(self):
        """Gets the work_schedule of this EmployeeContract.  # noqa: E501

        The strategy to use for default hours set in new periods for hourly employees.  # noqa: E501

        :return: The work_schedule of this EmployeeContract.  # noqa: E501
        :rtype: str
        """
        return self._work_schedule

    @work_schedule.setter
    def work_schedule(self, work_schedule):
        """Sets the work_schedule of this EmployeeContract.

        The strategy to use for default hours set in new periods for hourly employees.  # noqa: E501

        :param work_schedule: The work_schedule of this EmployeeContract.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Fixed", "Calendar"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and work_schedule not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `work_schedule` ({0}), must be one of {1}"  # noqa: E501
                .format(work_schedule, allowed_values)
            )

        self._work_schedule = work_schedule

    @property
    def work_week(self):
        """Gets the work_week of this EmployeeContract.  # noqa: E501

        Defines the work week for the given employee. It is a list of week days.  # noqa: E501

        :return: The work_week of this EmployeeContract.  # noqa: E501
        :rtype: list[str]
        """
        return self._work_week

    @work_week.setter
    def work_week(self, work_week):
        """Sets the work_week of this EmployeeContract.

        Defines the work week for the given employee. It is a list of week days.  # noqa: E501

        :param work_week: The work_week of this EmployeeContract.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(work_week).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `work_week` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(work_week) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._work_week = work_week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeeContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmployeeContract):
            return True

        return self.to_dict() != other.to_dict()
