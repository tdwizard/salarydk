# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class SupplementType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company_id': 'str',
        'compensation_type': 'str',
        'cycle': 'str',
        'cycle_start': 'float',
        'id': 'str',
        'include_in_pension_basis': 'bool',
        'max_compensation_rate': 'float',
        'min_compensation_rate': 'float',
        'name': 'str',
        'payout_on_expiration': 'bool',
        'payout_on_termination': 'bool',
        'title': 'str',
        'vesting': 'str'
    }

    attribute_map = {
        'company_id': 'companyID',
        'compensation_type': 'compensationType',
        'cycle': 'cycle',
        'cycle_start': 'cycleStart',
        'id': 'id',
        'include_in_pension_basis': 'includeInPensionBasis',
        'max_compensation_rate': 'maxCompensationRate',
        'min_compensation_rate': 'minCompensationRate',
        'name': 'name',
        'payout_on_expiration': 'payoutOnExpiration',
        'payout_on_termination': 'payoutOnTermination',
        'title': 'title',
        'vesting': 'vesting'
    }

    def __init__(self, company_id=None, compensation_type=None, cycle=None, cycle_start=None, id=None, include_in_pension_basis=None, max_compensation_rate=None, min_compensation_rate=None, name=None, payout_on_expiration=None, payout_on_termination=None, title=None, vesting=None, local_vars_configuration=None):  # noqa: E501
        """SupplementType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._company_id = None
        self._compensation_type = None
        self._cycle = None
        self._cycle_start = None
        self._id = None
        self._include_in_pension_basis = None
        self._max_compensation_rate = None
        self._min_compensation_rate = None
        self._name = None
        self._payout_on_expiration = None
        self._payout_on_termination = None
        self._title = None
        self._vesting = None
        self.discriminator = None

        if company_id is not None:
            self.company_id = company_id
        self.compensation_type = compensation_type
        self.cycle = cycle
        self.cycle_start = cycle_start
        if id is not None:
            self.id = id
        self.include_in_pension_basis = include_in_pension_basis
        self.max_compensation_rate = max_compensation_rate
        self.min_compensation_rate = min_compensation_rate
        if name is not None:
            self.name = name
        self.payout_on_expiration = payout_on_expiration
        self.payout_on_termination = payout_on_termination
        self.title = title
        self.vesting = vesting

    @property
    def company_id(self):
        """Gets the company_id of this SupplementType.  # noqa: E501


        :return: The company_id of this SupplementType.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this SupplementType.


        :param company_id: The company_id of this SupplementType.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def compensation_type(self):
        """Gets the compensation_type of this SupplementType.  # noqa: E501


        :return: The compensation_type of this SupplementType.  # noqa: E501
        :rtype: str
        """
        return self._compensation_type

    @compensation_type.setter
    def compensation_type(self, compensation_type):
        """Sets the compensation_type of this SupplementType.


        :param compensation_type: The compensation_type of this SupplementType.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and compensation_type is None:  # noqa: E501
            raise ValueError("Invalid value for `compensation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Salary", "Contract", "AmountAccrual", "Amount", "Account", "DenmarkVacationBasis", "DenmarkVacationSpecial"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and compensation_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `compensation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(compensation_type, allowed_values)
            )

        self._compensation_type = compensation_type

    @property
    def cycle(self):
        """Gets the cycle of this SupplementType.  # noqa: E501


        :return: The cycle of this SupplementType.  # noqa: E501
        :rtype: str
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this SupplementType.


        :param cycle: The cycle of this SupplementType.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cycle is None:  # noqa: E501
            raise ValueError("Invalid value for `cycle`, must not be `None`")  # noqa: E501
        allowed_values = ["SalaryPeriod", "Monthly", "Quarterly", "Biannually", "Yearly"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cycle not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cycle` ({0}), must be one of {1}"  # noqa: E501
                .format(cycle, allowed_values)
            )

        self._cycle = cycle

    @property
    def cycle_start(self):
        """Gets the cycle_start of this SupplementType.  # noqa: E501


        :return: The cycle_start of this SupplementType.  # noqa: E501
        :rtype: float
        """
        return self._cycle_start

    @cycle_start.setter
    def cycle_start(self, cycle_start):
        """Sets the cycle_start of this SupplementType.


        :param cycle_start: The cycle_start of this SupplementType.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and cycle_start is None:  # noqa: E501
            raise ValueError("Invalid value for `cycle_start`, must not be `None`")  # noqa: E501

        self._cycle_start = cycle_start

    @property
    def id(self):
        """Gets the id of this SupplementType.  # noqa: E501


        :return: The id of this SupplementType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupplementType.


        :param id: The id of this SupplementType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def include_in_pension_basis(self):
        """Gets the include_in_pension_basis of this SupplementType.  # noqa: E501


        :return: The include_in_pension_basis of this SupplementType.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_pension_basis

    @include_in_pension_basis.setter
    def include_in_pension_basis(self, include_in_pension_basis):
        """Sets the include_in_pension_basis of this SupplementType.


        :param include_in_pension_basis: The include_in_pension_basis of this SupplementType.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and include_in_pension_basis is None:  # noqa: E501
            raise ValueError("Invalid value for `include_in_pension_basis`, must not be `None`")  # noqa: E501

        self._include_in_pension_basis = include_in_pension_basis

    @property
    def max_compensation_rate(self):
        """Gets the max_compensation_rate of this SupplementType.  # noqa: E501


        :return: The max_compensation_rate of this SupplementType.  # noqa: E501
        :rtype: float
        """
        return self._max_compensation_rate

    @max_compensation_rate.setter
    def max_compensation_rate(self, max_compensation_rate):
        """Sets the max_compensation_rate of this SupplementType.


        :param max_compensation_rate: The max_compensation_rate of this SupplementType.  # noqa: E501
        :type: float
        """

        self._max_compensation_rate = max_compensation_rate

    @property
    def min_compensation_rate(self):
        """Gets the min_compensation_rate of this SupplementType.  # noqa: E501


        :return: The min_compensation_rate of this SupplementType.  # noqa: E501
        :rtype: float
        """
        return self._min_compensation_rate

    @min_compensation_rate.setter
    def min_compensation_rate(self, min_compensation_rate):
        """Sets the min_compensation_rate of this SupplementType.


        :param min_compensation_rate: The min_compensation_rate of this SupplementType.  # noqa: E501
        :type: float
        """

        self._min_compensation_rate = min_compensation_rate

    @property
    def name(self):
        """Gets the name of this SupplementType.  # noqa: E501


        :return: The name of this SupplementType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupplementType.


        :param name: The name of this SupplementType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def payout_on_expiration(self):
        """Gets the payout_on_expiration of this SupplementType.  # noqa: E501


        :return: The payout_on_expiration of this SupplementType.  # noqa: E501
        :rtype: bool
        """
        return self._payout_on_expiration

    @payout_on_expiration.setter
    def payout_on_expiration(self, payout_on_expiration):
        """Sets the payout_on_expiration of this SupplementType.


        :param payout_on_expiration: The payout_on_expiration of this SupplementType.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and payout_on_expiration is None:  # noqa: E501
            raise ValueError("Invalid value for `payout_on_expiration`, must not be `None`")  # noqa: E501

        self._payout_on_expiration = payout_on_expiration

    @property
    def payout_on_termination(self):
        """Gets the payout_on_termination of this SupplementType.  # noqa: E501


        :return: The payout_on_termination of this SupplementType.  # noqa: E501
        :rtype: bool
        """
        return self._payout_on_termination

    @payout_on_termination.setter
    def payout_on_termination(self, payout_on_termination):
        """Sets the payout_on_termination of this SupplementType.


        :param payout_on_termination: The payout_on_termination of this SupplementType.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and payout_on_termination is None:  # noqa: E501
            raise ValueError("Invalid value for `payout_on_termination`, must not be `None`")  # noqa: E501

        self._payout_on_termination = payout_on_termination

    @property
    def title(self):
        """Gets the title of this SupplementType.  # noqa: E501


        :return: The title of this SupplementType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SupplementType.


        :param title: The title of this SupplementType.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def vesting(self):
        """Gets the vesting of this SupplementType.  # noqa: E501


        :return: The vesting of this SupplementType.  # noqa: E501
        :rtype: str
        """
        return self._vesting

    @vesting.setter
    def vesting(self, vesting):
        """Sets the vesting of this SupplementType.


        :param vesting: The vesting of this SupplementType.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vesting is None:  # noqa: E501
            raise ValueError("Invalid value for `vesting`, must not be `None`")  # noqa: E501
        allowed_values = ["Accrual", "Prepaid", "Postpaid"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and vesting not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `vesting` ({0}), must be one of {1}"  # noqa: E501
                .format(vesting, allowed_values)
            )

        self._vesting = vesting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplementType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupplementType):
            return True

        return self.to_dict() != other.to_dict()
