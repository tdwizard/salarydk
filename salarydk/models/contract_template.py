# coding: utf-8

"""
    Salary.dk API

    This is the public API for Salary.dk.  # General  Our API is a JSON-based, REST-like API. Our webapp uses the exact same API, so everything you can do in our webapp, you can do through our API. However, we are slowly opening up the API, so not all endpoints are documented here yet. Only the endpoints documented here are stable. If there is some functionality you would like to access through our API, please contact us.  The API is located at https://api.salary.dk. All requests must use TLS.  In order to use the API on behalf of other users than yourself, you need to register as an API client. You do this by sending an e-mail to dev@salary.dk with the name and purpose of your client.  API-keys for each account can be obtained once logged in to Salary, under the settings for the Company.  All endpoints are documented to be able to return the 500 error code. We strive to not return this error code, so if you do encounter this error code, it might mean there is an error on our side. In this case, do not hesitate to contact us.  # Versioning, upgrade and deprecation policy Our API might change over time. In order to ensure a stable API, we follow these rules when changing the API.  New fields might be added at any time to any response or as non-required parameters to any input. When adding input fields, we ensure the default behaviour when not supplying the field is the same as the previous version. In these cases, the version of an endpoint is not increased, since it is backwards compatible. Since we might add new fields to responses, be sure to use a JSON parser in your implementation. This ensures that any extra fields added are ignored by your implementation.  We might add entirely new endpoints at any time. If we need to change an existing endpoint without being able to make it backwards compatible, we will add a new version of the endpoint, and mark the old as deprecated but still functional. We will then contact any users of the deprecated endpoint and ensure an upgrade is performed. Once all consumers have moved to the new endpoint version, the old one will be removed.  We will not at any point change the meaning of any existing field, nor will we remove any field or endpoint without following the above deprecated procedure. However, we might add new types to existing enums at any time.  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/) - and that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site, as long as the proper access token is passed.  # Authentication All request require an access token. There are two ways to obtain an access token: * Logging in as a user. (this endpoint is not yet publicly available). * Using an API-key: [endpoint](#operation/APIClientLogin)  Using one of these methods, you will obtain an access token. In all subsequest requests, this access token should be passed in the Authorization header. The access token is valid for around one hour, after which a new token should be obtained.  You do not need to dispose of access tokens once created. They have a limited lifetime, and Salary.dk will automatically expire old ones.  For some endpoints, the authorizedUserQuery security definition is used. This allows for passing the access token as a query parameter where it is not possible to pass it as a header. In particular, this is used for downloading files.  <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@salary.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from salarydk.configuration import Configuration


class ContractTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'affiliation_type': 'str',
        'company_id': 'str',
        'department_id': 'str',
        'description': 'str',
        'employee_type': 'str',
        'id': 'str',
        'income_type': 'IncomeType',
        'language': 'str',
        'parent_id': 'str',
        'pay_slip_transport_e_mail': 'bool',
        'pay_slip_transport_national_inbox': 'bool',
        'pay_slip_transport_sms': 'bool',
        'preferred_tax_card_type': 'str',
        'public': 'bool',
        'title': 'str',
        'transfer_destination_type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'active': 'active',
        'affiliation_type': 'affiliationType',
        'company_id': 'companyID',
        'department_id': 'departmentID',
        'description': 'description',
        'employee_type': 'employeeType',
        'id': 'id',
        'income_type': 'incomeType',
        'language': 'language',
        'parent_id': 'parentID',
        'pay_slip_transport_e_mail': 'paySlipTransportEMail',
        'pay_slip_transport_national_inbox': 'paySlipTransportNationalInbox',
        'pay_slip_transport_sms': 'paySlipTransportSMS',
        'preferred_tax_card_type': 'preferredTaxCardType',
        'public': 'public',
        'title': 'title',
        'transfer_destination_type': 'transferDestinationType',
        'version': 'version'
    }

    def __init__(self, active=None, affiliation_type=None, company_id=None, department_id=None, description=None, employee_type=None, id=None, income_type=None, language=None, parent_id=None, pay_slip_transport_e_mail=None, pay_slip_transport_national_inbox=None, pay_slip_transport_sms=None, preferred_tax_card_type=None, public=None, title=None, transfer_destination_type='None', version=None, local_vars_configuration=None):  # noqa: E501
        """ContractTemplate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._affiliation_type = None
        self._company_id = None
        self._department_id = None
        self._description = None
        self._employee_type = None
        self._id = None
        self._income_type = None
        self._language = None
        self._parent_id = None
        self._pay_slip_transport_e_mail = None
        self._pay_slip_transport_national_inbox = None
        self._pay_slip_transport_sms = None
        self._preferred_tax_card_type = None
        self._public = None
        self._title = None
        self._transfer_destination_type = None
        self._version = None
        self.discriminator = None

        self.active = active
        self.affiliation_type = affiliation_type
        self.company_id = company_id
        self.department_id = department_id
        self.description = description
        self.employee_type = employee_type
        if id is not None:
            self.id = id
        if income_type is not None:
            self.income_type = income_type
        self.language = language
        self.parent_id = parent_id
        self.pay_slip_transport_e_mail = pay_slip_transport_e_mail
        self.pay_slip_transport_national_inbox = pay_slip_transport_national_inbox
        self.pay_slip_transport_sms = pay_slip_transport_sms
        self.preferred_tax_card_type = preferred_tax_card_type
        self.public = public
        self.title = title
        self.transfer_destination_type = transfer_destination_type
        self.version = version

    @property
    def active(self):
        """Gets the active of this ContractTemplate.  # noqa: E501

        Determines whether or not this template is active.  # noqa: E501

        :return: The active of this ContractTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ContractTemplate.

        Determines whether or not this template is active.  # noqa: E501

        :param active: The active of this ContractTemplate.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def affiliation_type(self):
        """Gets the affiliation_type of this ContractTemplate.  # noqa: E501

        The affiliation type of the employee to the company.  # noqa: E501

        :return: The affiliation_type of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._affiliation_type

    @affiliation_type.setter
    def affiliation_type(self, affiliation_type):
        """Sets the affiliation_type of this ContractTemplate.

        The affiliation type of the employee to the company.  # noqa: E501

        :param affiliation_type: The affiliation_type of this ContractTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"Standard", "Director", "MajorityShareholder", "Freelancer"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and affiliation_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `affiliation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(affiliation_type, allowed_values)
            )

        self._affiliation_type = affiliation_type

    @property
    def company_id(self):
        """Gets the company_id of this ContractTemplate.  # noqa: E501

        The ID of the company owning the template.  # noqa: E501

        :return: The company_id of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ContractTemplate.

        The ID of the company owning the template.  # noqa: E501

        :param company_id: The company_id of this ContractTemplate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and company_id is None:  # noqa: E501
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def department_id(self):
        """Gets the department_id of this ContractTemplate.  # noqa: E501

        The id of a department.  # noqa: E501

        :return: The department_id of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this ContractTemplate.

        The id of a department.  # noqa: E501

        :param department_id: The department_id of this ContractTemplate.  # noqa: E501
        :type: str
        """

        self._department_id = department_id

    @property
    def description(self):
        """Gets the description of this ContractTemplate.  # noqa: E501

        The description of the template.  # noqa: E501

        :return: The description of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContractTemplate.

        The description of the template.  # noqa: E501

        :param description: The description of this ContractTemplate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def employee_type(self):
        """Gets the employee_type of this ContractTemplate.  # noqa: E501

        The kind of employee this template is for, to help determine the right selection during the contract creation progress.  # noqa: E501

        :return: The employee_type of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._employee_type

    @employee_type.setter
    def employee_type(self, employee_type):
        """Sets the employee_type of this ContractTemplate.

        The kind of employee this template is for, to help determine the right selection during the contract creation progress.  # noqa: E501

        :param employee_type: The employee_type of this ContractTemplate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and employee_type is None:  # noqa: E501
            raise ValueError("Invalid value for `employee_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Fixed", "Hourly", "Commissioned"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and employee_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `employee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(employee_type, allowed_values)
            )

        self._employee_type = employee_type

    @property
    def id(self):
        """Gets the id of this ContractTemplate.  # noqa: E501

        The ID of the template.  # noqa: E501

        :return: The id of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractTemplate.

        The ID of the template.  # noqa: E501

        :param id: The id of this ContractTemplate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def income_type(self):
        """Gets the income_type of this ContractTemplate.  # noqa: E501


        :return: The income_type of this ContractTemplate.  # noqa: E501
        :rtype: IncomeType
        """
        return self._income_type

    @income_type.setter
    def income_type(self, income_type):
        """Sets the income_type of this ContractTemplate.


        :param income_type: The income_type of this ContractTemplate.  # noqa: E501
        :type: IncomeType
        """

        self._income_type = income_type

    @property
    def language(self):
        """Gets the language of this ContractTemplate.  # noqa: E501

        The preferred language.  # noqa: E501

        :return: The language of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ContractTemplate.

        The preferred language.  # noqa: E501

        :param language: The language of this ContractTemplate.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def parent_id(self):
        """Gets the parent_id of this ContractTemplate.  # noqa: E501

        The ID of the parent template. The template this template was made from.  # noqa: E501

        :return: The parent_id of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ContractTemplate.

        The ID of the parent template. The template this template was made from.  # noqa: E501

        :param parent_id: The parent_id of this ContractTemplate.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def pay_slip_transport_e_mail(self):
        """Gets the pay_slip_transport_e_mail of this ContractTemplate.  # noqa: E501

        Determines whether or not pay slip information is send by EMail.  # noqa: E501

        :return: The pay_slip_transport_e_mail of this ContractTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_e_mail

    @pay_slip_transport_e_mail.setter
    def pay_slip_transport_e_mail(self, pay_slip_transport_e_mail):
        """Sets the pay_slip_transport_e_mail of this ContractTemplate.

        Determines whether or not pay slip information is send by EMail.  # noqa: E501

        :param pay_slip_transport_e_mail: The pay_slip_transport_e_mail of this ContractTemplate.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_e_mail = pay_slip_transport_e_mail

    @property
    def pay_slip_transport_national_inbox(self):
        """Gets the pay_slip_transport_national_inbox of this ContractTemplate.  # noqa: E501

        Determines whether or not pay slip information is send by national indbox.  # noqa: E501

        :return: The pay_slip_transport_national_inbox of this ContractTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_national_inbox

    @pay_slip_transport_national_inbox.setter
    def pay_slip_transport_national_inbox(self, pay_slip_transport_national_inbox):
        """Sets the pay_slip_transport_national_inbox of this ContractTemplate.

        Determines whether or not pay slip information is send by national indbox.  # noqa: E501

        :param pay_slip_transport_national_inbox: The pay_slip_transport_national_inbox of this ContractTemplate.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_national_inbox = pay_slip_transport_national_inbox

    @property
    def pay_slip_transport_sms(self):
        """Gets the pay_slip_transport_sms of this ContractTemplate.  # noqa: E501

        Determines whether or not pay slip information is send by SMS.  # noqa: E501

        :return: The pay_slip_transport_sms of this ContractTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._pay_slip_transport_sms

    @pay_slip_transport_sms.setter
    def pay_slip_transport_sms(self, pay_slip_transport_sms):
        """Sets the pay_slip_transport_sms of this ContractTemplate.

        Determines whether or not pay slip information is send by SMS.  # noqa: E501

        :param pay_slip_transport_sms: The pay_slip_transport_sms of this ContractTemplate.  # noqa: E501
        :type: bool
        """

        self._pay_slip_transport_sms = pay_slip_transport_sms

    @property
    def preferred_tax_card_type(self):
        """Gets the preferred_tax_card_type of this ContractTemplate.  # noqa: E501

        The preferred tax card type.  # noqa: E501

        :return: The preferred_tax_card_type of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._preferred_tax_card_type

    @preferred_tax_card_type.setter
    def preferred_tax_card_type(self, preferred_tax_card_type):
        """Sets the preferred_tax_card_type of this ContractTemplate.

        The preferred tax card type.  # noqa: E501

        :param preferred_tax_card_type: The preferred_tax_card_type of this ContractTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"Primary", "Secondary"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and preferred_tax_card_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `preferred_tax_card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(preferred_tax_card_type, allowed_values)
            )

        self._preferred_tax_card_type = preferred_tax_card_type

    @property
    def public(self):
        """Gets the public of this ContractTemplate.  # noqa: E501

        Determines whether or not this template is public.  # noqa: E501

        :return: The public of this ContractTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ContractTemplate.

        Determines whether or not this template is public.  # noqa: E501

        :param public: The public of this ContractTemplate.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def title(self):
        """Gets the title of this ContractTemplate.  # noqa: E501

        The title of the template.  # noqa: E501

        :return: The title of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContractTemplate.

        The title of the template.  # noqa: E501

        :param title: The title of this ContractTemplate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def transfer_destination_type(self):
        """Gets the transfer_destination_type of this ContractTemplate.  # noqa: E501

        The type of the destination for the salary pay out for this employee.  # noqa: E501

        :return: The transfer_destination_type of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._transfer_destination_type

    @transfer_destination_type.setter
    def transfer_destination_type(self, transfer_destination_type):
        """Sets the transfer_destination_type of this ContractTemplate.

        The type of the destination for the salary pay out for this employee.  # noqa: E501

        :param transfer_destination_type: The transfer_destination_type of this ContractTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"DK Account", "DK NemKonto", "Foreign Account", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and transfer_destination_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `transfer_destination_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transfer_destination_type, allowed_values)
            )

        self._transfer_destination_type = transfer_destination_type

    @property
    def version(self):
        """Gets the version of this ContractTemplate.  # noqa: E501

        The version of the template.  # noqa: E501

        :return: The version of this ContractTemplate.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ContractTemplate.

        The version of the template.  # noqa: E501

        :param version: The version of this ContractTemplate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContractTemplate):
            return True

        return self.to_dict() != other.to_dict()
